[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"Welcome website book Handbook Graphs Networks People Analytics Keith McNulty. second volume series technical textbooks professionals working analytics. view order print copy first volume, please go website: Handbook Regression Modeling People Analytics.\n\nNote: book published Chapman & Hall/CRC can purchased directly website 20% discount discount code HBG20, well Amazon book retailers. Please consider buying book find useful - author’s royalties donated Red Cross Ukraine Appeal. online version book free read (thanks Chapman & Hall/CRC), licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. feedback, please feel free file issue GitHub. Thank !book available bootstrap format plain gitbook format.","code":""},{"path":"index.html","id":"notes-on-data-used-in-this-book","chapter":"Welcome","heading":"Notes on data used in this book","text":"R Python users, data sets used book can downloaded individually following code chapter. Alternatively, intend work chapters, data sets can downloaded advance installing onadata package.R users, can installed follows:Python users, use pip install onadata install package environment. , use package:","code":"\n# install onadata package\ninstall.packages(\"onadata\")\nlibrary(onadata)\n\n# see a list of data sets\ndata(package = \"onadata\")\n\n# find out more about a specific data set ('karate' example)\nhelp(karate)# import onadata package\nimport onadata as ona\nimport pandas as pd\n\n# see a list of data sets\nona.list_sets()\n\n# load data into a dataframe\ndf = ona.karate()\n\n# find out more about a specific data set ('karate' example)\nona.karate().info()"},{"path":"index.html","id":"technical-note-for-r-users","chapter":"Welcome","heading":"Technical note for R users","text":"book uses new native pipe operator |> introduced R version 4.1.0. Users using older version R, wish use alternative pipe operator %>% can simply replace code. However, appropriate library containing %>% need loaded, magrittr, dplyr tidyverse.Many thanks!Last updated: 02 May 2024","code":""},{"path":"foreword-by-professor-jeff-polzer.html","id":"foreword-by-professor-jeff-polzer","chapter":"Foreword by Professor Jeff Polzer","heading":"Foreword by Professor Jeff Polzer","text":"understand comes getting things done organizations, “know” matters. truism scratches surface, though, deeply social networks affect everything . shape day--day opportunities every meeting, email, serendipitous encounter, just interaction turn alters networks. strengthen relationships, develop new ones, let others languish. spend lots time attention focusing immediate relationships, good reason; source joy psychological fulfillment, helping us jobs achieve goals.give attention direct relationships, however, miss important part social structure embedded. , ’s just know, friends colleagues know helps us succeed. distant, indirect connections hard discern, accuracy diminishes try evaluate indirect ties make sense fit larger picture. Though hidden direct line sight, social structure powerful influence , organizations, can achieve.Keith McNulty’s new book network analysis comes play. draws rich tradition social science distill know networks clearly explain analyze apply network data organizational challenges. Network researchers identified powerful patterns easily overlooked one person’s vantage point, -depth studies relationships among small groups employees, intricate analyses teams embedded organizational networks, cross-firm investigations interlocked boards directors, among many others. beauty network analysis allows seemingly simple dyadic connections individuals knit together entire social structure. approach allows us zoom answer questions different levels analysis, whether centrality specific individual centralized structure entire organization.time ripe organizations embrace network analyses understand connections among employees helping hurting ability achieve goals. companies come understand value using network techniques core business, Google using links websites organize internet searches, LinkedIn using ties platform users guide job searches, started experiment using network concepts methods address workforce challenges. availability new digital sources data ever-growing computational power, coupled well-documented rigor network methods, hold great promise understanding employee networks function.companies forefront field incorporated network analyses toolkits years ago, many cases importing adapting methods academic research via newly minted people analytics teams. organizations, however, yet considered approach encountered obstacles along way. managers, example, intuitively understand basic importance “networking,” still view rigorous network analysis esoteric subject. Others may struggle decide sources employee data use—whether digital communication platforms, surveys, HR information systems—gather prepare data type analysis without violating employee privacy trust. result challenges, gap possible currently practice remains wide, part poised work may appreciate extent network methods adaptable versatile.book aims bridge gap, laying foundational building blocks networks terms concepts, terminology, data, analyses, code, complete hands-examples real use cases. exciting inspiring see way McNulty explains network methods, unpacks distinct elements analytic steps make transparent. makes easier readers see elements fit together apply organizational challenges, sparking new ideas innovative solutions. demystifying topic, McNulty empowers people find solutions engage productive conversations, regardless writing actual code running analyses. book can help democratize network analysis improve level data fluency organizations generally. Considering benefits understanding network analysis, easy see top business schools now include curriculum, whether course People Analytics domains.clearer understanding network methods hand, potential applications approach excite human resources people analytics, also managers trying help employees work together productive sustainable way improves individual collective welfare. Virtually every organization trying juggle demand employees work remotely, others anxiously wait return office, creating need design hybrid arrangements satisfy everyone. Communication collaboration networks heart questions, whether goal execute current projects, spur innovation, improve employee well-. Companies now using network analyses help challenges include socializing new hires, cultivating environment inclusion belonging, preventing collaboration overload burnout, planning office utilization. Beyond types organizational concerns, scientists across disciplines using tools tackle world’s pressing problems, mapping spread infectious disease understanding social conduits political polarization. issues, many , amenable network approaches. valuable book can help examine challenges new angles design fresh approaches address .Jeff Polzer\nDecember 2021Jeffrey T. Polzer UPS Foundation Professor Human Resource Management Organizational Behavior Unit Harvard Business School. studies people collaborate teams across organizational networks accomplish individual collective goals. ongoing projects collaboration number organizations, often working members people analytics groups problems mutual interest. taught variety courses MBA, Executive, Doctoral Programs HBS, published research numerous top management psychology journals.","code":""},{"path":"introduction.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"One evening early 2014, settled front computer catch family tree research. second major sprint digging stories predecessors. previous sprint back 2001 weekend trips family records center London. Back , course year dedicated effort part, slowly managed find information immediate ancestors dating back late 1800s.second sprint different. course weeks, created extensively deep wide family tree branches going way back 17th century England. particular evening real surprise. logged Ancestry website, hint waiting asking click another member’s family tree seemed common ancestor. duly clicked, confirmed common ancestor followed new tree present day. One names saw got Alan S. P. Rickman.quick check family tree details Wikipedia biography revealed Alan Rickman—star Harry Potter movies, original Die Hard, many big-screen classics. always one favorite British actors, now learned second cousin . latest attempt genealogical research proving truly amazing experience . never imagined progress quickly discover rich surprising information.second sprint genealogy much productive first? course, part reason digitization revolution, meant historic documents available instantly electronically case decade . biggest reason make much rapid progress longer alone. , fact, part huge open network graph created millions family history researchers. hint appeared led new-found famous cousin, edge connected nodes family tree nodes Alan Rickman ancestors. hundreds edges previous months allowed reach far wide ancestral history. Thirteen years earlier last tried , graph simply exist.Like , nowadays us part least one big graph come existence early years 21st century. connect someone Facebook LinkedIn follow someone Twitter Instagram, casting yet another edge gigantic graph. Maybe genealogy thing prefer music, books, knitting? Don’t worry, ’s graph can connect people interests share passion knowledge. stuck traffic jam car standstill, may contributing value edge numerous GPS navigation graphs thus helping person avoid pain.technology graphs around us enables many ways live lives today. technology also available us cost analytic tool allow us better understand network structures dynamics fields science, technology, economics, sociology psychology, name just . available academics practitioners alike can used problems ranging small network analysis takes minutes laptop, massive scale network mining requiring days weeks processing time.’s problem: people really know network analysis. still considered many deep specialism even ‘dark art’. shouldn’t . academic students researchers know apply graph theory methods work. business analytics professionals know store analyze data traditional rectangular form focuses connection rather transaction. companies organizations thinking data can structured analyzed tell people, skills knowledge connect can influence key positive negative institutional outcomes. ’s , need expensive inflexible network analysis visualization software offered vendors , best tools freely available open source just require little bit programming skill make full use .book aims make field graph network analysis approachable students professionals explaining important elements theory sharing common methodologies using open source programming languages like R Python. explaining theory much detail necessary support analytical curiosity interpretation, using wide array example data sets code snippets demonstrate specific implementation interpretation methodologies. start book learn simple important steps like creating graphs data sources visualizing intuitively. finish book learn important measures like graph density centrality useful algorithms partitioning graphs identifying communities complex populations. see read , methods many exciting applications. organizational settings—personal speciality—can applied problems onboarding new hires, encouraging diverse collaboration interaction, finding efficient communication strategies, identifying new organizational structures better reflect flow work, detecting intensely collaborative groups, connecting individuals common interests, finding potential leaders many problems.way book complete overview graph theory methods—least without printer running ink. many, many elements graph theory methodology covered book. focus primarily teaching critical elements use graphs sociological, psychological organizational context. book improve time, feel missed anything important, spot errors suggestions, please get touch leaving issue book’s Github repository1. use contents book examples teaching purposes, don’t need ask permission , ask reference book source.just remains thank various people groups helped make book reality. Various individuals contributed making book better reading early drafts, trying code, offering encouragement suggesting new examples, particular: Liz Romero, Rachel Ramsay, Christopher Belanger, Jenna Eagleson Bennet Voorhees. Nothing book possible without fantastic packages exist languages like R Python working graphs, authors contributors open source packages like igraph, networkx, ggraph, pyvis, visNetwork networkD3 deserve thanks. grateful Stanford Network Analysis Project (SNAP) SocioPatterns collaboration2 data sets make available public, many used examples book. always, thanks go developers work rmarkdown bookdown R packages allow write format technical books much less complexity otherwise case.doubt network analysis exciting, fun fastest developing field People Analytics. hope much fun learning book writing .Keith McNulty\nOctober 2021","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"the-basics-of-the-r-programming-language","chapter":"The Basics of the R Programming Language","heading":"The Basics of the R Programming Language","text":"work book implemented R statistical programming language , along Python, one two languages use day--day statistical analysis. Sample implementations Python also provided various points book. wish follow method theory without implementations book, need read preliminary section. However, style book use implementation illustrate theory practice, tolerance many code blocks necessary read onward.wish simply replicate work quickly possible, able avail code block copying feature, appears whenever scroll input code block. Assuming required external packages installed, code blocks transportable immediately usable. parts book used graphics illustrate concept hidden underlying code consider important learning objectives point. Nevertheless want see , one best place go Github repository book.preliminary section wish learn methods book know use programming language. However, intended full tutorial R. many qualified individuals existing resources better serve purpose—particular recommend Wickham & Grolemund (2016). recommended consult resources become comfortable basics R proceeding later chapters book. However, acknowledging many want dive sooner rather later, section covers absolute basics R allow uninitiated reader proceed least orientation.","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"what-is-r","chapter":"The Basics of the R Programming Language","heading":"0.1 What is R?","text":"R programming language originally developed statisticians, recent years capabilities environments used expanded greatly, extensive use nowadays academia public private sectors. many advantages using programming language like R. :completely free open source.faster efficient memory popular graphical user interface analytics tools.facilitates easier replication analysis person person compared many alternatives.large growing global community active users.large rapidly growing universe packages, free provide ability extremely wide range general highly specialized tasks, statistical otherwise.often heated debate tools better non-trivial statistical analysis. personally find R provides widest array resources interested statistical modeling, Python better general-purpose toolkit particularly well kitted machine learning applications.","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"how-to-start-using-r","chapter":"The Basics of the R Programming Language","heading":"0.2 How to start using R","text":"Just like programming languages, R interpreter receives input returns output. easy use without IDE. IDE Integrated Development Environment, convenient user interface allowing R programmer main tasks including writing running R code, saving files, viewing data plots, integrating code documents many things. far popular IDE R RStudio. example RStudio IDE looks like can seen Figure 0.1.\nFigure 0.1: RStudio IDE\nstart using R, follow steps:Download install latest version R https://www.r-project.org/. Ensure version suits operating system.Download latest version RStudio IDE https://rstudio.com/products/rstudio/ view video page familiarize features.Open RStudio play around.initial stages using R can challenging, mostly due need become familiar R understands, stores processes data. Extensive trial error learning necessity. Perseverance important early stages, well openness seek help others either person via online forums.","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"data-in-r","chapter":"The Basics of the R Programming Language","heading":"0.3 Data in R","text":"start tasks involving data R, generally want store things create can refer later. Simply calculating something store R. example, simple calculation like can performed easily:However, soon calculation complete, forgotten R result hasn’t assigned anywhere. store something R session, assign name using <- operator. can assign previous calculation object called my_sum, allows access value time.see can comment code simply adding # start line ensure line ignored interpreter.Note assignment object result value displayed. display value, name object must typed, print() command used command wrapped parentheses.","code":"\n3 + 3## [1] 6\n# store the result\nmy_sum <- 3 + 3\n# now I can work with it\nmy_sum + 3## [1] 9\n# show me the value of my_sum\nmy_sum## [1] 6\n# assign my_sum + 3 to new_sum and show its value\n(new_sum <- my_sum + 3)## [1] 9"},{"path":"the-basics-of-the-r-programming-language.html","id":"data-types","chapter":"The Basics of the R Programming Language","heading":"0.3.1 Data types","text":"data R associated type, reflect wide range data R able work . typeof() function can used see type single scalar value. Let’s look common scalar data types.Numeric data can integer form double (decimal) form.Character data text data surrounded single double quotes.Logical data takes form TRUE FALSE.","code":"\n# integers can be signified by adding an 'L' to the end\nmy_integer <- 1L  \nmy_double <- 6.38\ntypeof(my_integer)## [1] \"integer\"\ntypeof(my_double)## [1] \"double\"\nmy_character <- \"THIS IS TEXT\"\ntypeof(my_character)## [1] \"character\"\nmy_logical <- TRUE\ntypeof(my_logical)## [1] \"logical\""},{"path":"the-basics-of-the-r-programming-language.html","id":"homogeneous-data-structures","chapter":"The Basics of the R Programming Language","heading":"0.3.2 Homogeneous data structures","text":"Vectors one-dimensional structures containing data type notated using c(). type vector can also viewed using typeof() function, str() function can used display contents vector type.Categorical data—takes finite number possible values—can stored factor vector make easier perform grouping manipulation.needed, factors can given order.number elements vector can seen using length() function.Simple numeric sequence vectors can created using shorthand notation.try mix data types inside vector, usually result type coercion, one types forced different type ensure homogeneity. Often means vector become character vector.sometimes logical factor types coerced numeric.Matrices two-dimensional data structures type built vector defining number rows columns. Data read matrix columns, starting left moving right. Matrices rarely used non-numeric data types.Arrays n-dimensional data structures data type used extensively R users.","code":"\nmy_double_vector <- c(2.3, 6.8, 4.5, 65, 6)\nstr(my_double_vector)##  num [1:5] 2.3 6.8 4.5 65 6\ncategories <- factor(\n  c(\"A\", \"B\", \"C\", \"A\", \"C\")\n)\nstr(categories)##  Factor w/ 3 levels \"A\",\"B\",\"C\": 1 2 3 1 3\n# character vector \nranking <- c(\"Medium\", \"High\", \"Low\")\nstr(ranking)##  chr [1:3] \"Medium\" \"High\" \"Low\"\n# turn it into an ordered factor\nranking_factors <- ordered(\n  ranking, levels = c(\"Low\", \"Medium\", \"High\")\n)\nstr(ranking_factors)##  Ord.factor w/ 3 levels \"Low\"<\"Medium\"<..: 2 3 1\nlength(categories)## [1] 5\n(my_sequence <- 1:10)##  [1]  1  2  3  4  5  6  7  8  9 10\n# numeric sequence vector\nvec <- 1:5\nstr(vec)##  int [1:5] 1 2 3 4 5\n# create a new vector containing vec and the character \"hello\"\nnew_vec <- c(vec, \"hello\")\n# numeric values have been coerced into their character equivalents\nstr(new_vec)##  chr [1:6] \"1\" \"2\" \"3\" \"4\" \"5\" \"hello\"\n# attempt a mixed logical and numeric\nmix <- c(TRUE, 6)\n# logical has been converted to binary numeric (TRUE = 1)\nstr(mix)##  num [1:2] 1 6\n# try to add a numeric to our previous categories factor vector\nnew_categories <- c(categories, 1)\n# categories have been coerced to background integer representations\nstr(new_categories)##  num [1:6] 1 2 3 1 3 1\n# create a 2x2 matrix with the first four integers\n(m <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4"},{"path":"the-basics-of-the-r-programming-language.html","id":"heterogeneous-data-structures","chapter":"The Basics of the R Programming Language","heading":"0.3.3 Heterogeneous data structures","text":"Lists one-dimensional data structures can take data type.List elements can data type dimension. element can given name.Named list elements can accessed using $.Dataframes used data structure R; effectively named list vectors length, vector column. , dataframe similar nature typical database table spreadsheet.","code":"\nmy_list <- list(6, TRUE, \"hello\")\nstr(my_list)## List of 3\n##  $ : num 6\n##  $ : logi TRUE\n##  $ : chr \"hello\"\nnew_list <- list(\n  scalar = 6, \n  vector = c(\"Hello\", \"Goodbye\"), \n  matrix = matrix(1:4, nrow = 2, ncol = 2)\n)\nstr(new_list)## List of 3\n##  $ scalar: num 6\n##  $ vector: chr [1:2] \"Hello\" \"Goodbye\"\n##  $ matrix: int [1:2, 1:2] 1 2 3 4\nnew_list$matrix##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\n# two vectors of different types but same length\nnames <- c(\"John\", \"Ayesha\")\nages <- c(31, 24)\n# create a dataframe\n(df <- data.frame(names, ages))##    names ages\n## 1   John   31\n## 2 Ayesha   24\n# get types of columns\nstr(df)## 'data.frame':    2 obs. of  2 variables:\n##  $ names: chr  \"John\" \"Ayesha\"\n##  $ ages : num  31 24\n# get dimensions of df\ndim(df)## [1] 2 2"},{"path":"the-basics-of-the-r-programming-language.html","id":"working-with-dataframes","chapter":"The Basics of the R Programming Language","heading":"0.4 Working with dataframes","text":"dataframe common data structure used analysts R, due similarity data tables found databases spreadsheets. work dataframes lot book, let’s get know .","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"loading-and-tidying-data-in-dataframes","chapter":"The Basics of the R Programming Language","heading":"0.4.1 Loading and tidying data in dataframes","text":"work data R, usually need pull outside source dataframe3. R facilitates numerous ways importing data simple .csv files, Excel files, online sources databases. Let’s load data set use later—chinook_employees data set, contains information employees sales company. read.csv() function can accept URL address file online.might want display entire data set knowing big . can view dimensions, big display, can use head() function display just first rows.can view specific column using $, can use square brackets view specific entry. example wanted see 6th entry LastName column:Alternatively, can use [row, column] index get specific entry dataframe.can take look data types using str().can also see statistical summary column using summary(), tells us various statistics depending type column.Missing data R identified special NA value. confused \"NA\", simply character string. function .na() look values vector dataframe return TRUE FALSE based whether NA . adding using sum() function, take TRUE 1 FALSE 0, effectively provides count missing data.cases, might want remove rows data contain NAs. easiest way use complete.cases() function, identifies rows NAs, can select rows dataframe based condition. Note can overwrite objects name R.can see unique values vector column using unique() function.need change type column dataframe, can use .numeric(), .character(), .logical() .factor() functions. example, given seven unique values FirstName column chinook_employees, may want convert current character form factor.","code":"\n# url of data set \nurl <- \"https://ona-book.org/data/chinook_employees.csv\"\n# load the data set and store it as a dataframe called workfrance_edges\nchinook_employees <- read.csv(url)\ndim(chinook_employees)## [1] 8 4\n# eight rows, lets view first six\nhead(chinook_employees)##   EmployeeId FirstName LastName ReportsTo\n## 1          1    Andrew    Adams        NA\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n## 5          5     Steve  Johnson         2\n## 6          6   Michael Mitchell         1\nchinook_employees$LastName[6]## [1] \"Mitchell\"\nchinook_employees[4, 3]## [1] \"Park\"\nstr(chinook_employees)## 'data.frame':    8 obs. of  4 variables:\n##  $ EmployeeId: int  1 2 3 4 5 6 7 8\n##  $ FirstName : chr  \"Andrew\" \"Nancy\" \"Jane\" \"Margaret\" ...\n##  $ LastName  : chr  \"Adams\" \"Edwards\" \"Peacock\" \"Park\" ...\n##  $ ReportsTo : int  NA 1 2 2 2 1 6 6\nsummary(chinook_employees)##    EmployeeId    FirstName           LastName           ReportsTo    \n##  Min.   :1.00   Length:8           Length:8           Min.   :1.000  \n##  1st Qu.:2.75   Class :character   Class :character   1st Qu.:1.500  \n##  Median :4.50   Mode  :character   Mode  :character   Median :2.000  \n##  Mean   :4.50                                         Mean   :2.857  \n##  3rd Qu.:6.25                                         3rd Qu.:4.000  \n##  Max.   :8.00                                         Max.   :6.000  \n##                                                       NA's   :1\nsum(is.na(chinook_employees))## [1] 1\n# remove rows containing an NAs\nchinook_employees <- chinook_employees[complete.cases(chinook_employees), ]\n\n# confirm no NAs\nsum(is.na(chinook_employees))## [1] 0\nunique(chinook_employees$FirstName)## [1] \"Nancy\"    \"Jane\"     \"Margaret\" \"Steve\"    \"Michael\"  \"Robert\"   \"Laura\"\nchinook_employees$FirstName <- as.factor(chinook_employees$FirstName)\nstr(chinook_employees)## 'data.frame':    7 obs. of  4 variables:\n##  $ EmployeeId: int  2 3 4 5 6 7 8\n##  $ FirstName : Factor w/ 7 levels \"Jane\",\"Laura\",..: 5 1 3 7 4 6 2\n##  $ LastName  : chr  \"Edwards\" \"Peacock\" \"Park\" \"Johnson\" ...\n##  $ ReportsTo : int  1 2 2 2 1 6 6"},{"path":"the-basics-of-the-r-programming-language.html","id":"manipulating-dataframes","chapter":"The Basics of the R Programming Language","heading":"0.4.2 Manipulating dataframes","text":"Dataframes can subsetted contain rows satisfy specific conditions.Note use ==, used many programming languages, test precise equality. Similarly can select columns based inequalities (> ‘greater ’‍, < ‘less ’‍, >= ‘greater equal ’‍, <= ‘less equal ’‍, != ‘equal ’). example:select specific columns use select argument.Two dataframes column names can combined rows.Two dataframes different column names can combined columns.","code":"\n(chinook_employee_5 <- subset(chinook_employees, subset = EmployeeId == 5))##   EmployeeId FirstName LastName ReportsTo\n## 5          5     Steve  Johnson         2\n(chinook_employees_upto5 <- subset(chinook_employees, \n                                   subset = EmployeeId <= 5))##   EmployeeId FirstName LastName ReportsTo\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n## 5          5     Steve  Johnson         2\n(chinook_employee_names <- subset(chinook_employees, \n                                 select = c(\"FirstName\", \"LastName\")))##   FirstName LastName\n## 2     Nancy  Edwards\n## 3      Jane  Peacock\n## 4  Margaret     Park\n## 5     Steve  Johnson\n## 6   Michael Mitchell\n## 7    Robert     King\n## 8     Laura Callahan\nchinook_employee_7 <- subset(chinook_employees, subset =EmployeeId == 7)\n\n# bind the rows to chinook_employee_5\n(chinook_employee_5and7 = rbind(chinook_employee_5, chinook_employee_7))##   EmployeeId FirstName LastName ReportsTo\n## 5          5     Steve  Johnson         2\n## 7          7    Robert     King         6\nchinook_reporting <- subset(chinook_employees, \n                     select = c(\"EmployeeId\", \"ReportsTo\"))\n\n# bind the columns to chinook_employee_names\n(full_df <- cbind(chinook_reporting, chinook_employee_names))##   EmployeeId ReportsTo FirstName LastName\n## 2          2         1     Nancy  Edwards\n## 3          3         2      Jane  Peacock\n## 4          4         2  Margaret     Park\n## 5          5         2     Steve  Johnson\n## 6          6         1   Michael Mitchell\n## 7          7         6    Robert     King\n## 8          8         6     Laura Callahan"},{"path":"the-basics-of-the-r-programming-language.html","id":"functions-packages-and-libraries","chapter":"The Basics of the R Programming Language","heading":"0.5 Functions, packages and libraries","text":"code far used variety functions. example head(), subset(), rbind(). Functions operations take certain defined inputs return output. Functions exist perform common useful operations.","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"using-functions","chapter":"The Basics of the R Programming Language","heading":"0.5.1 Using functions","text":"Functions usually take one arguments. Often large number arguments function can take, many optional required specified user. example, function head(), displays first rows dataframe4, one required argument x: name dataframe. second argument optional, n: number rows display. n entered, assumed default value n = 6.running function, can either specify arguments name can enter order without names. enter arguments without naming , R expects arguments entered exactly right order.","code":"\n# see the head of chinook_employees, with the default of six rows\nhead(chinook_employees)##   EmployeeId FirstName LastName ReportsTo\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n## 5          5     Steve  Johnson         2\n## 6          6   Michael Mitchell         1\n## 7          7    Robert     King         6\n# see fewer rows - arguments need to be in the right order if not named\nhead(chinook_employees, 3)##   EmployeeId FirstName LastName ReportsTo\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n# or if you don't know the right order, \n# name your arguments and you can put them in any order\nhead(n = 3, x = chinook_employees)##   EmployeeId FirstName LastName ReportsTo\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2"},{"path":"the-basics-of-the-r-programming-language.html","id":"help-with-functions","chapter":"The Basics of the R Programming Language","heading":"0.5.2 Help with functions","text":"functions R excellent help documentation. get help head() function, type help(head) ?head. display results Help browser window RStudio. Alternatively can open Help browser window directly RStudio search . example browser results head() Figure 0.2.\nFigure 0.2: Results search head() function RStudio Help browser\nhelp page normally shows following:Description purpose functionUsage examples, can quickly see usedArguments list can see names order argumentsDetails notes considerations useExpected value output (example head() expected return similar object first input x)Examples help orient (sometimes examples can abstract nature helpful users)","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"writing-your-own-functions","chapter":"The Basics of the R Programming Language","heading":"0.5.3 Writing your own functions","text":"Functions limited come packaged R. Users can write functions perform tasks helpful objectives. Experienced programmers languages subscribe principle called DRY (Don’t Repeat ). Whenever task needs done repeatedly, poor practice write code numerous times. makes sense write function task.example, simple function written generates report dataframe:can test function using chinook_employees data set (remember removed row containing NA value earlier).","code":"\n# create df_report function\ndf_report <- function(df) {\n  paste(\"This dataframe contains\", nrow(df), \"rows and\", \n        ncol(df), \"columns. There are\", sum(is.na(df)), \"NA entries.\")\n}\ndf_report(chinook_employees)## [1] \"This dataframe contains 7 rows and 4 columns. There are 0 NA entries.\""},{"path":"the-basics-of-the-r-programming-language.html","id":"installing-packages","chapter":"The Basics of the R Programming Language","heading":"0.5.4 Installing packages","text":"common functions used far exist base R installation. However, beauty open source languages like R users can write functions resources release others via packages. package additional module can installed easily; makes resources available base R installation. book using functions base R popular useful packages. example, fundamental package use book igraph package constructing analyzing graphs.external package can used, must installed package library using install.packages(). install igraph, type install.packages(\"igraph\") console. send R main internet repository R packages (known CRAN). find right version igraph operating system download install package library. igraph needs packages order work, also install packages.want install one package, put names packages inside character vector—example:installed package, can see functions available calling help , example using help(package = igraph). One package may wish install now onadata package, contains data sets used book. installing loading package, data sets used book loaded R session ready work . , can ignore read.csv() commands later book, download data internet.","code":"\nmy_packages <- c(\"igraph\", \"ggraph\")\ninstall.packages(my_packages)"},{"path":"the-basics-of-the-r-programming-language.html","id":"using-packages","chapter":"The Basics of the R Programming Language","heading":"0.5.5 Using packages","text":"installed package package library, use R session need load using library() function. example, load igraph installing , use library(igraph). Often nothing happen use command, rest assured package loaded can start use functions inside . Sometimes load package series messages display, usually make aware certain things need keep mind using package. Note whenever see library() command book, assumed already installed package command. , library() command fail.package loaded library, can use functions inside . example, degree() function available load igraph package becomes available loaded. sense, functions ‘belong’ packages.Problems can occur load packages contain functions name functions already exist R session. Often messages see loading package alert . R faced situation function exists multiple packages loaded, R always defaults function recently loaded package. may always intended.One way completely avoid issue get habit namespacing functions. namespace, simply use package::function(), safely call degree() igraph, use igraph::degree(). time book function called package outside base R, use namespacing call function. help avoid confusion packages used functions.","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"the-pipe-operator","chapter":"The Basics of the R Programming Language","heading":"0.5.6 The pipe operator","text":"Even elementary briefing R, difficult ignore pipe operator. pipe operator makes code natural read write reduces typical computing problem many nested operations inside parentheses.example, imagine wanted following two operations one command:Subset chinook_employees LastName values EmployeeId less 5Convert names upper case characters.Rememering already removed rows NA values chinook_employees, one way :nested needs read inside order align instructions. pipe operator |> takes command comes places inside function follows (first unnamed argument). reduces complexity allows follow logic clearly.pipe operator widely used helps make code readable, reduces complexity, helps orient around common ‘grammar’ manipulation data. pipe operator helps structure code clearly around nouns (objects), verbs (functions) adverbs (arguments functions). One developed sets packages R follows principles tidyverse family packages, encourage explore5.","code":"\ntoupper(subset(chinook_employees$LastName, \n               subset = chinook_employees$EmployeeId < 5))## [1] \"EDWARDS\" \"PEACOCK\" \"PARK\"\n# use the pipe operator to lay out the steps more logically\nchinook_employees$LastName |> \n  subset(subset = chinook_employees$EmployeeId < 5) |> \n  toupper() ## [1] \"EDWARDS\" \"PEACOCK\" \"PARK\""},{"path":"the-basics-of-the-r-programming-language.html","id":"errors-warnings-and-messages","chapter":"The Basics of the R Programming Language","heading":"0.6 Errors, warnings and messages","text":"mentioned earlier section, getting familiar R can frustrating beginning never programmed . can expect regularly see messages, warnings errors response commands. encourage regard friend rather enemy. tempting take latter approach starting , time hope appreciate wisdom words.Errors serious problems usually result halting code failure return requested output. usually come indication source error, can sometimes easy understand sometimes frustratingly vague abstract. example, easy--understand error :helps see used EmployeeId = 5 condition subset data, used EmployeeId == 5 precise equality.much challenging error understand :first faced error can’t understand, try get frustrated proceed knowledge usually can fixed easily quickly. Often problem much obvious think, , still 99% likelihood others made error can read online. first step take look code see can spot wrong. case, may see used square brackets [] instead parentheses () calling head() function. see wrong, next step ask colleague internet search text error message receive, consult online forums like https://stackoverflow.com. experienced become, easier interpret error messages.Warnings less serious usually alert something might overlooking indicate problem output. many cases can ignore warnings, sometimes important reminder go back edit code. example, may run model doesn’t converge, stop R returning results, also useful know didn’t converge.Messages pieces information may may useful particular point time. Sometimes receive messages load package library. Sometimes messages keep date progress process taking long time execute.","code":"subset(chinook_employees, subset = EmployeeId = 5)Error: unexpected '=' in \"subset(salespeople, subset = sales =\"\nhead[chinook_employees]Error in head[salespeople] : object of type 'closure' is not subsettable"},{"path":"the-basics-of-the-r-programming-language.html","id":"plotting-and-graphing","chapter":"The Basics of the R Programming Language","heading":"0.7 Plotting and graphing","text":"might expect well-developed programming language, numerous ways plot graph information R. exploratory data analysis fairly simple data don’t need worry pretty appearance formatting, built-plot capabilities base R fine. need pretty appearance, precision, color coding even 3D graphics animation, also specialized plotting graphing packages purposes. general working interactively RStudio, graphical output rendered Plots pane, can copy save image.","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"plotting-in-base-r","chapter":"The Basics of the R Programming Language","heading":"0.7.1 Plotting in base R","text":"simplest plot function base R plot(). performs basic X-Y plotting. example, code generate scatter plot Ozone Temp built-airquality data set R, results displayed Figure 0.3. Note use arguments main, xlab ylab customizing axis labels title plot.\nFigure 0.3: Simple scatterplot Ozone Temp airquality data set\nHistograms data can generated using hist() function. command generate histogram Ozone displayed Figure 0.4. Note use breaks customize bars appear.\nFigure 0.4: Simple histogram Ozone airquality data set\nBox whisker plots excellent ways see distribution variable, can grouped another variable see bivariate patterns. example, command show box whisker plot Ozone grouped Month, output shown Figure 0.5. Note use formula data notation define variable interested want grouped.\nFigure 0.5: Simple box plot Ozone grouped Month airquality data set\namong common plots used data exploration purposes. examples wider range plotting graphing functions available base R, line plots, bar plots varieties may see later book.","code":"\n# scatter plot of ozone against temp\nplot(x = airquality$Temp, y = airquality$Ozone,\n     xlab = \"Temperature (F)\", ylab = \"Ozone\",\n     main = \"Scatterplot of Ozone vs Temperature\")\n# histogram of ozone\nhist(airquality$Ozone, breaks = 10,\n     xlab = \"Ozone levels\", \n     main = \"Histogram of Ozone Levels\")\n# box plot of Ozone by Month\nboxplot(formula = Ozone ~ Month, data = airquality,\n        xlab = \"Month\", ylab = \"Ozone levels\",\n        main = \"Boxplot of Ozone Levels by Month\")"},{"path":"the-basics-of-the-r-programming-language.html","id":"specialist-plotting-and-graphing-packages","chapter":"The Basics of the R Programming Language","heading":"0.7.2 Specialist plotting and graphing packages","text":"far commonly used specialist plotting graphing package R ggplot2. ggplot2 allows flexible construction wide range charts graphs, uses specific command grammar can take getting used . However, learned, ggplot2 can extremely powerful tool. Later book make lot references ggplot2 extension packages like ggraph. great learning resource ggplot2 Wickham (2016). examples recreate plots previous section ggplot2 using layered graphics grammar.start graphing, ggplot() function usually requires data set. can also define aesthetic mappings initial function, associate feature chart element data. aesthetic mappings inherited later commands layering. case, use airquality data set, define x y aesthetics use geom_point() draw scatter plot visual customization. also use theme command obtain preset look chart—case minimal look—customize title axis labels. result Figure 0.6.\nFigure 0.6: Simple scatter plot Ozone Temp airquality data set using ggplot2\ncreate histogram Ozone readings. use similar approach result Figure 0.7.\nFigure 0.7: Simple histogram Ozone airquality data set using ggplot2\nfinally, create box whisker plot using principles, result 0.8.\nFigure 0.8: Simple boxplot Ozone Month airquality data set using ggplot2\n","code":"\nlibrary(ggplot2)\n\n# create scatter of Ozone vs Temp in airquality data set\nggplot(data = airquality, aes(x = Temp, y = Ozone)) +\n  geom_point(color = \"pink\", shape = \"diamond\", size = 3) +\n  theme_minimal() +\n  labs(title = \"Scatterplot of Ozone vs Temperature\",\n       x = \"Temperature (F)\")\n# create histogram of Ozone\nggplot(data = airquality, aes(x = Ozone)) +\n  geom_histogram(bins = 10, fill = \"lightblue\", color = \"pink\") +\n  theme_minimal() + \n  labs(title = \"Histogram of Ozone Levels\",\n       x = \"Ozone levels\", \n       y = \"Frequency\")\n# create boxplot of Ozone by Month\nggplot(data = airquality, aes(x = as.factor(Month), y = Ozone)) +\n  geom_boxplot(fill = \"lightblue\", color = \"pink\") +\n  theme_minimal() +\n  labs(title = \"Boxplot of Ozone Levels by Month\",\n       x = \"Month\",\n       y = \"Ozone levels\")"},{"path":"the-basics-of-the-r-programming-language.html","id":"randomization-in-r","chapter":"The Basics of the R Programming Language","heading":"0.8 Randomization in R","text":"important element many processes mathematics statistics randomization. able generate random numbers important part sampling initiating processes algorithms. also see later book randomization important element many graph algorithms, including visualization layout algorithms. following code randomly sample 3 rows airquality data set using sample() function.second time note different output sampling random.Random number generation can problematic want precisely replicate work done previously others. previous work depended random number generation, output probably match previous output difficult tell error made simply different random numbers.can control random number generation manually setting random seed. fact, random number generation statistical software rarely truly random, actually pseudorandom. Pseudorandomization simulated process ‘seeded’ using vector values. default vector generated precise system time given moment, generation can also controlled manually user. given seed always produce results randomization, manually setting seed can effective way ensure precise reproducibility work., let’s generate three random rows airquality data set, time manually set seed sampling process. can use number choice manually set seed.Note random seed resets every call requires randomization6. Therefore important set random seed every random process ensure full reproducibility.","code":"\nairquality[sample(1:nrow(airquality), 3), ]##     Ozone Solar.R Wind Temp Month Day\n## 112    44     190 10.3   78     8  20\n## 30    115     223  5.7   79     5  30\n## 140    18     224 13.8   67     9  17\nairquality[sample(1:nrow(airquality), 3), ]##     Ozone Solar.R Wind Temp Month Day\n## 121   118     225  2.3   94     8  29\n## 110    23     115  7.4   76     8  18\n## 64     32     236  9.2   81     7   3\n# sample 1\nset.seed(123)\nairquality[sample(1:nrow(airquality), 3), ]##     Ozone Solar.R Wind Temp Month Day\n## 14     14     274 10.9   68     5  14\n## 50     12     120 11.5   73     6  19\n## 118    73     215  8.0   86     8  26\n# sample 2\nset.seed(123)\nairquality[sample(1:nrow(airquality), 3), ]##     Ozone Solar.R Wind Temp Month Day\n## 14     14     274 10.9   68     5  14\n## 50     12     120 11.5   73     6  19\n## 118    73     215  8.0   86     8  26"},{"path":"the-basics-of-the-r-programming-language.html","id":"documenting-your-work-using-r-markdown","chapter":"The Basics of the R Programming Language","heading":"0.9 Documenting your work using R Markdown","text":"anyone performing sort analysis using statistical programming language, appropriate documentation reproducibility work essential success longevity. code easily obtained run others, likely limited impact lifetime. Learning create integrated documents contain text code critical providing access code narration work.R Markdown package allows create integrated documents containing formatted text executed code. , opinion, one best resources available currently purpose. entire book created using R Markdown. can start R Markdown document RStudio installing rmarkdown package opening new R Markdown document file, suffix .Rmd.R Markdown documents always start particular heading type called YAML header, contains overall information document creating. Care must taken precise formatting YAML header, sensitive spacing indentation. Usually basic YAML header created RStudio start new .Rmd file. example.output part header numerous options, commonly used html_document, generates document web page, pdf_document, generates document PDF using open source LaTeX software package. wish create PDF documents need version LaTeX installed system. One R package can easily tinytex package. function install_tinytex() package install minimal version LaTeX fine purposes.R Markdown allows build formatted document using many shorthand formatting commands. examples format headings place web links images document:Code can written executed results displayed inline using backticks. example, recalling chinook_employees data set earlier writinginline display 8 final document7. Entire code blocks can included executed using triple-backticks. following code block:display output:{} wrapping allows specify different languages code chunk. example, wanted run Python code instead R code can use {python}. also allows set options code chunk display separated commas. example, want results code displayed, without code displayed, can use {r, echo = FALSE}.process compiling R Markdown code produce document known ‘knitting’. create knitted document, simply need click ‘Knit’ button RStudio appears R Markdown code.familiar R Markdown, strongly encourage learn alongside R challenge write practice exercises take book using R Markdown. Useful cheat sheets reference guides R Markdown formatting commands available Cheatsheets section Help menu RStudio. also recommend Xie et al. (2020) really thorough instruction reference guide.","code":"---\ntitle: \"My new document\"\nauthor: \"Keith McNulty\"\ndate: \"25/01/2021\"\noutput: html_document\n---# My top heading\nThis section is about this general topic.\n\n## My first sub heading \nTo see more information on this sub-topic visit [here](https://my.web.link).\n\n## My second sub heading\nHere is a nice picture about this sub-topic.\n![](path/to/image)`r nrow(chinook_employees)````{r}\n# show the first three rows of chinook_employees\nhead(chinook_employees, 3)\n```##   EmployeeId FirstName LastName ReportsTo\n## 1          1    Andrew    Adams        NA\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2"},{"path":"the-basics-of-the-r-programming-language.html","id":"learning-exercises","chapter":"The Basics of the R Programming Language","heading":"0.10 Learning exercises","text":"","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"discussion-questions","chapter":"The Basics of the R Programming Language","heading":"0.10.1 Discussion questions","text":"Describe following data types: numeric, character, logical, factor.vector known homogeneous data structure?Give example heterogeneous data structure R.difference NA \"NA\"?operator used return named elements list named columns dataframe?Describe functions used manipulate dataframes.package install use new package?Describe meant ‘namespacing’ might useful.pipe operator, popular R?difference error warning R?Name simple plotting functions base R.R Markdown, useful someone performing analysis using programming languages?","code":""},{"path":"the-basics-of-the-r-programming-language.html","id":"data-exercises","chapter":"The Basics of the R Programming Language","heading":"0.10.2 Data exercises","text":"Create character vector called my_names contains first, middle last names elements. Calculate length my_names.Create second numeric vector called corresponds my_names. entries position name order full name. Verify length my_names.Create dataframe called names, consists two vectors my_names columns. Calculate dimensions names.Create new dataframe new_names column converted character type. Verify command worked using str().Load chinook_customers data set via onadata package download internet8. Calculate dimensions chinook_customers view first three rows .View statistical summary columns chinook_customers. Determine missing values.View subset chinook_customers values SupportRepId equal 3.Install load package dplyr. Look help filter() function package try use repeat task previous question.Write code find last name customer highest CustomerId SupportRepId equal 4. Count number characters last name.Familiarize two functions filter() pull() dplyr. Use functions try calculation previous question using single unbroken piped command. sure namespace necessary.Create scatter plot using built-mtcars data set data column named mpg plotted \\(y\\) axis data column named hp plotted \\(x\\) axis.Using mtcars data set, convert data cyl column factor three levels. Plot histogram count observations three cyl levels.Create box plot mpg grouped cyl.used base plotting functions answer questions 11-13, try answer using ggplot2 package. Experiment different themes colors.Knit answers exercises R Markdown document. Create one version displays code answers, another just displays answers.","code":""},{"path":"everywhere.html","id":"everywhere","chapter":"1 Graphs Everywhere!","heading":"1 Graphs Everywhere!","text":"ever lucky enough pay visit vibrant city Kaliningrad Baltic coast, ’s likely trip remember. unusual exclave massive Russian Federation, get remainder Russia Kaliningrad land without crossing least two countries. Things landed way, like always , cards dealt history. strategic importance endowed Kaliningrad owing prime coastal position placed center geopolitical ‘tug--war’ saw change hands numerous occasions centuries. end Second World War, Stalin cast eye ruins Europe, considered city far strategically important left hands Eastern Bloc state, —despite physical separation—duly deemed Russia’s sovereign territory.might expect, Kaliningrad named since became part USSR 1946. Prior , stretching back Middle Ages, known Königsberg—King’s Mountain—honor King Ottokar II Bohemia (c.1233-1278). Steeped glorious tragic history, city rich museums, castles, cathedrals monuments past. mathematicians like , Königsberg perhaps best known simple, unassuming puzzle occupied minds many renaissance intellectual 17th 18th centuries—problem , argued, laid foundations highly connected world live today.","code":""},{"path":"everywhere.html","id":"the-seven-bridges-of-königsberg","chapter":"1 Graphs Everywhere!","heading":"1.1 The Seven Bridges of Königsberg","text":"city known Königsberg separated two path Pregel River. Pregel breaks toward Baltic Sea, two islands form part city. leads city comprised four land masses: two mainland masses either side river (known Altstadt-Loebenicht Vorstadt-Haberberg), two island land masses (Lomse Kneiphof). 1700s, total seven bridges connected land masses9. Figure 1.1 suitably historic map situation. island left Kneiphof island right Lomse. beautiful dress worn lady foreground picture large enough one seven bridges entirely covered , can see six.\nFigure 1.1: Prussian city Königsberg circa 1600 Civitates Orbis Terrarum, Vol.III (credit: Historic Cities Research Project)\npuzzle went like : possible devise walk set foot four land masses crossing seven bridges ? strong hunch trial error answer —problem prove mathematically. effective techniques yet discovered allow proof.Enter Leonhard Euler, 18th century Swiss mathematician spent majority life St. Petersburg Berlin. prolific original thinker, Euler considered many greatest mathematician time. impossible study mathematics even high school without constantly exposed Euler’s work. popularized greek letter \\(\\pi\\) denote Archimedes’ constant ratio circumference diameter circle. formalized letter \\(\\) denote imaginary number \\(\\sqrt{-1}\\) defined exponential constant \\(e\\) known Euler’s number. Living two cities either side Königsberg time problem seven bridges, set finding solution. one discovered testament beauty mathematical proof first use concept graph solve mathematical problem.first thing Euler —good mathematician always —strip problem extraneous information reduce minimal form. problem merely requires one set foot land mass. concerned route one takes land mass. Therefore, can represent four land masses dots. can draw lines dots represent bridges. , reasoned, leads diagram like Interactive Figure 1.2. picture can drawn infinitely many ways, always four dots connected seven lines configuration. like, move nodes around see mean.\nFigure 1.2: minimal representation Seven Bridges Königsberg problem\nFirst, Euler observed one starts journey certain place crosses seven bridges , must eight total visits places. start place, every time cross bridge, add another place walk. cross seven bridges, must visit eight places (including repeat visits place).Euler looked situation place \\(P\\) connected places odd number bridges. one bridge crossed , place \\(P\\) —either beginning end journey. three bridges crossed , place \\(P\\) visited twice matter started. five bridges, place \\(P\\) visited three times. \\(n\\) bridges, place \\(P\\) visited \\(\\frac{1}{2}(n+1)\\) times.Now Euler calculated many place visits mean total Königsberg. Since Kneiphof five bridges places, crossed Kneiphof visited three times. three places three bridges connecting , walk result two visits place. Adding , means walk existed four places every bridge used , must nine total place visits. Since contradicts Euler’s earlier observation walk must involve eight place visits, must conclude walk exist.Euler’s proof first time graph like one Interactive Figure 1.2 used solve problem. solution also involved concepts later become critical study graphs. Euler set places vertices nodes graph, set bridges edges. proof depends conclusion number edges connected vertex, later became known degree vertex. proof required study walks paths graph. requirement walk use edge became known Euler walk (Eulerian path) various algorithms exist today calculate Euler walks problems constructing DNA sequences fragments10. Little Euler know Pandora’s Box opened.Thinking ahead: know load graph object R Python, try load koenigsberg data set onadata package download internet11 create graph . use software calculate degrees vertices graph. example R, data loaded igraph object, can use igraph::degree() get vector showing degrees vertex. even package called eulerian R function hasEulerianPath() determines whether Euler walk exists given graph.","code":""},{"path":"everywhere.html","id":"graphs-as-mathematical-models","chapter":"1 Graphs Everywhere!","heading":"1.2 Graphs as mathematical models","text":"Graphs networks existed long Euler, probably since beginning time . exist physically, spider’s web, electrical wiring home molecules make universe. Since time Euler, graphs also existed conceptually best way can describe many complex systems, book focus use graphs describe systems related people, groups, organizations similar societal constructs. jump core topic, worth taking moments appreciate fundamental graphs science everyday life discussing examples practical use graphs solve problems.Whenever objects move physically network structure, makes sense graph theory great use solving problems routing optimization. obvious example whenever route planned Google Apple Maps, SatNav system. search driving route given destination, underlying calculation involves streets roads edges intersections vertices. fastest routes calculated based stored properties edges road length, road speed limit live traffic information. underlying graphs updated time edges switched according information road closures12. doesn’t just road networks course. Rail, air forms transport networks make great use graph theory. Maybe sitting train reading book , , look around route map ’ll see graph right . Essential public services management sewerage networks example one less glamorous fields graph theory essential operational calculations decisions. sudden cold snap city roads need de-iced, problem get around city efficient way, saving resources minimizing route still covering critical areas sounds like puzzle Euler loved.Nowadays, objects move networks often electronic nature, bytes code electrical currents. National local power grids managed help graph theory. Communications networks, telephone, satellite, cable internet networks nodes connection points junctions receiver points edges can visible form underground undersea cables invisible form signals sent air space.sciences, graphs essential models biological, chemical physical processes phenomena. Chemical Graph Theory (CGT) deals applications graph theory molecular problems. condensed matter physics, graph theory essential quantitatively modeling atomic structures. biology biochemistry, graphs important understanding spread disease epidemic models, study genomics DNA, neuroscientific modeling brain functioning ecological modeling species migration. computational sciences, huge progress made storing data thanks databases graph-like structure, many latest algorithms used Machine Learning operate graph-like structures like trees neural networks. linguistics, graphs facilitated great advances understand natural language collection discrete words phrases related . list goes .Arguably, area graphs impacted daily lives recent decades development online communities depend . Social networks like Facebook, Twitter, LinkedIn, Instagram many others use graphs connect people ways fundamentally changed lives livelihoods. Friendships acquaintances happen today people never often never meet physically. Countless relationships, marriages families brought existence. Long lost families separated adoption abandonment found . Job opportunities created filled. Individuals common interests connected irrelevant located. positives negatives rapid paradigm-shifting rise social networking vigorously debated, denied exist without graph theory.","code":""},{"path":"everywhere.html","id":"graph-theory-in-the-analysis-of-people-and-groups","chapter":"1 Graphs Everywhere!","heading":"1.3 Graph theory in the analysis of people and groups","text":"social sciences study people groups, increasing prevalence network data ability analyze using graph-theoretic methods opened rich continuously developing veins research encompass academic enterprise settings. Much work done can grouped different study areas.","code":""},{"path":"everywhere.html","id":"the-study-of-connection","chapter":"1 Graphs Everywhere!","heading":"1.3.1 The study of connection","text":"organizations, institutions societal groups, connection considered critical facilitator happiness, motivation, productivity progress. psychological concept belongingness, describes human need connect, affiliate accepted others, important element Maslow’s Hierarchy Needs. Empirically, greater social connection associated positive effects mental physical health, cognitive functioning, life expectancy even wound healing (Holt-Lunstad (2018)). Conversely, lack connection—loneliness—research interest potential negative effects mental well-, productivity workplace performance. meta-analytic review relationship social relationships mortality risk concluded lack social connection carries higher risk premature mortality obesity (Holt-Lunstad et al. (2015)). workplace settings, practitioners academics showing increasing amount interest connection affects performance, productivity employee retention. Empirical research demonstrated links friendship work improved work engagement productivity (Rath (2006)), social interaction work (whether work-related otherwise) associated improved outcomes (Olguin et al. (2009)).ability analyze connection workplace society--large become increasingly important move 21st century. variety data represent connection expanding. Connection people can now defined -person interaction, electronic transaction even assumed connection overlaps geographic location work personal activities. Strong analytic techniques necessary support evidence-based practice, measures connection meaningful outcomes researched , even shown meaningful, resulting interventions always expected effects (example, study Feld & Carter (1998) demonstrated deliberate attempts increase interracial contact American schools actually ended causing greater racial segregation).","code":""},{"path":"everywhere.html","id":"the-study-of-information-flow","chapter":"1 Graphs Everywhere!","heading":"1.3.2 The study of information flow","text":"General fascination information propagates networks dates earliest chain letters late 19th century (Solly (2020)). us old enough may remember receiving letters mail asking send message onward specified number individuals, promising generate thousands replies within weeks. Figure 1.3 example one letters used way generate money Texas 1935.\nFigure 1.3: Chain letter Texas 1935 (credit: Daniel W. VanArsdale)\nrecently, information flow people fundamentally transformed digital age, potential reach speed transmission massively enabled technology. Today, study propagation information networks many purposes including development emergency alert strategies, prevention fraudulent activities, defense public health protection integrity criminal justice processes. Although area research still infancy, models dissimilar used biology epidemiology employed (example, Hafnaoui et al. (2019)). likelihood messages propagating can depend characteristics network, nature message node propagating (popularity, credibility), receptiveness onward nodes message. term ‘viral’ entered lexicon describe rapid electronic message propagation last decade . effect message propagation development networks also great research interest—example, nature frequency message propagation leads rapid network growth?Currently, research nature mostly confined academics working social media data, substantial value gained application workforce settings. increasingly distributed workforce lower levels geographic concentration mean organizations need effectively manage important, urgent time-sensitive communication workforce require greater intelligence information propagates effectively efficiently specific environments.","code":""},{"path":"everywhere.html","id":"the-study-of-community-diversity-and-familiarity","chapter":"1 Graphs Everywhere!","heading":"1.3.3 The study of community, diversity and familiarity","text":"Distance network—define precisely later chapters—can representative likely similarity familiarity (lack thereof) individuals, allows mathematical models support study community diversity. Algorithms calculating distance diameter network help determine ‘tight’ groups allow measurement inter- intra-group interaction. Community detection algorithms involve graph partitioning help identify ‘pockets’ highly connected individuals large networks. great interest field sociology, also applications areas study common purchasing behaviors among customers, study common interests among academics writers (Lu et al. (2018)).Increasing focus diversity positive influencer organizational outcomes recent years means ability measure distance identify community structures networks high utility, particularly complex organizational contexts. Use cases can range highly strategic questions organizational design highly tactical questions meeting attendance group membership. Current trends away physical co-location employees rise virtual organizational structures likely result greater requirements analysis remote electronic interaction order determine whether imposed structures genuinely reflect way people work. Effective use techniques can even valuable coordination large professional social events, subgroups can identified maximize -group distance order better ensure diverse mix employees professional social activities.","code":""},{"path":"everywhere.html","id":"study-importance","chapter":"1 Graphs Everywhere!","heading":"1.3.4 The study of importance, influence and attachment","text":"concept vertex/node importance centrality fundamental tenet graph theory long time, rise social networks seems turbo-charged relevance research analytics. rise ‘influencer’ highly connected influential member network entered deeply social consciousness past decade, study followership generated forming attachments members networks one rich veins sociological research currently. idea preferential attachment Matthew Effect describes accumulated advantage time, attachment attract yet more13. believed social networks show similar properties scale-free networks obey power law distribution degree vertices/nodes; see Figure 1.4.14 fact, recent research indicates scale-free networks exist rarely social networks best weakly scale-free (Broido & Clauset (2019)), may exhibit notable preferential attachment behavior (Fisher et al. (2017)).\nFigure 1.4: Power law distribution vertex degrees scale-free network \\(\\alpha = 2\\), showing mass concentration toward low-degree vertices exclusive tail vertices high degree. believed consequence preferential attachment networks.\ncourse, organization, institution place work can considered social network individuals command greater less attachment according tenure, seniority, skills general popularity. Understanding organizational context can lead insights leadership followership help us better determine influence followership recruitment attrition. Different types centrality degree, betweenness, closeness eigenvector centrality can imply different roles individuals terms importance influence network.Thinking ahead: know , load graph Zachary’s Karate Club via karate data set onadata package downloading edgelist internet15. See can find functions calculate degree centrality, betweenness centrality, closeness centrality eigenvector centrality various individuals network. compare results, discover centrality can mean different things depending define .","code":""},{"path":"everywhere.html","id":"graphs-as-data-sources","chapter":"1 Graphs Everywhere!","heading":"1.3.5 Graphs as data sources","text":"use cases network analytics mature, organizations seek understand networks better, traditional rectangular-style databases become increasingly challenging work . Consider desire analyze whether two salespeople organization connected serving customer month. Depending data currently stored systems, easily end lot complicated computationally expensive needs . Sales records may need joined customer records, may need rejoined back sales data. may need done repeatedly eventually obtain required view data. Traditional rectangular databases stored keep records transactions, connections.Many organizations turning graph databases store data relationships allow much faster query calculation whenever unit analysis connection. graph database designed store information connected objects like people organizational units vertices, information relationships edges. databases suit data already comes form graph edgelist information communication interaction, also becoming common transform forms data loaded graph database order query relationships otherwise easy see16. Social media engines many knowledge-based resources like Wikipedia supported graph databases, sorts databases also becoming commonly found enterprise settings. helped solve high-profile problems. example, International Consortium Investigative Journalists (ICIJ) used graph database load document metadata Panama Papers document leak. Stored format metadata exposed various complex networks offshore tax arrangements.topics mentioned come greater lesser degree content book, time time even diversions use cases outside people analytics domain order help illustrate broader applications methods. book intended technical manual work philosophy, coming entire topic point view methodology focusing . said, examples use clearly point motivation analysis methodology can useful practice. enthusiastic readers progress technical material work examples chapter chapter, expect quickly grasp potential application methods work study.","code":""},{"path":"everywhere.html","id":"purpose-structure-and-organization-of-this-book","chapter":"1 Graphs Everywhere!","heading":"1.4 Purpose, structure and organization of this book","text":"book targeted technical practitioners need thorough grounding storage, visualization analysis network data. requires elementary knowledge R Python programming languages. first foremost R programmer, content book primarily demonstrated R, efforts made ensure Python implementations demonstrated wherever possible, albeit briefly places. Python programmer, recommend open reading sections use R code often help build better understanding work thorough descriptions discussions contained therein. never programmed , included introductory section R programming language get started. similar introductory chapter previous book (McNulty (2021)).technical practitioner, book can still useful , contains considerable detail concepts, methods use cases related network analytics organizations, gives guidance interpretation network analysis statistics. just need willing tolerate various code blocks appear part technical instruction.Various downloadable data sets used throughout book, cases point sources data outside book interested exploration, particularly large network data. Data sets introduced described various points used, many used multiple times book illustrate different methodologies.chapters end set discussion questions data exercises, strongly encourage reader engage order put learning practice. Often, taking exercises readers discover common pitfalls working graph data structures, better learn pitfalls now find high-stakes urgent situations.Readers already noticed ‘blue boxes’ appear chapter, regular feature throughout book. optional, generally encourage readers ‘think ahead’ ‘play around’ ideas methods introduced. blue boxes intended make book fun encourage experimentation way learning, especially competent technical practitioners. Occasionally, try thread together related concepts appear different chapters book, readers can get better sense theory methodology fit together.chapter can considered preliminary. Chapter 2 onward, book takes following structure:Chapter 2 introduces simple elements graph theory including define graph, types graphs, vertex edge properties ways graph can described mathematically. proceeds demonstrate create graph objects R Python start working .Chapter 3 looks various options visualize graphs R Python. goes variety technical options static dynamic visualizations graphs customize appearance graphs various purposes.Chapter 4 looks data can transformed used graph structure, important workflow element making graphs useful analysis. Two substantial examples used illustrate transform rectangular data edgelist graph scrape document information use graphs.Chapter 5 examines topic paths distance graphs, introduces related concepts graph diameter, demonstrates common methods Dijkstra’s shortest path algorithm. utility concepts illustrated two examples: facilitating workplace introductions generating diverse employee groupings.Chapter 6 examines topic vertex importance centrality graphs. discusses different types centrality meaning usefulness network analytics context, shows various methods calculating graphically illustrating centrality graphs. metrics put use example network office workers.Chapter 7 looks community clique detection. covers various options identify communities graphs, describe communities illustrate effectively. high school network Twitter network politicians used illustrate detect communities describe using ground truth network properties.Chapter 8 deep dives common statistics used analyzing networks, particular related similarity, assortativity attachment.Chapter 9 introduces concept graphs databases provides examples design use graph databases purpose network analytics. Examples include query open access Wikidata knowledge graph work Neo4J graph database natively via R Python. can considered extension chapter interested.\n","code":""},{"path":"working.html","id":"working","chapter":"2 Working with Graphs","heading":"2 Working with Graphs","text":"think graph, usually think diagram dots lines. Indeed, seen Chapter 1 book, concept graph came existence 1700s mathematician tried solve problem diagramatically. makes sense think graphs way, intuitive, easy communicate many cases diagram helps us better address problem solving. However, diagram one way describing graph, particularly scalable. easy draw diagram graph nodes edges like Bridges Königsberg problem, problem involved thousands nodes millions edges? interesting graphs want study complex nature contain many hundreds thousands nodes many edges, diagrams graphs size always useful helping us solve problems.chapter gain basic understanding graphs construct can work analytically. introduce general way describing graph mathematically, discuss different types graphs can defined placing conditions general definition. go look different options known graph can described, including edgelists adjacency matrices. Equipped understanding, learn create graph objects R Python. Unlike larger examples introduce later chapters, data examples use chapter simple straightforward work . focus make sure basic structures definitions understood proceeding . Readers skip chapter intend fully understand methods procedures introduced later chapters.","code":""},{"path":"working.html","id":"elementary-graph-theory","chapter":"2 Working with Graphs","heading":"2.1 Elementary graph theory","text":"way graphs created, stored manipulated data science languages like R Python bears strong resemblance defined studied algebraically. start section general mathematical definition graph proceed look different varieties graphs different ways representing graphs using data.","code":""},{"path":"working.html","id":"graph-def","chapter":"2 Working with Graphs","heading":"2.1.1 General definition of a graph","text":"graph \\(G\\) consists two sets. first set \\(V\\) known vertex set node set. second set \\(E\\) known edge set, consists pairs elements \\(V\\). Given graph made two sets, often notate graph \\(G = (V, E)\\). two vertices appear pair \\(E\\), vertices said adjacent connected vertices.Let’s use example illustrate definition. Figure 2.1 diagram graph \\(G_{\\mathrm{work}}\\) four vertices representing four people. edge connects two vertices two people worked together.\nFigure 2.1: graph \\(G_\\mathrm{work}\\) consisting four people connected according whether worked together\nvertex set \\(V\\) graph \\(G_{\\mathrm{work}}\\) :\\[\nV = \\{\\mathrm{David}, \\mathrm{Suraya}, \\mathrm{Jane}, \\mathrm{Zubin}\\}\n\\]edge set \\(E\\) graph \\(G_{\\mathrm{work}}\\) must notated pairs elements vertex set \\(V\\). can notate many ways. One example may notate edge set formal set-theoretic notation:alternative notation also used :doesn’t really matter choose notate vertex edge sets long notation contains information required construct graph.Thinking ahead: already know load graphs R Python, might want take look graph object now, see object structured defined around two set structure \\(G = (V, E)\\). example, try create graph data Bridges Königsberg problem using koenigsberg edgelist onadata package downloaded internet https://ona-book.org/data/koenigsberg.csv. Take look vertex set edge set see contain structures discussed .relationship modeling using edges graph \\(G_{\\mathrm{work}}\\) reciprocal nature. David worked Zubin, automatically conclude Zubin worked David. Therefore, need direction edges \\(G_{\\mathrm{work}}\\). call graph undirected graph. undirected graph, order nodes pair edge set \\(E\\) relevant. example, \\(\\mathrm{David}\\longleftrightarrow\\mathrm{Zubin}\\) \\(\\mathrm{Zubin}\\longleftrightarrow\\mathrm{David}\\).graph direction important called directed graph. example, let’s consider graph \\(G_{\\mathrm{manage}}\\) vertex set four people edge exists two people first person manager second person, Figure 2.2.\nFigure 2.2: graph \\(G_\\mathrm{manage}\\) consisting four people connected according whether one person manages another\nClearly, direction matters graph, therefore may wish notate edge set \\(E\\) \\(G_{\\mathrm{manage}}\\) :\\[\nE = \\{\\mathrm{Suraya}\\longrightarrow\\mathrm{David}, \\mathrm{David}\\longrightarrow\\mathrm{Zubin}, \\mathrm{David}\\longrightarrow\\mathrm{Jane}\\}\n\\]Note still possible directed graph edges point directions. unlikely case \\(G_{\\mathrm{manage}}\\) manager relationship usually operates one direction, imagine another graph \\(G_{\\mathrm{like}}\\) edge exists two people first person listed second person someone like. perfectly possible edges exist directions two vertices graph like . example, may Jane likes Zubin Zubin likes Jane. However, important note graph, \\(\\mathrm{Zubin}\\longrightarrow\\mathrm{Jane}\\) \\(\\mathrm{Jane}\\longrightarrow\\mathrm{Zubin}\\) considered two different edges.Thinking ahead: graphs \\(G_\\mathrm{work}\\) \\(G_\\mathrm{manage}\\) called simple graphs. simple graph one edge two vertices, ‘loop’ edges one vertex back . learn, graphs simple graphs.","code":""},{"path":"working.html","id":"graph-types","chapter":"2 Working with Graphs","heading":"2.1.2 Types of graphs","text":"Equipped general definition graph, can now define different varieties graphs adding allowing certain conditions edges general graph. many varieties, common graph types.multigraph graph multiple edges can occur two vertices. Usually occurs edges defining different kinds relationships. Travel routes common examples multigraphs, edge represents different carrier. example, Figure 2.3 graph flights San Francisco (SFO), Philadelphia (PHL) Tucson (TUS) airports based data set December 2010. graph layered onto map United States. Philadelphia Tucson common route offered one carrier one direction, multiple carriers operating directions Philadelphia San Francisco San Francisco Tucson.\nFigure 2.3: Carrier routes operating three US airports December 2010\nMultigraphs also commonly used individuals entities can related different ways. example, imagine combine \\(G_{\\mathrm{work}}\\) \\(G_{\\mathrm{manage}}\\) graphs Section 2.1.1 one single directed graph depicting ‘worked ’ ‘manages’ relationships. might look like Figure 2.4.\nFigure 2.4: Graph depicting different types relationships individuals\nMany large graphs used practice multigraphs, built capture many different types relationships many different types entities. example, graph organizational network might contain vertices represent individuals, organizational units knowledge areas. Multiple different types relationships exist individuals (‘worked ’, ‘manages’, ‘published ’), individuals organizational units (‘member ’ ‘leader ’), individuals knowledge areas (‘affiliated ’ ‘expert ’) sorts possibilities.Pseudographs graphs allow vertices connect . Pseudographs occur certain edges depict relationships can occur vertex. Imagine, example, graph \\(G_{\\mathrm{coffee}}\\) takes four characters \\(G_{\\mathrm{work}}\\) Section 2.1.1 depicts buys coffee . David goes buy Zubin coffee, ’s good chance also buy one process. Thus, can expect following edge set:\\[\nE = \\{\\mathrm{David}\\longrightarrow\\mathrm{Zubin}, \\mathrm{David}\\longrightarrow\\mathrm{David}\\}\n\\]example pseudographs frequently occur might analysis financial transactions. Let’s imagine graph three vertices representing different companies , B C, edge represents bank transfer one company another certain day. company holds multiple bank accounts, graph might look something like Figure 2.5. edge connects vertex usually called loop.\nFigure 2.5: Pseudograph representing bank transfers three companies , B C loop vertex \ncomplete graph graph pairs vertices connected edge. Let’s go back four characters \\(G_\\mathrm{work}\\) Section 2.1.1. may notice one pair characters worked together. Let’s assume return month later update graph, seems Zubin Suraya now worked together. means graph becomes complete graph depicted Figure 2.6.\nFigure 2.6: Updated version \\(G_\\mathrm{work}\\) one additional edge make complete graph\nComplete graphs rare useful practice, since already know relationship exists every pair vertices, lot reason examine graph put practical use. said, field Graph Theory, can important prove certain graphs complete order support important theoretical results.Thinking ahead: entire graphs complete rarely useful practice, often useful identify sets vertices inside graphs together represent complete subgraph. group vertices known clique, look clique discovery later chapter.Bipartite graphs graphs two disjoint sets vertices, two vertices set connected. Imagine add three new individuals another department \\(G_\\mathrm{work}\\) vertices, redefine relationships edge means two individuals worked across departments. new graph \\(G_\\mathrm{new}\\) may look like Figure 2.7, distinct sets vertices representing individuals different departments.\nFigure 2.7: bipartite graph \\(G_\\mathrm{new}\\) showing individuals different departments B working across departments\nExtending idea bipartite graphs, \\(k\\)-partite graphs graphs \\(k\\) disjoint sets vertices, two vertices set connected.Trees can regarded vertices connected edges, trees graphs. example, graph \\(G_\\mathrm{manage}\\) Section 2.1.1 tree displays hierarchical management structure individuals. graph characterized tree, needs exactly one path pair vertices viewed undirected.Usually, trees graphs edges represent sort hierarchical nested relationship. Figure 2.8 shows tree graph author’s favorite boy bands, edge indicates vertex member vertex . seems like five magic number great boy band.\nFigure 2.8: Membership exclusive class author’s favorite boy bands can represented tree graph\n","code":""},{"path":"working.html","id":"vertex-edge-prop","chapter":"2 Working with Graphs","heading":"2.1.3 Vertex and edge properties","text":"Section 2.1.1 learned graph \\(G = (V, E)\\) consists vertex set \\(V\\) edge set \\(E\\). sets minimum elements graph—vertices represent entities graph edges represent relationships entities.can enhance graph provide even richer information entities relationships giving vertices edges properties. vertex property provides specific information vertex edge property provides specific information relationship two vertices.example, let’s return directed pseudograph Figure 2.5, represents bank transfers companies , B, C. graph, know edges transfers took place, know much money involved transfer, currency transfer made. wanted capture information, give edge properties called amt cur store transfer amount currency edge properties. Similarly, don’t know great deal companies represented vertices. Maybe like know located? , can create vertex property called loc store location vertex property.Figure 2.9 shows enhanced graph vertex edge properties added diagramatically.\nFigure 2.9: Graph bank transfers companies , B C additional information stored vertex edge properties\nAlternatively, can notate properties additional sets graph, ensuring entry order respective vertices edges, follows:\\[\n\\begin{aligned}\nG &= (V, E, V_\\mathrm{loc}, E_\\mathrm{cur}, E_\\mathrm{amt}) \\\\\nV &= \\{, B, C\\} \\\\\nE &= \\{\\longrightarrow , \\longrightarrow B, B \\longrightarrow , B \\longrightarrow C\\} \\\\\nV_\\mathrm{loc} &= \\{\\mathrm{USA}, \\mathrm{UK}, \\mathrm{France}\\} \\\\\nE_\\mathrm{cur} &= \\{\\mathrm{USD}, \\mathrm{USD}, \\mathrm{GBP}, \\mathrm{GBP}\\} \\\\\nE_\\mathrm{amt} &= \\{150000, 570000, 230000, 175000\\}\n\\end{aligned}\n\\]Note vertex property set \\(V_\\mathrm{loc}\\) number elements \\(V\\) associated properties appear order vertices \\(V\\). Note also similar size order edge property sets \\(E_\\mathrm{cur}\\) \\(E_\\mathrm{amt}\\). notation system allows us provide information need reliable way number vertex edge properties.Thinking ahead: know , load graph romantic relationships TV Series Mad Men using madmen_edgelist data set onadata package downloading https://ona-book.org/data/madmen_edgelist.csv. Try create graph contains Married edge property try query graph determine relationships marriage relationships.One common edge properties come across edge weight. Weighted edges edges given numeric value represent important construct edge importance connection strength. can often used simplify otherwise complex graphs, frequently used calculations related centrality community. example, returning flights graph Figure 2.3, instead creating edge carrier, simplify graph creating one edge per route giving weight according number carriers route. graph look like Figure 2.10.\nFigure 2.10: Simplifying flights graph using weighted edges represent number carriers route. Edge thickness represents weight.\n","code":""},{"path":"working.html","id":"rep-graphs","chapter":"2 Working with Graphs","heading":"2.1.4 Representations of graphs","text":"far chapter seen two common ways representing graph. first, well-known, way diagram. second algebraic structure \\(G = (V, E)\\) consisting (minimum) vertex set \\(V\\) edge set \\(E\\). discussed beginning chapter, diagrams useful visualizing und understanding small graphs, less useful storing graph data working large graphs. working graphs field data science, two common sources graph data edgelists adjacency matrices.edgelist edge set \\(E\\) graph \\(G = (V, E)\\). don’t care isolates17, vertex set \\(V\\) can derived directly \\(E\\). means edgelist needed build graph provided happy ignore isolates. common analyst happy ignore isolates often interested connections relationships data. Let’s look example.Recall edge set \\(E\\) graph \\(G_\\mathrm{work} = (V, E)\\) Section 2.1.1:Since definition edge \\(E\\) must pair vertices \\(V\\), since concerned isolates (fact, know don’t exist case), can obtain vertex set \\(V\\) simply listing unique vertices pairs \\(E\\). Therefore, can construct \\(V\\) \\[\nV = \\{\\mathrm{David}, \\mathrm{Suraya}, \\mathrm{Jane}, \\mathrm{Zubin}\\}\n\\]now obtained everything need graph edgelist.Edgelists typically take form two columns data, usually labelled ‘’ ‘’ ‘source’ ‘target’. Therefore, edgelist \\(G_\\mathrm{work}\\) look like Table 2.1.\nTable 2.1: Edgelist \\(G_\\mathrm{work}\\)\nPlaying around: still Bridges Königsberg data loaded graph R Python earlier, able generate edgelist easily. Try find right function use within package choice.adjacency matrix square matrix vertices indexing rows columns, \\((, j)\\)-th entry matrix represents number edges vertex \\(\\) vertex \\(j\\). example, using graph \\(G_\\mathrm{work}\\) Section 2.1.1, adjacency matrix look like :\\[\n\\begin{array}{ccccc}\n      & \\mathrm{David} & \\mathrm{Jane} & \\mathrm{Zubin} & \\mathrm{Suraya} \\\\\n      \\mathrm{David} & 0 & 1 & 1 & 1\\\\\n      \\mathrm{Jane} & 1 & 0 & 1 & 1 \\\\\n      \\mathrm{Zubin} & 1 & 1 & 0 & 0 \\\\\n      \\mathrm{Suraya} & 1 & 1 & 0 & 0\n\\end{array}\n\\]\nAdjacency matrices also commonly written sparse form, without use zeros. example:\\[\n\\begin{array}{ccccc}\n      & \\mathrm{David} & \\mathrm{Jane} & \\mathrm{Zubin} & \\mathrm{Suraya} \\\\\n      \\mathrm{David} & . & 1 & 1 & 1\\\\\n      \\mathrm{Jane} & 1 & . & 1 & 1 \\\\\n      \\mathrm{Zubin} & 1 & 1 & . & . \\\\\n      \\mathrm{Suraya} & 1 & 1 & . & .\n\\end{array}\n\\]adjacency matrix undirected graph like \\(G_\\mathrm{work}\\) symmetrical diagonal, since existence \\((,j)\\) edge automatically implies existence \\((j, )\\) edge. However, directed graph may symmetrical adjacency matrix. adjacency matrix \\(G_\\mathrm{manage}\\) graph Section 2.1.1.\\[\n\\begin{array}{ccccc}\n      & \\mathrm{David} & \\mathrm{Jane} & \\mathrm{Zubin} & \\mathrm{Suraya} \\\\\n      \\mathrm{David} & . & 1 & 1 & .\\\\\n      \\mathrm{Jane} & . & . & . & . \\\\\n      \\mathrm{Zubin} & . & . & . & . \\\\\n      \\mathrm{Suraya} & 1 & . & . & .\n\\end{array}\n\\]graph pseudograph, diagonal entries may greater zero, multigraphs can entries non-negative integer. adjacency matrix flight network graph Figure 2.3:\\[\n\\begin{array}{cccc}\n      & \\mathrm{SFO} & \\mathrm{PHL} & \\mathrm{TUS} \\\\\n      \\mathrm{SFO} & . & 4 & 4 \\\\\n      \\mathrm{PHL} & 5 & . & 1  \\\\\n      \\mathrm{TUS} & 2 & . & .\n\\end{array}\n\\]Thinking ahead: , Bridges Königsberg graph loaded R Python, can turn adjacency matrix easily. Try find right function package choice. Note packages like networkx Python, format slightly different called adjacency list.","code":""},{"path":"working.html","id":"creating-graphs-in-r","chapter":"2 Working with Graphs","heading":"2.2 Creating graphs in R","text":"section use examples previous section learn create graph objects R using igraph package, examine structure objects. strong understanding graph objects structured make easier us advanced manipulation calculations involving graphs later book.","code":""},{"path":"working.html","id":"creating-a-graph-from-an-edgelist","chapter":"2 Working with Graphs","heading":"2.2.1 Creating a graph from an edgelist","text":"Let’s start manually creating edgelist \\(G_\\mathrm{work}\\) graph Section 2.1.1 dataframe R. can see edgelist Table 2.1. Remember \\(G_\\mathrm{work}\\) undirected graph, need worry edge direction create edgelist.looks right. Now going load igraph package use function graph_from_edgelist() create undirected graph object edgelist. function expects receive edgelist matrix, need convert gwork_edgelist dataframe matrix use function.now \\(G_\\mathrm{work}\\) graph memory. go , let’s take look .Let’s start string UN-- first line output. string describes type graph . letter U denotes undirected graph, N denotes graph named vertices. two properties, discover later, currently present represented dashes --. Next number vertices (4) edges (5), followed two dashes.next line, attributes graph listed. case just one attribute name, vertex attribute character type—denoted (v/c). Finally edges graph given using vertex names. Note direction edges, denoted --.Let’s try thing time directed graph \\(G_\\mathrm{manage}\\) Section 2.1.1.see similar output gwork, except now directed graph, donated D first line, see edges now denoted direction using ->.","code":"\n(gwork_edgelist <- data.frame(\n  from = c(\"David\", \"David\", \"David\", \"Jane\", \"Jane\"),\n  to = c(\"Zubin\", \"Suraya\", \"Jane\", \"Zubin\", \"Suraya\")\n))##    from     to\n## 1 David  Zubin\n## 2 David Suraya\n## 3 David   Jane\n## 4  Jane  Zubin\n## 5  Jane Suraya\nlibrary(igraph)\n\ngwork_edgelist <- as.matrix(gwork_edgelist)\ngwork <- igraph::graph_from_edgelist(el = gwork_edgelist, \n                                     directed = FALSE)\ngwork## IGRAPH 7e0127b UN-- 4 5 -- \n## + attr: name (v/c)\n## + edges from 7e0127b (vertex names):\n## [1] David --Zubin  David --Suraya David --Jane   Zubin --Jane   Suraya--Jane\ngmanage_edgelist <- data.frame(\n  from = c(\"Suraya\", \"David\", \"David\"),\n  to = c(\"David\", \"Zubin\", \"Jane\")\n)\n\ngmanage_edgelist <- as.matrix(gmanage_edgelist)\n(gmanage <- igraph::graph_from_edgelist(el = gmanage_edgelist,\n                                       directed = TRUE))## IGRAPH bfefef5 DN-- 4 3 -- \n## + attr: name (v/c)\n## + edges from bfefef5 (vertex names):\n## [1] Suraya->David David ->Zubin David ->Jane"},{"path":"working.html","id":"creating-a-graph-from-an-adjacency-matrix","chapter":"2 Working with Graphs","heading":"2.2.2 Creating a graph from an adjacency matrix","text":"Similarly, can create graph data provided adjacency matrix. Let’s manually create adjacency matrix flights graph Figure 2.3, can use graph_from_adjacency_matrix() function igraph create graph object matrix.see expected directed multigraph 3 vertices 16 edges. wish create weighted graph Figure 2.10, add weighted = TRUE arguments.now see graph 5 edges, see addition W graph type, indicating weighted graph. also see new edge property numeric type called weight. situations want simplify multiple edges single edges without worrying weight, simplify() function igraph works well. default, simplify() collapse multiple edges single edge remove loop edges vertices order create simple graph18.","code":"\n# create 3x3 adjacency matrix\nadj_flights <- matrix(c(0, 5, 2, 4, 0, 0, 4, 1, 0), nrow = 3, ncol = 3)\nrownames(adj_flights) <- c(\"SFO\", \"PHL\", \"TUS\")\ncolnames(adj_flights) <- rownames(adj_flights)\n\n# create multigraph from adjacency matrix\n(flightgraph <- igraph::graph_from_adjacency_matrix(\n  adjmatrix = adj_flights,\n  mode = \"directed\"\n))## IGRAPH 17d12a7 DN-- 3 16 -- \n## + attr: name (v/c)\n## + edges from 17d12a7 (vertex names):\n##  [1] SFO->PHL SFO->PHL SFO->PHL SFO->PHL SFO->TUS SFO->TUS SFO->TUS SFO->TUS PHL->SFO PHL->SFO PHL->SFO PHL->SFO\n## [13] PHL->SFO PHL->TUS TUS->SFO TUS->SFO\n# create weighted graph \n(flightgraph_weighted <- igraph::graph_from_adjacency_matrix(\n  adjmatrix = adj_flights,\n  mode = \"directed\",\n  weighted = TRUE\n))## IGRAPH 876c006 DNW- 3 5 -- \n## + attr: name (v/c), weight (e/n)\n## + edges from 876c006 (vertex names):\n## [1] SFO->PHL SFO->TUS PHL->SFO PHL->TUS TUS->SFO\n(flightgraph_simple <- igraph::simplify(\n  flightgraph\n))## IGRAPH 62f0716 DN-- 3 5 -- \n## + attr: name (v/c)\n## + edges from 62f0716 (vertex names):\n## [1] SFO->PHL SFO->TUS PHL->SFO PHL->TUS TUS->SFO"},{"path":"working.html","id":"creating-a-graph-from-a-dataframe","chapter":"2 Working with Graphs","heading":"2.2.3 Creating a graph from a dataframe","text":"noted Section 2.1.4, edgelists usually sufficient descibe graph isolates concern. function graph_from_edgelist() works fine purpose, lacking flexibility graphs contain isolates vertices properties ideally like load creation. function graph_from_data_frame() allows create flexible graph directly dataframes containing required data.Let’s create bipartite graph \\(G_\\mathrm{new}\\) Figure 2.7 using function. minimum, function requires dataframe edges, also accept dataframe vertices needed.Playing around: functions section functions igraph package build graphs data, far commonly used ones. typing ?graph_from R console looking functions autocomplete, can see functions build graphs data. Try playing around curious.","code":"\n# edge dataframe\nedge_df <- data.frame(\n  from = c(\"David\", \"David\", \"Jane\", \"Jane\", \"Zubin\", \"Suraya\"),\n  to = c(\"Sandra\", \"Jake\", \"Mae-Li\", \"Jake\", \"Sandra\", \"Mae-Li\")\n) \n\n# vertex dataframe\nvertex_df <- data.frame(\n  name = c(\"David\", \"Jane\", \"Zubin\", \"Suraya\", \n           \"Sandra\", \"Jake\", \"Mae-Li\"),\n  Dept = c(rep(\"A\", 4), rep(\"B\", 3))\n)\n\n# create graph\n(gnew <- igraph::graph_from_data_frame(\n  d = edge_df,\n  directed = FALSE,\n  vertices = vertex_df\n))## IGRAPH 945292f UN-- 7 6 -- \n## + attr: name (v/c), Dept (v/c)\n## + edges from 945292f (vertex names):\n## [1] David --Sandra David --Jake   Jane  --Mae-Li Jane  --Jake   Zubin --Sandra Suraya--Mae-Li"},{"path":"working.html","id":"adding-properties-to-the-vertices-and-edges","chapter":"2 Working with Graphs","heading":"2.2.4 Adding properties to the vertices and edges","text":"Vertex edge properties can added new graph point creation can added progressively existing graph. add properties time creating graph, simply include properties columns edge vertex dataframes graph_from_data_frame() function. Let’s recreate financial transaction graph including edge vertex properties Figure 2.9.see additional edge properties cur amt vertex property loc included graph. codes immediately following properties represent property type data type. can see loc vertex property character type (v/c), cur edge property character type (e/c) amt edge property numeric type (e/n).Playing around: arbitrary number properties can added vertices edges graph. label one properties weight property numeric, change type graph W, weighted graph. Try playing around changing name amt column weight gtransfers. Also, earlier introduced simplify() function igraph. simplify() function helps turn graph multiple edges loops simple graph. However, careful using function graph properties stored edges need preserve. Play around using function gtransfers graph see happens. Experiment edge.attr.comb function argument try control attributes dealt collapsing edges.can view vertex edge sets graph using V() E() functions, respectively.see specific properties attributes within vertices edges, $ operator can used.Vertex edge properties can written existing graph directly way, providing properties correct length order. example, another way creating weighted flights graph Figure 2.10.see weighted graph created adding weight property edges unweighted graph.bipartite graph can created giving vertices type property according two disjoint sets vertices. Let’s use \\(G_\\mathrm{new}\\) bipartite graph example, generated earlier gnew object. vertex set, can define type property department property Dept.can see graph gnew now final four graph types: B meaning bipartite.Playing around: Hopefully can now see many ways construct graph. Try using graph_from_data_frame() function create gnew bipartite graph point creation.","code":"\n# dataframe of edges and properties \nedge_transfers <- data.frame(\n  from = c(\"A\", \"A\", \"B\", \"B\"),\n  to = c(\"A\", \"B\", \"A\", \"C\"),\n  cur = c(\"USD\", \"USD\", \"GBP\", \"GBP\"),\n  amt = c(150000, 570000, 230000, 175000)\n)\n\n# dataframe of vertices and properties \nvertex_transfers <- data.frame(\n  name = c(\"A\", \"B\", \"C\"),\n  loc = c(\"USA\", \"UK\", \"France\")\n)\n\n# create graph\n(gtransfers <- igraph::graph_from_data_frame(\n  d = edge_transfers,\n  directed = TRUE,\n  vertices = vertex_transfers\n))## IGRAPH c0a0c14 DN-- 3 4 -- \n## + attr: name (v/c), loc (v/c), cur (e/c), amt (e/n)\n## + edges from c0a0c14 (vertex names):\n## [1] A->A A->B B->A B->C\nV(gtransfers)## + 3/3 vertices, named, from c0a0c14:\n## [1] A B C\nE(gtransfers)## + 4/4 edges from c0a0c14 (vertex names):\n## [1] A->A A->B B->A B->C\nV(gtransfers)$name## [1] \"A\" \"B\" \"C\"\nE(gtransfers)$amt## [1] 150000 570000 230000 175000\n# create unweighted graph from routes edgelist\nedge_routes <- data.frame(\n  from = c(\"SFO\", \"SFO\", \"PHL\", \"PHL\", \"TUS\"),\n  to = c(\"PHL\", \"TUS\", \"SFO\", \"TUS\", \"SFO\")\n) \n\nedge_routes <- as.matrix(edge_routes)\n\nflightsgraph <- igraph::graph_from_edgelist(\n  el = edge_routes,\n  directed = TRUE\n)\n\n# add weights as an edge property\nE(flightsgraph)$weight <- c(4, 4, 5, 1, 2)\n\n# view flightsgraph\nflightsgraph## IGRAPH 1eac512 DNW- 3 5 -- \n## + attr: name (v/c), weight (e/n)\n## + edges from 1eac512 (vertex names):\n## [1] SFO->PHL SFO->TUS PHL->SFO PHL->TUS TUS->SFO\nV(gnew)$type <- V(gnew)$Dept\n\ngnew## IGRAPH 945292f UN-B 7 6 -- \n## + attr: name (v/c), Dept (v/c), type (v/c)\n## + edges from 945292f (vertex names):\n## [1] David --Sandra David --Jake   Jane  --Mae-Li Jane  --Jake   Zubin --Sandra Suraya--Mae-Li"},{"path":"working.html","id":"creating-graphs-in-python","chapter":"2 Working with Graphs","heading":"2.3 Creating graphs in Python","text":"book use networkx package Python create graphs. version igraph package also available Python, networkx contains convenient functions building graphs existing data.","code":""},{"path":"working.html","id":"creating-a-graph-from-an-edgelist-1","chapter":"2 Working with Graphs","heading":"2.3.1 Creating a graph from an edgelist","text":"graph can constructed edgelist Python dictionary. Let’s create undirected graph \\(G_\\mathrm{work}\\) Section 2.1.1.view edges vertices/nodes, can seen attributes gwork object.graph can also constructed edgelist Pandas DataFrame. default, edgelist needs columns source target19.default functions use Graph() class create undirected graph. Various methods exist check type graph. example:create directed graph \\(G_\\mathrm{manage}\\), use DiGraph() class.","code":"import pandas as pd\nimport networkx as nx\n\n# create edgelist as dict\ngwork_edgelist = dict(\n  David = [\"Zubin\", \"Suraya\", \"Jane\"],\n  Jane = [\"Zubin\", \"Suraya\"]\n)\n\n# create graph dict\ngwork = nx.Graph(gwork_edgelist)# see vertices as list\nlist(gwork.nodes)## ['David', 'Jane', 'Zubin', 'Suraya']# list some edges\nlist(gwork.edges)[0:3]## [('David', 'Zubin'), ('David', 'Suraya'), ('David', 'Jane')]gwork_edgelist=dict(\n  source=[\"David\", \"David\", \"David\", \"Jane\", \"Jane\"],\n  target=[\"Zubin\", \"Suraya\", \"Jane\", \"Zubin\", \"Suraya\"]\n)\n\n#create edgelist as Pandas DataFrame\ngwork_edgelist = pd.DataFrame(gwork_edgelist)\n\n# create graph from Pandas DataFrame\ngwork = nx.from_pandas_edgelist(gwork_edgelist)gwork.is_directed()## Falsegwork.is_multigraph()## Falsegmanage_edgelist=dict(\n  David=[\"Zubin\", \"Jane\"],\n  Suraya=[\"David\"]\n)\n\n# create directed graph\ngmanage=nx.DiGraph(gmanage_edgelist)\n\n# check edges\nlist(gmanage.edges)## [('David', 'Zubin'), ('David', 'Jane'), ('Suraya', 'David')]# check directed\ngmanage.is_directed()## True"},{"path":"working.html","id":"python-graph-from-adjacency","chapter":"2 Working with Graphs","heading":"2.3.2 Creating a graph from an adjacency matrix","text":"function from_numpy_matrix() allows construction graph adjacency matrix created using numpy. Let’s construct directed multigraph flight carriers Figure 2.3 way.generate graph single weighted edges Figure 2.10, simply change parallel_edges argument use DiGraph() class. map entries matrix weight edge attribute.","code":"import numpy as np\n\n# create adjacency matrix\nadj_flights = np.reshape((0,4,4,5,0,1,2,0,0), (3,3))\n\n# generate directed multigraph \nmultiflights = nx.from_numpy_matrix(adj_flights, parallel_edges=True, \ncreate_using=nx.MultiDiGraph())\n\n# name nodes\nlabel_mapping = {0: \"SFO\", 1: \"PHL\", 2: \"TUS\"}\nmultiflights = nx.relabel_nodes(multiflights, label_mapping)\n\n# check some edges\nlist(multiflights.edges)[0:3]## [('SFO', 'PHL', 0), ('SFO', 'PHL', 1), ('SFO', 'PHL', 2)]# create with single weighted edges\nmultiflights = nx.from_numpy_matrix(adj_flights, parallel_edges=False, \ncreate_using=nx.DiGraph())\n\n# name nodes\nlabel_mapping = {0: \"SFO\", 1: \"PHL\", 2: \"TUS\"}\nmultiflights = nx.relabel_nodes(multiflights, label_mapping)\n\n# check edges\nlist(multiflights.edges)## [('SFO', 'PHL'), ('SFO', 'TUS'), ('PHL', 'SFO'), ('PHL', 'TUS'), ('TUS', 'SFO')]# check weights of edges\n[multiflights.edges[i]['weight'] for i in list(multiflights.edges)]## [4, 4, 5, 1, 2]"},{"path":"working.html","id":"adding-vertex-and-edge-properties-to-a-graph","chapter":"2 Working with Graphs","heading":"2.3.3 Adding vertex and edge properties to a graph","text":"easiest way add attributes vertices edges use set_node_attributes() set_edge_attributes() functions, respectively. Vertex/node attributes must passed dict nodes keys. Let’s build financial transactions graph Figure 2.9.Note multiple attributes can set passing dict dicts.may look tedious manual, move adding common properties like node centrality edge weight graphs, find easy set built-functions automatically index output vertices edges. example, already seen Section 2.3.2 function from_numpy_matrix() automatically sets weight according number edges set argument parallel_edges False. Also, edge properties columns Pandas edgelist, can automatically import graph setting edge_attr = True from_pandas_edgelist() function networkx.Playing around: igraph package R, networkx package Python contains whole host ways import data graph. methods outlined likely common, ’s worth taking look functions from_dict_of_dicts() from_dict_of_lists() see available .","code":"# create dict of edgelist\ntransfer_edgelist = dict(\n  A = [\"A\", \"B\"],\n  B = [\"A\", \"C\"]\n)\n\n# create directed graph\ntransfer=nx.DiGraph(transfer_edgelist)\n\n# view vertices\nlist(transfer.nodes)## ['A', 'B', 'C']# add attribute loc to vertices\nloc_attributes = dict(A = \"USA\", B = \"UK\", C = \"France\")\nnx.set_node_attributes(G = transfer, name = \"loc\",\nvalues = loc_attributes)\n\n# check \n[transfer.nodes[i]['loc'] for i in list(transfer.nodes)]## ['USA', 'UK', 'France']# view edges\nlist(transfer.edges)## [('A', 'A'), ('A', 'B'), ('B', 'A'), ('B', 'C')]# add attributes to edges\ntransfer_attributes = {\n  ('A', 'A'): {\"cur\": \"USD\", \"amt\": 150000}, \n  ('A', 'B'): {\"cur\": \"USD\", \"amt\": 570000},\n  ('B', 'A'): {\"cur\": \"GBP\", \"amt\": 230000}, \n  ('B', 'C'): {\"cur\": \"GBP\", \"amt\": 175000}\n}\n\n# set edge attributes\nnx.set_edge_attributes(G = transfer, values = transfer_attributes)\n\n# check\n[transfer.edges[i]['cur'] for i in list(transfer.edges)]## ['USD', 'USD', 'GBP', 'GBP'][transfer.edges[i]['amt'] for i in list(transfer.edges)]## [150000, 570000, 230000, 175000]"},{"path":"working.html","id":"learning-exercises-1","chapter":"2 Working with Graphs","heading":"2.4 Learning exercises","text":"","code":""},{"path":"working.html","id":"discussion-questions-1","chapter":"2 Working with Graphs","heading":"2.4.1 Discussion questions","text":"Describe two sets make graph.graph vertices, edges. statement true? converse statement true?following real-world cases, kind graph best choice: pseudograph, multigraph, \\(k\\)-partite graph tree? Also state whether directed undirected.graph academic collaboration vertices represent people edge represents published paper vertices authors.graph academic collaboration vertices represent people edge represents published paper vertices authors.graph vertex represents soccer player edge exists vertices played team time.graph vertex represents soccer player edge exists vertices played team time.graph vertices geographical cities, countries continents edge exists one vertex geographically located another.graph vertices geographical cities, countries continents edge exists one vertex geographically located another.graph vertices group colleagues edge exists vertex \\(\\) vertex \\(B\\) least one email message sent colleague \\(\\) colleague \\(B\\).graph vertices group colleagues edge exists vertex \\(\\) vertex \\(B\\) least one email message sent colleague \\(\\) colleague \\(B\\).graph vertices world cities grouped continent, edge exists two cities intercontinental flight exists cities.graph vertices world cities grouped continent, edge exists two cities intercontinental flight exists cities.criteria must graph satisfy called tree?criteria must graph satisfy called tree?Give two different ways construct graph described Question 3 .Give two different ways construct graph described Question 3 .Can think three things everyday life represented graphs? vertices edges represent? kinds graph best case?Can think three things everyday life represented graphs? vertices edges represent? kinds graph best case?","code":""},{"path":"working.html","id":"data-exercises-1","chapter":"2 Working with Graphs","heading":"2.4.2 Data exercises","text":"Load koenigsberg edgelist onadata package load dataframe internet20. edgelist Bridges Königsberg problem looked Chapter 1. Use software choice following exercises.Create graph object using edgelist. Ensure undirected.exploring graph object just created, determine many vertices edges graph. make sense given original problem tackled Euler?Obtain list names vertices graph.Find function method graph package create adjacency matrix adjacency list graph. Check output see makes sense.Load pizza data set onadata package load dataframe internet21. data set represents requests made Reddit users thread called Random Acts Pizza ROAP, part larger data set used research purposes22. requester column represents users made requests pizza, responder column represents users read request responded request giving pizza23. columns represent request ID data requester time request made.Use appropriate method create graph object using requester responder columns data set.Use information contained graph object determine many pizza requests fulfilled.Determine using information graph whether anyone fulfilled one pizza request.Using appropriate method, add columns pizza data set edge properties.Use edge properties graph object determine request ID largest number requester votes.Use edge properties graph object determine request ID largest number requester subreddits.","code":""},{"path":"viz-graphs.html","id":"viz-graphs","chapter":"3 Visualizing Graphs","heading":"3 Visualizing Graphs","text":"Now learned define store graphs, ’s time take look ways visualizing . noted earlier chapters, visualization important tool can make graphs networks real others. visualizations always effective. Graphs can laid visualized many different ways, effectively communicate inferences conclusions analyst inviting others draw phenomena represented graph.graph made vertices edges, many factors impact graph appears. First, cosmetic matters vertex size, edge thickness, whether vertices edges labelled, colored . Second, matters layout—, position vertices relative visualization. example, recall simple four vertex undirected graph \\(G_\\mathrm{work}\\) Section 2.1.1. Figure 3.1 shows two different ways visualizing graph, make different choices vertex size graph layout24.\nFigure 3.1: Two different ways visualizing \\(G_\\mathrm{work}\\) graph\nchoices visualize graph wide varied, covering every single permutation combination cosmetics layouts chapter. Instead, focus learning control common options. equip readers well just work later book, also need visualize graphs create part work study. also cover variety graph visualization programming package options R Python.chapter work relatively famous graph known Zachary’s Karate Club. graph originates piece research karate club social anthropologist Wayne W. Zachary25, commonly used example social network many teaching situations today. graph contains 34 vertices representing different individuals actors. karate instructor labelled ‘Mr Hi’. club administrator labelled ‘John ’. 32 actors labelled ‘Actor 2’ ‘Actor 33’. Zachary studied social interactions members outside club meetings, study conflict arose club eventually led group splitting two: one group forming new club around instructor Mr Hi group dispersing find new clubs give karate completely. graph, edge two vertices means two individuals interacted socially outside club.","code":""},{"path":"viz-graphs.html","id":"visualizing-graphs-in-r","chapter":"3 Visualizing Graphs","heading":"3.1 Visualizing graphs in R","text":"Let’s load karate graph edgelist R onadata package internet26, check first rows.Now let’s use edgelist create undirected graph object igraph.can see undirected graph 34 named vertices 78 edges.","code":"\n# get karate edgelist data as dataframe\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\nhead(karate_edgelist)##    from      to\n## 1 Mr Hi Actor 2\n## 2 Mr Hi Actor 3\n## 3 Mr Hi Actor 4\n## 4 Mr Hi Actor 5\n## 5 Mr Hi Actor 6\n## 6 Mr Hi Actor 7\nlibrary(igraph)\n\n(karate <- igraph::graph_from_data_frame(karate_edgelist, \n                                         directed = FALSE))## IGRAPH 381af2c UN-- 34 78 -- \n## + attr: name (v/c)\n## + edges from 381af2c (vertex names):\n##  [1] Mr Hi   --Actor 2  Mr Hi   --Actor 3  Mr Hi   --Actor 4  Mr Hi   --Actor 5  Mr Hi   --Actor 6 \n##  [6] Mr Hi   --Actor 7  Mr Hi   --Actor 8  Mr Hi   --Actor 9  Mr Hi   --Actor 11 Mr Hi   --Actor 12\n## [11] Mr Hi   --Actor 13 Mr Hi   --Actor 14 Mr Hi   --Actor 18 Mr Hi   --Actor 20 Mr Hi   --Actor 22\n## [16] Mr Hi   --Actor 32 Actor 2 --Actor 3  Actor 2 --Actor 4  Actor 2 --Actor 8  Actor 2 --Actor 14\n## [21] Actor 2 --Actor 18 Actor 2 --Actor 20 Actor 2 --Actor 22 Actor 2 --Actor 31 Actor 3 --Actor 4 \n## [26] Actor 3 --Actor 8  Actor 3 --Actor 9  Actor 3 --Actor 10 Actor 3 --Actor 14 Actor 3 --Actor 28\n## [31] Actor 3 --Actor 29 Actor 3 --Actor 33 Actor 4 --Actor 8  Actor 4 --Actor 13 Actor 4 --Actor 14\n## [36] Actor 5 --Actor 7  Actor 5 --Actor 11 Actor 6 --Actor 7  Actor 6 --Actor 11 Actor 6 --Actor 17\n## + ... omitted several edges"},{"path":"viz-graphs.html","id":"native-plotting-igraph","chapter":"3 Visualizing Graphs","heading":"3.1.1 Native plotting in igraph","text":"igraph package allows simple plotting graphs using plot() function. function works instantly igraph object, using default values various arguments. starting point, use default values except layout graph. set layout plot initially random layout, randomly allocate vertices different positions. Figure 3.2 shows default plot karate network.\nFigure 3.2: Basic default plot karate network\nPlaying around: previous code chunk fixes positioning vertices karate graph. setting random seed, can ensure random numbers generated time precise plot repeatable reproducible. layout_randomly() function calculates random x y coordinates vertices, use plot() function, assigns coordinates plot. learn layouts later chapter, use technique lot. like, try playing around layouts now. couple examples layout_with_sugiyama() layout_with_dh(). Remember always set seed whenever generate graph layout calculation ensure visualization reproducible others.Looking Figure 3.2, note labeling vertices somewhat obtrusive unhelpful clarity graph. common problem default graph plotting, large number vertices plot can easily turn messy cloud overlapping labels.Vertex labels can adjusted via properties vertices. common properties adjusted follows:label: text labellabel.family: font family used (default ‘serif’)label.font: font style, 1 plain (default), 2 bold, 3 italic, 4 bold italic 5 symbol fontlabel.cex: size label textlabel.color: color label textlabel.dist: distance label vertex, 0 centered vertex (default) 1 beside vertexlabel.degree: angle label display relative center vertex, radians. default -pi/4Let’s try change vertex labels display Mr Hi John . Let’s also change size, color font family labels. output can seen Figure 3.3.\nFigure 3.3: Adjusting label appearance changing vertex properties\nNow cleaned label situation, may wish change appearance vertices. commonly used vertex properties allow :size: size vertexcolor: fill color vertexframe.color: border color vertexshape: shape vertex; multiple shape options supported including circle, square, rectangle noneWe may wish use different vertex shapes colors actors compared Mr Hi John . done, results Figure 3.4.\nFigure 3.4: Adjusting vertex appearance changing vertex properties\nsimilar way, edges can changed adding editing edge properties. common edge properties used change edges igraph plot:color: color edgewidth: width edgearrow.size: size arrow directed edgearrow.width: width arrow directed edgearrow.mode: Whether edges direct forward (>), backward (<) (<>)lty: Line type edges, numerous options including solid, dashed, dotted, dotdash blankcurved: amount curvature apply edge, zero (default) straight edge, negative numbers bending clockwise positive bending anti-clockwiseNote edges, like vertices, can also label property various label settings like label.cex label.family. Let’s adjust karate graph blue dashed edges, result Figure 3.5.\nFigure 3.5: Adjusting edge appearance changing edge properties\nPlaying around: Usually, getting graph looking way want takes trial error playing around properties. Try adjusting karate graph using properties listed.","code":"\n# set seed for reproducibility\nset.seed(123)\n\n# create random layout\nl <- layout_randomly(karate)\n\n# plot with random layout\nplot(karate, layout = l)\n# only store a label if Mr Hi or John A\nV(karate)$label <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          V(karate)$name,\n                          \"\")\n\n# change label font color, size and font family \n# (selected font family needs to be installed on system)\nV(karate)$label.color <- \"black\"\nV(karate)$label.cex <- 0.8\nV(karate)$label.family <- \"arial\"\n\nplot(karate, layout = l)\n# different colors and shapes for Mr Hi and and John A\nV(karate)$color <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"lightblue\", \n                          \"pink\")\n\nV(karate)$shape <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"square\", \n                          \"circle\")\n\n\nplot(karate, layout = l)\n# change color and linetype of all edges\nE(karate)$color <- \"blue\"\nE(karate)$lty <- \"dashed\"\n\nplot(karate, layout = l)"},{"path":"viz-graphs.html","id":"layouts","chapter":"3 Visualizing Graphs","heading":"3.1.2 Graph layouts","text":"layout graph determines precise position vertices 2-dimensional plane 3-dimensional space. Layouts algorithms calculate vertex positions based properties graph. Different layouts work different purposes, example visually identify communities graph, just make graph look pleasant. Section 3.1.1, used random layout karate graph. Now let’s look common alternative layouts. Layouts used multiple plotting packages, explore using igraph base plotting capabilities .two ways add layout graph igraph. want keep graph object separate layout, can create layout use argument plot() function, like Figure 3.2. Alternatively, can assign layout graph object making property graph. intend stick permanently chosen layout intend experiment. can use add_layout_() function achieve . example, create karate graph grid layout.can see new graph object layout property. Note running add_layout_() graph already layout property default overwrite previous layout unless set argument overwrite = FALSE.well random layout demonstrated Figure 3.2, common shape layouts include as_star(), as_tree(), in_circle(), on_grid() on_sphere(). example, Figure 3.6 shows circle layout karate network, Figure 3.7 shows sphere layout.\nFigure 3.6: Circle layout karate graph\n\nFigure 3.7: Sphere layout karate graph\nThinking ahead: Notice circle sphere layouts position Mr Hi John close . indication layout algorithms established something common two individuals based properties graph. something cover later chapter, want explore ahead, know , calculate centrality measures vertices karate graph—example degree centrality betweenness centrality.Force-directed graph layouts extremely popular, aesthetically pleasing help visualize communities vertices quite effectively, especially graphs low moderate edge complexity. algorithms emulate physical models like Hooke’s law attract connected vertices together, time applying repelling forces pairs vertices try keep much space possible . calculation iterative process vertex positions calculated equilibrium reached27. result usually layout connected vertices closer together edge lengths approximately equal.Zachary’s Karate Club study, study connection community, can imagine force-directed layout good choice visualization, find case many network graphs study. several different implementations force-directed algorithms available. Perhaps popular Fruchterman-Reingold algorithm. Figure 3.8 shows karate network layout generated Fruchterman-Reingold algorithm, can see clear communities karate club oriented around Mr Hi John .\nFigure 3.8: Force-directed layout karate graph according Fruchterman-Reingold algorithm\nKamada-Kawai algorithm GEM algorithm also commonly used force-directed algorithms produce similar types community structures Figures 3.9 3.10, respectively.\nFigure 3.9: Force-directed layout karate graph according Kamada-Kawai algorithm\n\nFigure 3.10: Force-directed layout karate graph according GEM algorithm\nwell force-directed shape-oriented layout algorithms, several alternative approaches layout calculations also available. layout_with_dh() uses simulated annealing algorithm developed nice graph drawing, layout_with_mds() generates vertex coordinates multidimensional scaling based shortest path distance (look later chapter). layout_with_sugiyama() suitable directed graphs minimizes edge crossings introducing bends edges28.Finally, three layout algorithms suited large graphs many thousands even millions edges. One biggest problems visualizing large graphs potential ‘hairballs’—, clumps connected nodes dense usefully visualized. layout_with_lgl() uses Large Graph Layout algorithm tries identify clusters vertices position clusters positioning individual vertices minimize chance hairballs, still adhering principles force-directed networks. layout_with_drl() layout_with_graphopt() also use efficient force-directed algorithms scale well large graphs.Playing around: Try laying karate graph using various algorithms observe different appearances. interested experimenting larger graph, enough computing power won’t freeze machine, load wikivote edgelist onadata package, download internet29. network represents votes Wikipedia members members made administrators. Create directed graph object, lay using layout_with_graphopt(). help visualization, remove vertex labels, set node size 0.5 set edge arrow size 0.1. plot , see great example hairball, Figure 3.11.\nFigure 3.11: Example hairball generated trying visualize large network Wikipedia votes administrators\nabsence information layout, plot() function igraph choose appropriate layout using logic determined layout_nicely(). graph already layout attribute, use layout. Otherwise, vertices x y attributes, use vertex coordinates. Failing , layout_with_fr() used graph fewer 1,000 vertices, layout_with_drl() used graph 1,000 vertices. Thus, plot defaults form force-directed layout unless graph attributes suggest otherwise.","code":"\n# check whether existing karate graph has a layout property\nkarate$layout## NULL\n# assign grid layout as a graph property\nset.seed(123)\nkarate_grid <- igraph::add_layout_(karate, on_grid())\n\n# check a few lines of the 'layout' property\nhead(karate_grid$layout)##      [,1] [,2]\n## [1,]    0    0\n## [2,]    1    0\n## [3,]    2    0\n## [4,]    3    0\n## [5,]    4    0\n## [6,]    5    0\n# circle layout\nset.seed(123)\ncirc <- layout_in_circle(karate)\nplot(karate, layout = circ)\n# sphere layout\nset.seed(123)\nsph <- layout_on_sphere(karate)\nplot(karate, layout = sph)\n# F-R algorithm\nset.seed(123)\nfr <- layout_with_fr(karate)\nplot(karate, layout = fr)\n# K-K algorithm\nset.seed(123)\nkk <- layout_with_kk(karate)\nplot(karate, layout = kk)\n# GEM algorithm\nset.seed(123)\ngem <- layout_with_gem(karate)\nplot(karate, layout = gem)"},{"path":"viz-graphs.html","id":"ggraph","chapter":"3 Visualizing Graphs","heading":"3.1.3 Static plotting with ggraph","text":"ggraph package developed enjoy working general ggplot2 package, popular plotting package R30. ggplot2, ggraph provides grammar building graph visualizations. native capabilities igraph suffice R static graph visualizations, ggraph considered additional option prefer use . also integrates well ggplot2 allows layers added graph visualization, greater variety node shapes ability layer networks onto geographic maps relative ease.build elementary graph using ggraph, start igraph object layout, progressively add node edge properties well themes layers required. illustrate, let’s generate relatively basic visualization karate graph using ggraph Figure 3.12. Note customary add edges vertices vertices top layer plot.\nFigure 3.12: Elementary visualization karate graph using ggraph Fruchterman-Reingold algorithm\nparticularly appealing. However, can play properties improve appearance, can move minimal theme remove grey background add title wish, Figure 3.13.\nFigure 3.13: Improved visualization karate graph using node edge geom functions\nLike ggplot2, want associate property nodes edges property plot, can use aesthetic mappings. example, let’s give Mr Hi John property “leader” graph, ask ggraph color nodes property, Figure 3.14.\nFigure 3.14: karate graph leader property used aesthetic\nexample using ggraph, let’s look data set collected study workplace interactions France 201531. Load workfrance_edgelist workfrance_vertices data sets onadata package download internet32. study, employees company wore wearable devices triangulate location building, edges defined situation two employees sharing spatial location. edgelist contains columns edges, well mins column representing total minutes spent co-located study33. vertex list contains ground-truth data department employee. create basic visualization using ggraph Figure 3.15.\nFigure 3.15: Connection employees workplace measured spatial co-location\nstands, graph tell us much, couple simple adjustments can change . First, can adjust thickness edges reflect total number minutes spent meeting, seems reasonable measure ‘strength’ ‘weight’ connection. Second, can color code nodes department. result Figure 3.16. can now see clusters highly connected employees mostly driven department.\nFigure 3.16: Connection employees workplace edge thickness weighted minutes spent spatially co-located vertices colored department\nThinking ahead: graph just created Figure 3.16 shows detected community partition vertices. ’s relatively clear individuals department likely connected. Community detection important topic Organizational Network Analysis study later book. ’s always straightforward identify drivers community networks, learn number unsupervised community detection algorithms partition graph different community groups. example, Figure 3.17 shows results running Louvain community detection algorithm workfrance graph mins edge weights. can see communities detected strongly aligned departments Figure 3.16.\nFigure 3.17: Clusters employees detected Louvain unsupervised community detection algorithm. Note cluster similarity communities departments previous graph.\nggraph visualizations can work relatively easily graphics layers, allowing superimpose graph onto coordinate systems. Let’s look example work. Load londontube_edgelist londontube_vertices data sets onadata package download internet34. vertex set list London Tube Stations id, name geographical coordinates longitude latitude.edge list represents connections stations, along name line official linecolor hex code.can easily create igraph object data use ggraph create visualization using linecolor edge color stations, Figure 3.18.\nFigure 3.18: Random graph visualization London Tube network graph edges colored different lines\n’s great can easily, ’s pretty confusing visualization anyone knows London. Circle Line doesn’t look circular, Picadilly Line seems heading southeast instead northeast. west, Metropolitan Picadilly Lines seem swapped places. course, graph using geographical coordinates plot vertices.can change expanding edgelist include latitudes longitudes stations edge, can layer map graph. First, let’s create new longitude latitude columns edgelist, check works.looks like worked. Now can use ggmap package R layer map London top base ggraph layer, use various latitude longitude columns make network geographically accurate, Figure 3.1935.\nFigure 3.19: Geographically accurate London Tube network\nFigure 3.19, looks like everything right place. kind graphical layering can extremely important inherent coordinate system lying behind vertices graph none existing layout algorithms can recreate coordinate system.","code":"\nlibrary(igraph)\nlibrary(ggraph)\n\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\n# create graph object\nkarate <- igraph::graph_from_data_frame(karate_edgelist, \n                                        directed = FALSE)\n\n# set seed for reproducibility\nset.seed(123)\n\n# visualise using ggraph with fr layout\nggraph(karate, layout = \"fr\") +\n  geom_edge_link() +\n  geom_node_point() \nset.seed(123)\nggraph(karate, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) + \n  geom_node_point(color = \"blue\", size = 5) +\n  theme_void() + \n  labs(title = \"Zachary's Karate Club Network\")\nV(karate)$leader <- ifelse(\n  V(karate)$name %in% c(\"Mr Hi\", \"John A\"), 1, 0\n)\n\nset.seed(123)\nggraph(karate, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) + \n  geom_node_point(aes(color = as.factor(leader)), size = 5, \n                  show.legend = FALSE) +\n  theme_void() + \n  labs(title = \"Zachary's Karate Club Network\")\n# get edgelist with mins property\nworkfrance_edgelist <- read.csv(\n  \"https://ona-book.org/data/workfrance_edgelist.csv\"\n)\n\n# get vertex set with dept property\nworkfrance_vertices <- read.csv(\n  \"https://ona-book.org/data/workfrance_vertices.csv\"\n)\n\n# create undirected graph object\nworkfrance <- igraph::graph_from_data_frame(\n  d = workfrance_edgelist,\n  vertices = workfrance_vertices,\n  directed = FALSE\n)\n\n# basic visualization\nset.seed(123)\nggraph(workfrance, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(color = \"blue\", size = 5) +\n  theme_void()\nset.seed(123)\nggraph(workfrance, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7, aes(width = mins), \n                 show.legend = FALSE) +\n  geom_node_point(aes(color = dept), size = 5) +\n  labs(color = \"Department\") +\n  theme_void() +\n  labs(title = \"Spatial co-location of employees in a workplace\")\n# download and view london tube vertex data\nlondontube_vertices <- read.csv(\n  \"https://ona-book.org/data/londontube_vertices.csv\"\n)\nhead(londontube_vertices)##   id         name latitude longitude\n## 1  1   Acton Town  51.5028   -0.2801\n## 2  2      Aldgate  51.5143   -0.0755\n## 3  3 Aldgate East  51.5154   -0.0726\n## 4  4   All Saints  51.5107   -0.0130\n## 5  5     Alperton  51.5407   -0.2997\n## 6  7        Angel  51.5322   -0.1058\n# download and view london tube edge data\nlondontube_edgelist <- read.csv(\n  \"https://ona-book.org/data/londontube_edgelist.csv\"\n)\nhead(londontube_edgelist)##   from  to          line linecolor\n## 1   11 163 Bakerloo Line   #AE6017\n## 2   11 212 Bakerloo Line   #AE6017\n## 3   49  87 Bakerloo Line   #AE6017\n## 4   49 197 Bakerloo Line   #AE6017\n## 5   82 163 Bakerloo Line   #AE6017\n## 6   82 193 Bakerloo Line   #AE6017\n# create a set of distinct line names and linecolors to use\nlines <- londontube_edgelist |> \n  dplyr::distinct(line, linecolor)\n\n# create graph object\ntubegraph <- igraph::graph_from_data_frame(\n  d = londontube_edgelist, \n  vertices = londontube_vertices,\n  directed = FALSE\n)\n\n# visualize tube graph using linecolors for edge color\nset.seed(123)\nggraph(tubegraph) +\n  geom_node_point(color = \"black\", size = 1) +\n  geom_edge_link(aes(color = line), width = 1) +\n  scale_edge_color_manual(name = \"Line\",\n                          values = lines$linecolor) +\n  theme_void()\n# reorganize to include longitude and latitude for start and end\nnew_edgelist <- londontube_edgelist |> \n  dplyr::inner_join(londontube_vertices |> \n                      dplyr::select(id, latitude, longitude), \n                    by = c(\"from\" = \"id\")) |> \n  dplyr::rename(lat_from = latitude, lon_from = longitude) |> \n  dplyr::inner_join(londontube_vertices |> \n                      dplyr::select(id, latitude, longitude), \n                    by = c(\"to\" = \"id\")) |> \n  dplyr::rename(lat_to = latitude, lon_to = longitude)\n\n# view\nhead(new_edgelist)##   from  to          line linecolor lat_from lon_from  lat_to  lon_to\n## 1   11 163 Bakerloo Line   #AE6017  51.5226  -0.1571 51.5225 -0.1631\n## 2   11 212 Bakerloo Line   #AE6017  51.5226  -0.1571 51.5234 -0.1466\n## 3   49  87 Bakerloo Line   #AE6017  51.5080  -0.1247 51.5074 -0.1223\n## 4   49 197 Bakerloo Line   #AE6017  51.5080  -0.1247 51.5098 -0.1342\n## 5   82 163 Bakerloo Line   #AE6017  51.5199  -0.1679 51.5225 -0.1631\n## 6   82 193 Bakerloo Line   #AE6017  51.5199  -0.1679 51.5154 -0.1755\n# recreate graph object to capture additional edge data\ntubegraph <- igraph::graph_from_data_frame(\n  d = new_edgelist, \n  vertices = londontube_vertices,\n  directed = FALSE\n)\n\n# layer a London map (requires Google Maps API key)\nlibrary(ggmap)\nlondonmap <- get_map(location = \"London, UK\", source = \"google\")\n\n# visualize using geolocation\nggraph(tubegraph) +\n  geom_blank() +\n  inset_ggmap(londonmap) +\n  geom_node_point(aes(x = longitude, y = latitude), \n                  color = \"black\", size = 1) +\n  geom_edge_link(aes(x = lon_from, y = lat_from,\n                     xend = lon_to, yend = lat_to,\n                     color = line), width = 1) +\n  scale_edge_color_manual(name = \"Line\",\n                          values = lines$linecolor)"},{"path":"viz-graphs.html","id":"interactive-graph-visualization-using-visnetwork","chapter":"3 Visualizing Graphs","heading":"3.1.4 Interactive graph visualization using visNetwork","text":"seen earlier many large networks complicated make sense visually using static approaches like already reviewed igraph ggraph. Nevertheless, interactive visualizations networks can useful interest visual exploration particular vertices small subnetworks, even overall network visually complex. touch upon couple commonly used interactive graph visualization packages , use Javascript libraries behind scenes create interactive visualizations.visNetwork simple effective package uses vis.js API create HTML widgets containing interactive graph visualizations. fairly easy use, main function visNetwork() taking dataframe node information dataframe edge information, well optional arguments. columns dataframes expected certain default column names. Vertices/nodes expected least id column can also contain:label: label vertexgroup: group vertex groupsvalue: used determine size vertextitle: used tooltip mouseoverOther columns can included passed specific values/properties visualization, color shape.edge dataframe must contain column, can also contain label, value title customize edges vertices, well properties arrows dashes.Interactive Figure 3.20 simple example visNetwork function work using \\(G_\\mathrm{work}\\) graph Section 2.1.1. Note visLayout() function can used various customizations, including passing random seed variable vis.js ensure reproducibility.\nFigure 3.20: Simple interactive visNetwork rendering \\(G_\\mathrm{work}\\) graph. Try playing rendering zooming /moving nodes.\nfact, assuming working igraph objects, easiest way deploy visNetwork use visIgraph() function, takes igraph object restructures behind scenes use vis.js API, even inheriting whatever igraph layout prefer. Let’s recreate karate graph visNetwork, Interactive Figure 3.2136.\nFigure 3.21: Interactive visNetwork rendering basic karate graph using force-directed layout\nPlaying around: visNetwork package allows take advantage ton features vis.js API, including wide range graph customization, ability make graph editable add selector menus search specific nodes groups nodes. ’s worth experimenting different capabilities. thorough manual can found https://datastorm-open.github.io/visNetwork/. don’t try recreate workfrance graph chapter visNetwork?","code":"\nlibrary(visNetwork)\n\nnodes <- data.frame(\nid = 1:4,\nlabel = c(\"David\", \"Zubin\", \"Suraya\", \"Jane\")\n)\n\nedges <- data.frame(\n  from = c(1, 1, 1, 4, 4),\n  to = c(2, 3, 4, 2, 3)\n)\n\nvisNetwork(nodes, edges) |> \n  visLayout(randomSeed = 123)\nlibrary(igraph)\nlibrary(ggraph)\n\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\n# create graph object\nkarate <- igraph::graph_from_data_frame(karate_edgelist, \n                                        directed = FALSE)\n\n# different colors and shapes for Mr Hi and and John A\nV(karate)$color <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"lightblue\", \n                          \"pink\")\n\nV(karate)$shape <- ifelse(V(karate)$name %in% c(\"Mr Hi\", \"John A\"),\n                          \"square\", \n                          \"circle\")\n\n# more visible edges \nE(karate)$color = \"grey\"\nE(karate)$width <- 3\n\n# visualize from igraph\nvisNetwork::visIgraph(karate, layout = \"layout_with_fr\", \n                      randomSeed = 123) "},{"path":"viz-graphs.html","id":"interactive-graph-visualization-using-networkd3","chapter":"3 Visualizing Graphs","heading":"3.1.5 Interactive graph visualization using networkD3","text":"networkD3 package creates responsive interactive network visualizations using D3 javascript library, beautiful options common network layouts like force-directed chord diagrams.create simple force-directed visualization based edgelist, use simpleNetwork() function. needs simple dataframe default first two columns represent edgelist37. example karate network, result shown Interactive Figure 3.22. Note possible set random seed networkD3.\nFigure 3.22: Simple interactive networkD3 rendering Karate graph\nforceNetwork() function allows greater levels customization visualization. function requires edgelist vertex set specific format. However, can use function igraph_to_networkD3() easily create list containing need igraph object. next example, recreate graph Figure 3.22, put Mr Hi John different group, result shown Interactive Figure 3.23. Note node names appear nodes clicked.\nFigure 3.23: Interactive force-directed networkD3 rendering Karate graph\ntypes D3 network visualizations also available chordNetwork(), sankeyNetwork(), many appropriate data visualization purposes exploration analysis networks. quick example using sankeyNetwork() visualize data flows, load eu_referendum data set onadata package download internet38. shows statistics voting region area United Kingdom’s 2016 referendum membership European Union. example, calculate ‘Leave’ ‘Remain’ votes region visualize using sankeyNetwork(), result shown Interactive Figure 3.24. worth taking look intermediate objects created code can better understand construct Nodes Links dataframes commonly expected networkD3 functions.\nFigure 3.24: Interactive visualization regional vote flows UK’s European Union Referendum 2016 using sankeyNetwork()\nThinking ahead: shown examples section, networkD3 package offers useful, convenient ways non-Javascript programmers make use many great capabilities D3 visualization library. See https://christophergandrud.github.io/networkD3/ examples. However, package’s customization potential limited. can program D3, scope exists create amazing interactive graph visualizations, limitless customization potential.","code":"\nlibrary(networkD3)\n\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n  \n# visualize\nnetworkD3::simpleNetwork(karate_edgelist)\n# get karate edgelist\nkarate_edgelist <- read.csv(\"https://ona-book.org/data/karate.csv\")\n\n# create igraph object\nkarate <- igraph::graph_from_data_frame(karate_edgelist, \n                                        directed = FALSE)\n\n# give Mr Hi and John A a different group\nV(karate)$group <- ifelse(\n  V(karate)$name %in% c(\"Mr Hi\", \"John A\"), 1, 2\n)\n\n# translate to networkD3 - creates a list with links and nodes dfs\n# links have a source and target column and group if requested \nnetd3_list <- networkD3::igraph_to_networkD3(karate, \n                                             group = V(karate)$group)\n\n# visualize\nnetworkD3::forceNetwork(\n  Links = netd3_list$links,\n  Nodes = netd3_list$nodes,\n  NodeID = \"name\",\n  Source = \"source\",\n  Target = \"target\",\n  Group = \"group\"\n)\nlibrary(dplyr)\nlibrary(networkD3)\nlibrary(tidyr)\n\n# get data\neu_referendum <- read.csv(\n  \"https://ona-book.org/data/eu_referendum.csv\"\n)\n\n# aggregate by region\nresults <- eu_referendum |>  \n  dplyr::group_by(Region) |> \n  dplyr::summarise(Remain = sum(Remain), Leave = sum(Leave)) |> \n  tidyr::pivot_longer(-Region, names_to = \"result\", \n                      values_to = \"votes\")\n\n# create unique regions, \"Leave\" and \"Remain\" for nodes dataframe\nregions <- unique(results$Region)\nnodes <- data.frame(node = c(0:13), \n                    name = c(regions, \"Leave\", \"Remain\"))\n\n# create edges/links dataframe\nresults <- results |> \n  dplyr::inner_join(nodes, by = c(\"Region\" = \"name\")) |> \n  dplyr::inner_join(nodes, by = c(\"result\" = \"name\"))\n\nlinks <- results[ , c(\"node.x\", \"node.y\", \"votes\")]\ncolnames(links) <- c(\"source\", \"target\", \"value\")\n\n# visualize using sankeyNetwork\nnetworkD3::sankeyNetwork(\n  Links = links, Nodes = nodes, Source = 'source', Target = 'target', \n  Value = 'value', NodeID = 'name', units = 'votes', fontSize = 12\n)"},{"path":"viz-graphs.html","id":"visualizing-graphs-in-python","chapter":"3 Visualizing Graphs","heading":"3.2 Visualizing graphs in Python","text":"look two approaches graph visualization Python. First, look static graph plotting via networkx matplotlib packages. look interactive plotting via pyvis package. previous section, work Zachary’s Karate Club demonstrate visualization options. Let’s load create graph object now.","code":"import pandas as pd\nimport networkx as nx\n\n# get edgelist as Pandas DataFrame\nkarate_edgelist = pd.read_csv(\"https://ona-book.org/data/karate.csv\")\n\n# create graph from Pandas DataFrame\nkarate = nx.from_pandas_edgelist(karate_edgelist, \nsource = 'from', target = 'to')"},{"path":"viz-graphs.html","id":"static-plotting-using-networkx-and-matplotlib","chapter":"3 Visualizing Graphs","heading":"3.2.1 Static plotting using networkx and matplotlib","text":"draw() function networkx provides basic visualization graph matplotlib using force-directed “spring” layout, can seen Figure 3.25. Remember also set seed ensure reproducibility visualization.\nFigure 3.25: Basic static visualization Karate network\ndraw_networkx() function much wider range options customizing appearance graphs. example, can change color specific nodes edges, label specific nodes others, Figure 3.26.\nFigure 3.26: Static visualization Karate network adjustments color labeling\nlimited selection layouts available can applied static visualization. example, apply circular layout, output Figure 3.27.\nFigure 3.27: Static visualization Karate network circular layout\napply Kamada-Kawai force-directed layout, output Figure 3.28. Note layout algorithms like Kamada-Kawai make use scipy package therefore need installed Python environment.\nFigure 3.28: Static visualization Karate network Kamada-Kawai force-directed layout\nPlaying around: visual capabilities networkx Python limited igraph ggraph R, still range ways customize visualization. Try making changes visualizations shown section trying different layouts looking range arguments can adjusted draw_networkx() function. can look details https://networkx.org/documentation/stable/reference/drawing.html.","code":"import numpy as np\nfrom matplotlib import pyplot as plt\n\n# set seed for reproducibility\nnp.random.seed(123)\n\nfig = nx.draw(karate)\nplt.show()# set seed for reproducibility\nnp.random.seed(123)\n\n# create dict with labels only for Mr Hi and John A\nnode = list(karate.nodes)\nlabels = [i if i == \"Mr Hi\" or i == \"John A\" else \"\" \nfor i in karate.nodes]\nnodelabels = dict(zip(node, labels))\n\n# create color list\ncolors = [\"lightblue\" if i == \"Mr Hi\" or i == \"John A\" else \"pink\" \nfor i in karate.nodes]\n\nnx.draw_networkx(karate, labels = nodelabels, node_color = colors, \nedge_color = \"grey\")\nplt.show()# set seed for reproducibility\nnp.random.seed(123)\n\n# circular layout\nnx.draw_circular(karate, labels = nodelabels, node_color = colors, \nedge_color = \"grey\")\nplt.show()# set seed for reproducibility\nnp.random.seed(123)\n\n# circular layout\nnx.draw_kamada_kawai(karate, labels = nodelabels, node_color = colors, \nedge_color = \"grey\")\nplt.show()"},{"path":"viz-graphs.html","id":"interactive-visualization-using-networkx-and-pyvis","chapter":"3 Visualizing Graphs","heading":"3.2.2 Interactive visualization using networkx and pyvis","text":"Similar visNetwork package R, pyvis package provides API allowing creation interactive graphs using vis.js Javascript library. mostly creating graph objects using networkx, easiest way use pyvis take advantage networkx integration.visualize networkx graph using pyvis, start creating Network() class use from_nx() method import networkx object. show() method render interactive plot.pyvis expects specific names visual properties nodes edges, example color size. named properties added nodes edges dicts networkx object, passed pyvis.Playing around: Different user interface controls can added directly onto pyvis visualizations using show_buttons() method allowing experiment directly graph’s look feel. example, can add buttons experiment physics force-directed layout, node edge properties. can useful experimenting options. can learn tutorial pages https://pyvis.readthedocs.io/en/latest/.","code":"from pyvis.network import Network\n\n# create pyvis Network object\nnet = Network(height = \"500px\", width = \"600px\", notebook = True)\n\n# import karate graph\nnet.from_nx(karate)\nnet.show('out1.html')# adjust colors\nfor i in karate.nodes:\n  karate.nodes[i]['size'] = 20 if i == \"Mr Hi\" or i == \"John A\" \\\n  else 10\n  \n  karate.nodes[i]['color'] = \"lightblue\" if i == \"Mr Hi\" \\\n  or i == \"John A\" else \"pink\" \n\n# create edge color\nfor i in karate.edges:\n  karate.edges[i]['color'] = \"grey\"\n  \n# create pyvis Network object\nnet = Network(height = \"500px\", width = \"600px\", notebook = True)\n  \n# import from networkx to pyvis and display\nnet.from_nx(karate)\nnet.show('out2.html')"},{"path":"viz-graphs.html","id":"learning-exercises-2","chapter":"3 Visualizing Graphs","heading":"3.3 Learning exercises","text":"","code":""},{"path":"viz-graphs.html","id":"discussion-questions-2","chapter":"3 Visualizing Graphs","heading":"3.3.1 Discussion questions","text":"visualization important consideration studying graphs?Describe ways graph visualization can adjusted reflect different characteristics vertices. example, might represent ‘important’ vertices visually?Describe similar adjustments made edges.Describe likely challenges large graph visualizations may make harder draw conclusions .difference static iteractive visualization? ways might interactive visualizations overcome challenges associated large static graph visualizations?Choose favorite programming language list package options visualize graphs language.package option listed, describe kinds graphs package best suited .Describe meant graph layout.List layout options available packages selected Questions 6 7.visualize graph twice using layout, outputs may look different. case can done control ?","code":""},{"path":"viz-graphs.html","id":"data-exercises-2","chapter":"3 Visualizing Graphs","heading":"3.3.2 Data exercises","text":"Load madmen_vertices madmen_edges data sets onadata package download internet39. represents network characters TV show Mad Men two characters connected edge involved romantic relationship together.Create graph object data sets.Create basic visualization network using one methods chapter.Adjust visualization distinguish Male Female characters.Adjust visualization highlight six main characters.Adjust visualization differentiate relationships characters married married.Experiment different layouts. one prefer ?Now load schoolfriends_vertices schoolfriends_edgelist data sets onadata package download internet40. data set represents friendships reported schoolchildren high school Marseille, France 2013. vertex set provides ID, class gender child, edgelist two types relationships. first type reported friendship ID reported ID friend. second type known Facebook friendship two IDs.Create two different graph objects—one reported friendship Facebook friendship. one graph object different ?Create basic visualization graphs using method choice. Try create versions graphs contain isolates (nodes connected others) contain isolates.Experiment different layouts visualization. one prefer ? see potential communities graphs? type friendship appears ‘selective’ opinion?Adjust visualizations differentiate vertices gender. type relationship likely gender-agnostic opinion? Try question class differentiation.","code":""},{"path":"restructuring-data.html","id":"restructuring-data","chapter":"4 Restructuring Data for Use in Graphs","heading":"4 Restructuring Data for Use in Graphs","text":"far learned define visualize graphs allow us work gain basic insights . made really big assumption . assumed data need create graph always available exactly form need . Usually edgelist set dataframes edges vertices. reality, certain types data exist form default. Typically, electronic communication data often—though always—‘’ ‘’ structure, communication works many underlying systems like email, calendar communication networks already built databases graph-like structure.However, lot problems may want apply graph theory, data exist way makes easy create graph. situations, need transform data existing shape graph-friendly shape—set vertices edges.two important considerations transforming data graph-friendly structure. considerations depend problem trying solve graph, follows:entities interested connecting? vertices graph. single entity type like set people, multiple entity types, connecting people organizational units. Complex graphs usually involve multiple entity types.entities interested connecting? vertices graph. single entity type like set people, multiple entity types, connecting people organizational units. Complex graphs usually involve multiple entity types.define relationship vertices? edges graph. , can multiple relationship types, ‘reports ’ ‘works ’, depending complex graph needs .define relationship vertices? edges graph. , can multiple relationship types, ‘reports ’ ‘works ’, depending complex graph needs .addition fundamental considerations, also questions design construct graph. often one option can model entities relationships interested . example, imagine two types relationships ‘works ’ means two people worked together project ‘located ’ means two people based location. One option modeling single graph single entity type (person) connected edges ‘relationship type’ property (‘works ’ ‘located ’). Another option several entity types—person, project location—vertices, connect people projects locations using single edge type means ‘member ’. first option, relationships modeled directly, second modeled indirectly. may work equally well problem solved graph, one choice may useful efficient another.able go sorts transformations requires technical data design skills judgment. ‘one size fits ’ solution. transformations required go depends great deal context purpose work. Nevertheless, chapter demonstrate two examples reflect common situations data needs transformed graph-unfriendly graph-friendly structure. Working examples illustrate simple design process follow help demonstrate typical data transformation methods applied common situations.first example, study situation data exists traditional rectangular tables, need transform order understand connections understand directly tables . extremely common practice many organizations perform sorts transformations order populate graph databases traditional data sources. second example, study extract information documents way helps us understand connections entities documents. another common situation strong applications general, particular potential fields law crime investigation. examples demonstrated detail using R, last section chapter provide examples perform similar transformations using Python.","code":""},{"path":"restructuring-data.html","id":"transforming-data-in-rectangular-tables-for-use-in-graphs","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.1 Transforming data in rectangular tables for use in graphs","text":"example going use simplified tables Chinook database41, open-source database contains records customers, employees transactions music sales company. working four simplified tables database can load onadata package now download internet follows:","code":"\n# download chinook database tables\nchinook_employees <- read.csv(\n  \"https://ona-book.org/data/chinook_employees.csv\"\n)\nchinook_customers <- read.csv(\n  \"https://ona-book.org/data/chinook_customers.csv\"\n)\nchinook_invoices <- read.csv(\n  \"https://ona-book.org/data/chinook_invoices.csv\"\n)\nchinook_items <- read.csv(\n  \"https://ona-book.org/data/chinook_items.csv\"\n)"},{"path":"restructuring-data.html","id":"creating-a-simple-graph-of-a-management-hierarchy","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.1.1 Creating a simple graph of a management hierarchy","text":"First, let’s take look simple example graph already exists explicitly one data tables. Let’s take look rows chinook_employees data set.can easily create graph management relationships using table. graph, single entity type (employee) vertices management relationship (‘manager ’) edges. simplicity, let’s use first names vertex names. joining data , using EmployeeId = ReportsTo, can create two columns first names management relationship.can see FirstName.x column manager column Firstname.y column column edgelist. also remove rows edge.Now can create directed igraph object using ‘manager ’ relationship.now directed graph named vertices, easy plot. Let’s use ggplot dendrogram (tree) layout, Figure 4.1.\nFigure 4.1: Management hierarchy Chinook tree (dendrogram)\n","code":"\nhead(chinook_employees)##   EmployeeId FirstName LastName ReportsTo\n## 1          1    Andrew    Adams        NA\n## 2          2     Nancy  Edwards         1\n## 3          3      Jane  Peacock         2\n## 4          4  Margaret     Park         2\n## 5          5     Steve  Johnson         2\n## 6          6   Michael Mitchell         1\n# load dplyr for tidy manipulation in this chapter\nlibrary(dplyr)\n\n# create edgelist\n(orgchart_edgelist1 <- chinook_employees |> \n  dplyr::inner_join(chinook_employees, \n                    by = c(\"EmployeeId\" = \"ReportsTo\")))##   EmployeeId FirstName.x LastName.x ReportsTo EmployeeId.y FirstName.y LastName.y\n## 1          1      Andrew      Adams        NA            2       Nancy    Edwards\n## 2          1      Andrew      Adams        NA            6     Michael   Mitchell\n## 3          2       Nancy    Edwards         1            3        Jane    Peacock\n## 4          2       Nancy    Edwards         1            4    Margaret       Park\n## 5          2       Nancy    Edwards         1            5       Steve    Johnson\n## 6          6     Michael   Mitchell         1            7      Robert       King\n## 7          6     Michael   Mitchell         1            8       Laura   Callahan\n(orgchart_edgelist2 <- orgchart_edgelist1 |> \n  dplyr::select(from = FirstName.x, to = FirstName.y)) |> \n  dplyr::filter(!is.na(from) & !is.na(to))##      from       to\n## 1  Andrew    Nancy\n## 2  Andrew  Michael\n## 3   Nancy     Jane\n## 4   Nancy Margaret\n## 5   Nancy    Steve\n## 6 Michael   Robert\n## 7 Michael    Laura\nlibrary(igraph)\n\n# create orgchart graph\n(orgchart <- igraph::graph_from_data_frame(\n  d = orgchart_edgelist2\n))## IGRAPH 759aad2 DN-- 8 7 -- \n## + attr: name (v/c)\n## + edges from 759aad2 (vertex names):\n## [1] Andrew ->Nancy    Andrew ->Michael  Nancy  ->Jane     Nancy  ->Margaret Nancy  ->Steve    Michael->Robert  \n## [7] Michael->Laura\nlibrary(ggraph)\n\n# create management structure as dendrogram (tree)\nset.seed(123)\nggraph(orgchart, layout = 'dendrogram') + \n  geom_edge_elbow() +\n  geom_node_label(aes(label = name), fill = \"lightblue\") +\n  theme_void()"},{"path":"restructuring-data.html","id":"connecting-customers-through-sales-reps","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.1.2 Connecting customers through sales reps","text":"Now let’s try build graph based slightly complex definition connection. going connect Chinook’s customers based whether share support rep. First, let’s take look customers table.see SupportRepId field corresponds EmployeeId field chinook_employees table. can join tables get edgelist customers support reps. Let’s also create full names better reference.Now option creating two types graphs. First create graph data , using CustomerName RepName edgelist, relationship ‘customer ’. Let’s create graph, view Figure 4.2. see graph three distinct connected components, hub--spoke shape.\nFigure 4.2: Graph Chinook customers connected sales reps\nRecall original objective connect customers support rep. possible use graph indirectly, applying logic customers connected path graph. However, may wish ignore support reps completely graph make direct connections customers share support rep. , need joining previous cust_reps dataframe.join dataframe back chinook_customers dataframe, can get customer--customer connections via common support rep follows:Now interested creating pseudograph customers connected , remove rows Customer1 Customer2 .Now network edgelist can work , RepName available use edge property. Note relationships appear directions data set, can take care choosing represent undirected graph. Let’s build visualize graph, Figure 4.3. see graph consisting three complete subgraphs edges color coded support rep.\nFigure 4.3: Customer--customer network Chinook based customers sharing sales rep\nThinking ahead: Recall Section 2.1.2 complete graph graph every pair vertices connected edge. Can see follows shape graph Figure 4.2 transform data produce Figure 4.3, expect produce complete subgraphs? Can also see visually dense complete subgraphs ? look measurement density graphs later, complete graph always density 1.","code":"\nhead(chinook_customers)##   CustomerId FirstName    LastName SupportRepId\n## 1          1      Luís   Gonçalves            3\n## 2          2    Leonie      Köhler            5\n## 3          3  François    Tremblay            3\n## 4          4     Bjørn      Hansen            4\n## 5          5 František Wichterlová            4\n## 6          6    Helena        Holý            5\n# create customer to support rep edgelist\ncust_reps <- chinook_customers |> \n  dplyr::inner_join(chinook_employees, \n                    by = c(\"SupportRepId\" = \"EmployeeId\")) |> \n  dplyr::mutate(\n    CustomerName = paste(FirstName.x, LastName.x),\n    RepName = paste(FirstName.y, LastName.y)\n  ) |> \n  dplyr::select(RepName, CustomerName, SupportRepId)\n\n# view head\nhead(cust_reps)##         RepName          CustomerName SupportRepId\n## 1  Jane Peacock        Luís Gonçalves            3\n## 2 Steve Johnson         Leonie Köhler            5\n## 3  Jane Peacock     François Tremblay            3\n## 4 Margaret Park          Bjørn Hansen            4\n## 5 Margaret Park František Wichterlová            4\n## 6 Steve Johnson           Helena Holý            5\n# create igraph\ncust_rep_graph <- igraph::graph_from_data_frame(\n  d = cust_reps\n)\n\n# create customer and rep property for vertices\nV(cust_rep_graph)$Type <- ifelse(\n  V(cust_rep_graph)$name %in% cust_reps$RepName,\n  \"Rep\",\n  \"Customer\"\n)\n\n# visualize with color and name aesthetic\nset.seed(123)\nggraph(cust_rep_graph, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_label(aes(color = Type, label = name), size = 2) +\n  theme_void()\n# connect customers via common support rep\ncust_cust <- cust_reps |> \n  dplyr::inner_join(chinook_customers, by = \"SupportRepId\") |> \n  dplyr::mutate(Customer1 = CustomerName,\n                Customer2 = paste(FirstName, LastName)) |> \n  dplyr::select(Customer1, Customer2, RepName)\n\n# view head\nhead(cust_cust)##        Customer1         Customer2      RepName\n## 1 Luís Gonçalves    Luís Gonçalves Jane Peacock\n## 2 Luís Gonçalves François Tremblay Jane Peacock\n## 3 Luís Gonçalves   Roberto Almeida Jane Peacock\n## 4 Luís Gonçalves Jennifer Peterson Jane Peacock\n## 5 Luís Gonçalves   Michelle Brooks Jane Peacock\n## 6 Luís Gonçalves         Tim Goyer Jane Peacock\n# remove loop edges\ncustomer_network_edgelist <- cust_cust |> \n  dplyr::filter(\n    Customer1 != Customer2\n  ) \n\n# view head\nhead(customer_network_edgelist)##        Customer1         Customer2      RepName\n## 1 Luís Gonçalves François Tremblay Jane Peacock\n## 2 Luís Gonçalves   Roberto Almeida Jane Peacock\n## 3 Luís Gonçalves Jennifer Peterson Jane Peacock\n## 4 Luís Gonçalves   Michelle Brooks Jane Peacock\n## 5 Luís Gonçalves         Tim Goyer Jane Peacock\n## 6 Luís Gonçalves     Frank Ralston Jane Peacock\n# create igraph object\ncustomer_network <- igraph::graph_from_data_frame(\n  d = customer_network_edgelist,\n  directed = FALSE\n)\n\n# visualize\nset.seed(123)\nggraph(customer_network) +\n  geom_edge_link(aes(color = RepName), alpha = 0.3) +\n  geom_node_point(color = \"lightblue\", size = 6) +\n  theme_void()"},{"path":"restructuring-data.html","id":"common-purchases","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.1.3 Connecting customers through common purchases","text":"illustrate layer complexity reshaping data use graphs, let’s imagine want connect customers basis purchases common products. may wish set parameters relationship; example, connection might based minimum number common products purchased, give us flexibility around definition connection.need use three tables: chinook_customers, chinook_invoices chinook_items. associate given customer purchased item, need join three tables together. Let’s take quick look latter two.can regard TrackId item, using couple joins can quickly match customers items. possible customers may purchased item numerous times, interested work just need distinct customer track pairings.Similar previous example, can now use create undirected network two vertex entities: customer item.big network. Let’s visualize simply, Figure 4.4.\nFigure 4.4: Network connecting customers via items purchased\ncan see looking graph large number items one customer purchased. Therefore, items seem extraneous information particular use case. interested items , can instead create connections customers directly. similar way previous problem, can join cust_item table connect customers based common item purchases, remove links customer.issue data set count every instance common item purchase twice, customers opposite orders, double counting. , need group pairs customers irrelevant order ensure don’t double items.worked, see table cust_cust_itemjoin twice many rows cust_item_network.looks good. now can count many common items pair customers purchased.now ready construct customer--customer graph, Items edge property. can visualize edge color code indicating many common items purchased, Figure 4.5.\nFigure 4.5: Chinook customer--customer network based common item purchases\nwish, can restrict definition connection. example, may define ‘purchased least two items common’, Figure 4.6. can use subgraph() function igraph , result reveals graph two connected components, indicating two independent groups customers related according commonality music purchasing.\nFigure 4.6: Chinook customer--customer network based least two common items purchased\n","code":"\n# view some invoices\nhead(chinook_invoices, 3)##   InvoiceId CustomerId\n## 1         1          2\n## 2         2          4\n## 3         3          8\n# view some items\nhead(chinook_items, 3)##   InvoiceId TrackId\n## 1         1       2\n## 2         1       4\n## 3         2       6\n# generate distinct customer-item pairs\ncust_item <- chinook_customers |> \n  dplyr::inner_join(chinook_invoices) |> \n  dplyr::inner_join(chinook_items) |> \n  dplyr::mutate(CustName = paste(FirstName, LastName)) |> \n  dplyr::select(CustName, TrackId) |> \n  dplyr::distinct()\n\n# view head\nhead(cust_item, 3)##         CustName TrackId\n## 1 Luís Gonçalves    3247\n## 2 Luís Gonçalves    3248\n## 3 Luís Gonçalves     447\n# initiate graph object\ncustomer_item_network <- igraph::graph_from_data_frame(\n  d = cust_item,\n  directed = FALSE\n)\n\n# create vertex type\nV(customer_item_network)$Type <- ifelse(\n  V(customer_item_network)$name %in% cust_item$TrackId,\n  \"Item\",\n  \"Customer\"\n)\nset.seed(123)\nggraph(customer_item_network, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(aes(color = Type), size = 2) +\n  theme_void()\n# join customers to customers via common items\ncust_cust_itemjoin <- cust_item |> \n  dplyr::inner_join(cust_item, by = \"TrackId\") |> \n  dplyr::select(CustName1 = CustName.x, \n                CustName2 = CustName.y, TrackId) |> \n  dplyr::filter(CustName1 != CustName2)\n\n# view head\nhead(cust_cust_itemjoin)##        CustName1          CustName2 TrackId\n## 1 Luís Gonçalves     Edward Francis     449\n## 2 Luís Gonçalves Richard Cunningham    1157\n## 3 Luís Gonçalves Richard Cunningham    1169\n## 4 Luís Gonçalves      Astrid Gruber    2991\n## 5 Luís Gonçalves         Emma Jones     280\n## 6 Luís Gonçalves         Emma Jones     298\n# avoid double counting\ncust_item_network <- cust_cust_itemjoin |> \n  dplyr::group_by(Cust1 = pmin(CustName1, CustName2), \n                  Cust2 = pmax(CustName1, CustName2)) |> \n  dplyr::summarise(TrackId = unique(TrackId), .groups = 'drop')\n\n# view head\nhead(cust_item_network)## # A tibble: 6 × 3\n##   Cust1          Cust2           TrackId\n##   <chr>          <chr>             <int>\n## 1 Aaron Mitchell Alexandre Rocha    2054\n## 2 Aaron Mitchell Bjørn Hansen       1626\n## 3 Aaron Mitchell Enrique Muñoz      2027\n## 4 Aaron Mitchell Hugh O'Reilly      2018\n## 5 Aaron Mitchell Niklas Schröder     857\n## 6 Aaron Mitchell Phil Hughes        1822\n# check double size\nnrow(cust_cust_itemjoin)/nrow(cust_item_network)## [1] 2\n# count common items\ncust_item_network <- cust_item_network |> \n  dplyr::count(Cust1, Cust2, name = \"Items\") \n\n# view head\nhead(cust_item_network)## # A tibble: 6 × 3\n##   Cust1          Cust2           Items\n##   <chr>          <chr>           <int>\n## 1 Aaron Mitchell Alexandre Rocha     1\n## 2 Aaron Mitchell Bjørn Hansen        1\n## 3 Aaron Mitchell Enrique Muñoz       1\n## 4 Aaron Mitchell Hugh O'Reilly       1\n## 5 Aaron Mitchell Niklas Schröder     1\n## 6 Aaron Mitchell Phil Hughes         1\n# create undirected graph\ncusttocust_network <- igraph::graph_from_data_frame(\n  d = cust_item_network,\n  directed = FALSE\n)\n\n# visualize with edges color coded by no of items\nset.seed(123)\nggraph(custtocust_network) +\n  geom_edge_link(aes(color = ordered(Items)), alpha = 0.5) +\n  geom_node_point(color = \"lightblue\", size = 6) +\n  labs(edge_color = \"# of Common Items\") +\n  theme_void()\n# select edges that have Item value of at least 2\nedges <- E(custtocust_network)[E(custtocust_network)$Items >= 2]\n\n# create subgraph using these edges\ntwo_item_graph <- igraph::subgraph.edges(custtocust_network, \n                                         eids = edges)\n\n# visualise\nset.seed(123)\nggraph(two_item_graph, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(color = \"lightblue\", size = 6) +\n  theme_void()"},{"path":"restructuring-data.html","id":"approaches-using-python","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.1.4 Approaches using Python","text":"illustrate similar approaches Python, redo work Section 4.1.3. First, download various data sets.Now join three tables together, create FullName variable ensure don’t duplicate relationships:Now can create graph connections customers items visualize Figure 4.7.\nFigure 4.7: Visualization Chinook customer--item network customers red vertices items green vertices\nNow create customer--customer network based common item purchases, joins data sets remove connections customers.Now can drop duplicates based TrackId, count items pair customers, final edgelist:Now ready create visualize customer--customer network, Figure 4.8.\nFigure 4.8: Visualization Chinook customer--customer network based common item purchase\nwish restrict connections two common item purchases, can create subgraph based number items, Figure 4.9. experimentation parameter k networkx’s spring layout (determines optimal distance vertices) needed appropriately visualize two distinct connected components graph.\nFigure 4.9: Visualization Chinook customer--customer network based least two common item purchases\n","code":"import pandas as pd\nimport numpy as np\n\n# download chinook database tables\nchinook_customers = pd.read_csv(\n  \"https://ona-book.org/data/chinook_customers.csv\"\n)\nchinook_invoices = pd.read_csv(\n  \"https://ona-book.org/data/chinook_invoices.csv\"\n)\nchinook_items = pd.read_csv(\n  \"https://ona-book.org/data/chinook_items.csv\"\n)# join customers to invoices\njoined_tables = pd.merge(\n  chinook_customers,\n  chinook_invoices\n)\n\n# join result to items\njoined_tables = pd.merge(joined_tables, chinook_items)\n\n# create FullName\njoined_tables['FullName'] = joined_tables['FirstName'] + ' ' + \\\njoined_tables['LastName']\n\n# drop duplicates and view head\ncust_item_table = joined_tables[['FullName', 'TrackId']]\\\n.drop_duplicates()\ncust_item_table.head()##          FullName  TrackId\n## 0  Luís Gonçalves     3247\n## 1  Luís Gonçalves     3248\n## 2  Luís Gonçalves      447\n## 3  Luís Gonçalves      449\n## 4  Luís Gonçalves      451import networkx as nx\nfrom matplotlib import pyplot as plt\n\n# create networkx object\ncust_item_network = nx.from_pandas_edgelist(cust_item_table,\nsource = \"FullName\", target = \"TrackId\")\n\n# color items differently to customers\ncolors = [\"red\" if i in cust_item_table['FullName'].values else \"green\"\nfor i in cust_item_network.nodes]\n\n# visualize\nnp.random.seed(123)\nnx.draw_networkx(cust_item_network, node_color = colors, node_size = 2,\nedge_color = \"grey\", with_labels = False)\nplt.show()# merge customers on common track IDs\ncust_cust_table = pd.merge(cust_item_table, cust_item_table,\non = \"TrackId\")\n\n# rename columns\ncust_cust_table.rename(\n  columns={'FullName_x' :'CustName1', 'FullName_y' :'CustName2'},\n  inplace=True\n)\n\n# remove loop edges\ncust_cust_table = cust_cust_table[\n  ~(cust_cust_table['CustName1'] == cust_cust_table['CustName2'])\n]\n\n# view head\ncust_cust_table.head()##              CustName1  TrackId           CustName2\n## 4       Luís Gonçalves      449      Edward Francis\n## 5       Edward Francis      449      Luís Gonçalves\n## 11      Luís Gonçalves     1157  Richard Cunningham\n## 12  Richard Cunningham     1157      Luís Gonçalves\n## 17      Luís Gonçalves     1169  Richard Cunningham# drop duplicates\ncust_cust_table = cust_cust_table.drop_duplicates('TrackId')\n\n# count common items\ncust_cust_table = cust_cust_table.groupby(['CustName1', 'CustName2'], \nas_index = False).TrackId.nunique()\ncust_cust_table.rename(columns = {'TrackId': 'Items'}, inplace = True)\n\n# view head\ncust_cust_table.head()##          CustName1        CustName2  Items\n## 0   Aaron Mitchell    Enrique Muñoz      1\n## 1   Aaron Mitchell    Hugh O'Reilly      1\n## 2   Aaron Mitchell  Niklas Schröder      1\n## 3   Aaron Mitchell      Phil Hughes      1\n## 4  Alexandre Rocha   Aaron Mitchell      1# create networkx object\ncust_cust_network = nx.from_pandas_edgelist(cust_cust_table,\nsource = \"CustName1\", target = \"CustName2\", edge_attr = True)\n\n\n# visualize\nnp.random.seed(123)\nnx.draw_networkx(cust_cust_network, node_color = \"lightblue\",\nedge_color = \"grey\", with_labels = False)\nplt.show()# get edges with items >= 2\ntwoitem_edges = [i for i in list(cust_cust_network.edges) if \ncust_cust_network.edges[i]['Items'] >= 2]\n\n# create subgraph\ntwoitem_network = cust_cust_network.edge_subgraph(twoitem_edges) \n\n# visualize in FR (spring) layout\nnp.random.seed(123)\nlayout = nx.spring_layout(twoitem_network, k = 0.05)\nnx.draw_networkx(twoitem_network, node_color = \"lightblue\",\nedge_color = \"grey\", with_labels = False, pos = layout)\nplt.show()"},{"path":"restructuring-data.html","id":"doc-transform","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.2 Transforming data from documents for use in graphs","text":"second example, look extract information sits semi-structured documents convert information graph-like shape allow us understand relationships interest us. Semi-structured documents documents certain expected format can reliably identify important actors entities. legal contracts, financial statements types structured forms. extracting entities documents, can identify important relationships , co-publishing, financial transactions contractual obligations.illustrate , show extract information TV script way can determine characters spoken scene together, use information create network TV characters. use episode script hit TV comedy show Friends. full set scripts episodes Friends can found online https://fangj.github.io/friends/. learning example, focus character network first episode Friends. script first episode can found https://fangj.github.io/friends/season/0101.html. learned basic methods using first episode, end--chapter exercises encourage extension methods episodes.","code":""},{"path":"restructuring-data.html","id":"scraping-data-from-semi-structured-documents","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.2.1 Scraping data from semi-structured documents","text":"First, look obtain list numbered scenes characters scene, ‘scraping’ details online script. help us , use rvest R package, designed scraping information webpages.Let’s take look web code Season 1, Episode 1. can opening script webpage Google Chrome pressing Cmd+Option+C (Ctrl+Shift+C Windows) open Elements Console can view HTML code page side--side page . look like Figure 4.10.\nFigure 4.10: Viewing script Season 1, Episode 1 Friends Elements console open Google Chrome\nOne things can see immediately words precede colon interest us. fact, character names say something scene. also see lines contain string “Scene:” pretty reliable indicators scene boundaries.first thing get HTML code list vector HTML nodes represent different pieces formatting text document. Since contain separated lines spoken character, really helpful us work . let’s download HTML code break HTML nodes nice, tidy vector script content.generated named character vector contains lot different splitout parts script, importantly contains lines script, example:Now, generate something useful task, need create vector contains word ‘New Scene’ line represents beginning scene, name character line represents something spoken character. best format want .first thing need swap text string containing “Scene:” string “New Scene”. can quite simply using ifelse() nodes vector, use grepl() identify entries nodes contain string “Scene:”.worked nicely. Now, might also noticed , dialogue purposes, character names precede colon beginning line. might nice way extract names characters speaking parts scene (although might give us things preceded colons script want, can deal later).use regular expression syntax (regex) tell R looking anything beginning line preceding colon. use lookahead regex string follows: ^[-Za-z ]+(?=:).Let’s look string make sure know means. ^[-Za-z ]+ component means ‘find substring alphabetic text length including spaces beginning string’. part parentheses (?=:) known lookahead—means look ahead substring text find situations colon next character. therefore instructing R find string alphabetic text start line precedes colon return . use R package stringr function str_extract() regex syntax, go every entry nodes vector transform just first string text found colon. string found, return NA value. great us know , purpose dialogue, characters’ names always start nodes, certainly won’t miss just take first instance line. also, safety, mess scene breaks put vector.working, cleaning . example, want get rid NA values. also see take look character called ‘’ probably network. can also see phrases like ‘Written ’ dialogue characters, strings containing ‘’ involve combinations characters. can create special commands remove instances phrases42.Let’s assume cleaning done, nice vector contains either names characters speaking lines episode “New Scene” indicate crossing scene boundary. now just need convert vector simple dataframe two columns scene character. already character lists, really just need iterate nodes vector , entry, count number previous occurrences “New Scene” add one.can finalize dataframe putting two vectors together removing repeated characters scene. can also correct situations script starts New Scene can consistently format character names title case, account different case typing.","code":"\n# loading rvest also loads the xml2 package\nlibrary(rvest)\n\nurl_string <- \"https://fangj.github.io/friends/season/0101.html\"\n\n# get script as vector of HTML nodes\nnodes <- xml2::read_html(url_string) %>% \n      xml2::as_list() %>% \n      unlist()\n\n# view head\nhead(nodes)##                                                          html.head.title \n##  \"The One Where Monica Gets a New Roomate (The Pilot-The Uncut Version)\" \n##                                                               html.body1 \n##                                                                   \"\\n\\n\" \n##                                                             html.body.h1 \n## \"The One Where Monica Gets a New Roommate (The Pilot-The Uncut Version)\" \n##                                                               html.body3 \n##                                                                   \"\\n\\n\" \n##                                                           html.body.font \n##                                                                   \"\\n\\n\" \n##                                                         html.body.font.p \n##                               \"Written by: Marta Kauffman & David Crane\"\nnodes[16]##                                                       html.body.font.p \n## \"[Scene: Central Perk, Chandler, Joey, Phoebe, and Monica are there.]\"\n# swap lines containing the string 'Scene:' with 'New Scene' \nnodes_newscene <- ifelse(grepl(\"Scene:\", nodes), \"New Scene\", nodes)\n\n# check that there are at least a few 'New Scene' entries now\nsum(nodes_newscene == \"New Scene\")## [1] 15\nlibrary(stringr)\n\n# outside of 'New Scene' tags extract anything before : in every line \nnodes_char <- ifelse(nodes_newscene != \"New Scene\", \n                     stringr::str_extract(nodes_newscene, \n                                          \"^[A-Za-z ]+(?=:)\"), \n                     nodes_newscene)\n\n# check a sample\nset.seed(123)\nnodes_char[sample(30)]##  [1] NA           NA           NA           NA           NA           \"Monica\"     NA           NA          \n##  [9] NA           NA           NA           \"Chandler\"   NA           NA           NA           NA          \n## [17] NA           NA           NA           NA           NA           NA           NA           \"Joey\"      \n## [25] \"Phoebe\"     NA           \"New Scene\"  NA           NA           \"Written by\"\n# remove NAs\nnodes_char_clean1 <- nodes_char[!is.na(nodes_char)] \n\n# remove entries with \"all\", \" and \" or \"by\" irrelevant of the case\nnodes_char_clean2 <- nodes_char_clean1[\n  !grepl(\"all| and |by\", tolower(nodes_char_clean1))\n] \n\n# check \nnodes_char_clean2[sample(20)]##  [1] \"Chandler\"  \"Monica\"    \"Chandler\"  \"Monica\"    \"Phoebe\"    \"Joey\"      \"Phoebe\"    \"Joey\"      \"Monica\"   \n## [10] \"Monica\"    \"Chandler\"  \"Chandler\"  \"New Scene\" \"Ross\"      \"Joey\"      \"Chandler\"  \"Joey\"      \"Chandler\" \n## [19] \"Phoebe\"    \"Chandler\"\n# number scene by counting previous \"New Scene\" entries and adding 1\nscene_count <- c()\n\nfor (i in 1:length(nodes_char_clean2)) {\n  scene_count[i] <- sum(grepl(\"New Scene\", nodes_char_clean2[1:i])) + 1\n}\nlibrary(dplyr)\n\nresults <- data.frame(scene = scene_count, \n                      character = nodes_char_clean2) |> \n    dplyr::filter(character != \"New Scene\") |> \n    dplyr::distinct(scene, character) |>  \n    dplyr::mutate(\n      scene = scene - min(scene) + 1, # set first scene number to 1\n      character = character |> \n        tolower() |> \n        tools::toTitleCase() # title case\n    ) \n\n# check the first ten rows\nhead(results, 10)##    scene character\n## 1      1    Monica\n## 2      1      Joey\n## 3      1  Chandler\n## 4      1    Phoebe\n## 5      1      Ross\n## 6      1    Rachel\n## 7      1  Waitress\n## 8      2    Monica\n## 9      2  Chandler\n## 10     2      Ross"},{"path":"restructuring-data.html","id":"creating-an-edgelist-from-the-scraped-data","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.2.2 Creating an edgelist from the scraped data","text":"Now scraped data characters spoken numbered scene, can try build edgelist characters based whether spoken scene. can also consider adding weight edge based number scenes characters spoken., need generate set unique pairs list characters scene. illustrate, let’s look characters Scene 11:unique pairs scene formed starting first character list pairing follow, starting second pairing follows, final pair formed second--last last elements list. Scene 11 unique pairs :Rachel pairs: Rachel-Chandler, Rachel-Joey, Rachel-Monica, Rachel-PaulChandler pairs: Chandler-Joey, Chandler-Monica, Chandler-PaulJoey pairs: Joey-Monica, Joey-PaulMonica pairs: Monica-PaulSo write function called unique_pairs() accepts character vector arbitrary length forms pairs progressively way. can apply function every scene.Now let’s test new function Scene 11 characters:looks right. Now can easily generate edgelist episode applying new function scene.looks like worked. Now can just count number times distinct pair occurs order get edge weights (making sure ignore order characters).can now use edgelist create undirected network graph first episode Friends. First, create igraph object visualize using edge thickness based weights, Figure 4.11.\nFigure 4.11: Visualization network characters Episode 1 Friends, based characters speaking scene together\n","code":"\n(scene11_chars <- results |> \n  dplyr::filter(scene == 11) |> \n  dplyr::pull(character))## [1] \"Rachel\"   \"Chandler\" \"Joey\"     \"Monica\"   \"Paul\"\nunique_pairs <- function(char_vector = NULL) {\n  # ensure unique entries\n  vector <- as.character(unique(char_vector))\n  # create from-to column dataframe\n  df <- data.frame(char1 = character(), \n                   char2 = character(), \n                   stringsAsFactors = FALSE)\n  # iterate over each entry to form pairs\n  if (length(vector) > 1) {\n    for (i in 1:(length(vector) - 1)) {\n      char1 <- rep(vector[i], length(vector) - i) \n      char2 <- vector[(i + 1): length(vector)] \n      \n      df <- df %>% \n        dplyr::bind_rows(\n          data.frame(char1 = char1, \n                     char2 = char2, \n                     stringsAsFactors = FALSE) \n        )\n    }\n  }\n  #return result\n  df\n}\nunique_pairs(scene11_chars)##       char1    char2\n## 1    Rachel Chandler\n## 2    Rachel     Joey\n## 3    Rachel   Monica\n## 4    Rachel     Paul\n## 5  Chandler     Joey\n## 6  Chandler   Monica\n## 7  Chandler     Paul\n## 8      Joey   Monica\n## 9      Joey     Paul\n## 10   Monica     Paul\n# run unique_pairs by scene\nfriends_ep101 <- results |> \n  dplyr::group_by(scene) |> \n  dplyr::summarise(unique_pairs(character)) |> \n  dplyr::ungroup()\n\n# check\nhead(friends_ep101)## # A tibble: 6 × 3\n##   scene char1  char2   \n##   <dbl> <chr>  <chr>   \n## 1     1 Monica Joey    \n## 2     1 Monica Chandler\n## 3     1 Monica Phoebe  \n## 4     1 Monica Ross    \n## 5     1 Monica Rachel  \n## 6     1 Monica Waitress\n# create weight as count of scenes \nfriends_ep101_edgelist <- friends_ep101 |> \n  dplyr::select(-scene) |> \n  dplyr::mutate(from = pmin(char1, char2), to = pmax(char1, char2)) |> \n  dplyr::count(from, to, name = \"weight\")\n\n# check\nhead(friends_ep101_edgelist)## # A tibble: 6 × 3\n##   from     to       weight\n##   <chr>    <chr>     <int>\n## 1 Chandler Customer      1\n## 2 Chandler Joey          8\n## 3 Chandler Monica        6\n## 4 Chandler Paul          2\n## 5 Chandler Phoebe        5\n## 6 Chandler Rachel        6\n# create igraph object\nfriends_ep1_network <- igraph::graph_from_data_frame(\n  d = friends_ep101_edgelist,\n  directed = FALSE\n)\n\n# visualize\nset.seed(123)\nggraph(friends_ep1_network) +\n  geom_edge_link(aes(edge_width = weight), color = \"grey\", alpha = 0.5,\n                 show.legend = FALSE) +\n  geom_node_label(aes(label = name), color = \"blue\") +\n  scale_x_continuous(expand = expansion(mult = 0.1)) +\n  theme_void()"},{"path":"restructuring-data.html","id":"approaches-in-python","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.2.3 Approaches in Python","text":"repeat work previous sections Python, use BeautifulSoup package scrape web script first episode Friends.object friends_ep1 contains HTML code script webpage. Now need look string Scene: replace string <b>New Scene:<\/b>. clear soon put replacement string bold HTML tags.Now know viewing webpage inspecting HTML code characters’ names speaking scenes inside bold strong HTML tags. , first let’s get everything bold strong tags document, let’s match alphabetic string (including spaces) prior colon using regular expression syntax. include New Scene tags created last step.looks promising; now need get rid ‘’ entries entries containing ‘’.Now ready organize characters scene. First, scene count, create dataframe obtain unique character lists scene.Now need create function find unique pairs inside scene character list. ’s one way :looks right. Now need apply every scene gather results one DataFrame.Now can order across rows alphabetically count occurrences unique character pair get edge weights.need create visualize graph Episode 1 Friends, can seen Figure 4.12 edge thickness determined edge weight.\nFigure 4.12: Graph Friends character network Episode 1 edge width indicating number shared scenes\n","code":"import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://fangj.github.io/friends/season/0101.html\"\nscript = requests.get(url)\n\n# parse the html of the page\nfriends_ep1 = BeautifulSoup(script.text, \"html.parser\")originalString = \"Scene:\"\nreplaceString = \"<b>New Scene:<\/b>\"\nfriends_ep1_replace = BeautifulSoup(str(friends_ep1)\\\n.replace(originalString, replaceString))# use re (regular expressions) package\nimport re\n\n# find everything in bold tags with alpha preceding a colon\nsearchstring = re.compile(\"^[A-Za-z ]+(?=:)\")\nfriends_ep1_bold = friends_ep1_replace.find_all(['b', 'strong'], \ntext = searchstring)\n\n# extract the text and remove colons\nfriends_ep1_list = [friends_ep1_bold[i].text.replace(':', '') \nfor i in range(0, len(friends_ep1_bold) - 1)]\n\n# check first few unique values returned\nsorted(set(friends_ep1_list))[0:7]## ['All', 'Chandler', 'Chandler ', 'Customer', 'Frannie', 'Joey', 'Monica']friends_ep1_list2=[entry.strip() for entry in friends_ep1_list \nif \"All\" not in entry and \" and \" not in entry]\n\n# check first few entries\nsorted(set(friends_ep1_list2))[0:7]## ['Chandler', 'Customer', 'Frannie', 'Joey', 'Monica', 'New Scene', 'Paul']import pandas as pd\n\n# number scene by counting previous \"New Scene\" entries and adding 1\nscene_count = []\n\nfor i in range(0,len(friends_ep1_list2)):\n  scene_count.append(friends_ep1_list2[0:i+1].count(\"New Scene\"))\n  \n# create a pandas dataframe\ndf = {'scene': scene_count, 'character': friends_ep1_list2}\nscenes_df = pd.DataFrame(df)\n\n# remove New Scene rows\nscenes_df = scenes_df[scenes_df.character != \"New Scene\"]\n\n# get unique characters by scene\nscenes = scenes_df.groupby('scene')['character'].unique()\n\n# check\nscenes.head()## scene\n## 1    [Monica, Joey, Chandler, Phoebe, Ross, Rachel,...\n## 2    [Monica, Chandler, Ross, Rachel, Phoebe, Joey,...\n## 3                                             [Phoebe]\n## 4                               [Ross, Joey, Chandler]\n## 5                                       [Monica, Paul]\n## Name: character, dtype: objectimport numpy as np \n\n# define function\ndef unique_pairs(chars: object) -> pd.DataFrame:\n  # start with uniques\n  characters = np.unique(chars)\n  # create from-to list dataframe\n  char1 = []\n  char2 = []\n  df = pd.DataFrame({'char1': char1, 'char2': char2})\n  # iterate over each entry to form pairs\n  if len(characters) > 1:\n    for i in range(0, len(characters) - 1):\n      char1 = [characters[i]] * (len(characters) - i - 1)\n      char2 = [characters[i] for i in range(i + 1, len(characters))]\n      # append to dataframe\n      df2 = pd.DataFrame({'char1': char1, 'char2': char2})\n      df = df.append(df2, ignore_index = True)\n  return df\n\n# test on scene 11\nunique_pairs(scenes[11])##       char1   char2\n## 0  Chandler    Joey\n## 1  Chandler  Monica\n## 2  Chandler    Paul\n## 3  Chandler  Rachel\n## 4      Joey  Monica\n## 5      Joey    Paul\n## 6      Joey  Rachel\n## 7    Monica    Paul\n## 8    Monica  Rachel\n## 9      Paul  Rachel# start DataFrame\nchar1 = []\nchar2 = []\n\nedgelist_df = pd.DataFrame({'char1': char1, 'char2': char2})\n\nfor scene in scenes:\n  df = unique_pairs(scene)\n  edgelist_df = edgelist_df.append(df, ignore_index = True)# sort each row alphabetically\nedgelist_df = edgelist_df.sort_values(by = ['char1', 'char2'])\n\n# count by unique pair\nedgelist = edgelist_df.groupby(['char1', 'char2']).\\\napply(len).to_frame(\"weight\").reset_index()\n\n# check\nedgelist.head()##       char1     char2  weight\n## 0  Chandler  Customer       1\n## 1  Chandler      Joey       8\n## 2  Chandler    Monica       6\n## 3  Chandler      Paul       2\n## 4  Chandler    Phoebe       5import networkx as nx\nfrom matplotlib import pyplot as plt\n\n# create networkx object\nfriends_ep1_network = nx.from_pandas_edgelist(edgelist,\nsource = \"char1\", target = \"char2\", edge_attr=True)\n\n# visualize with edge weight as edge width\nnp.random.seed(123)\nweights = list(\n  nx.get_edge_attributes(friends_ep1_network, 'weight').values()\n)\nnx.draw_networkx(\n  friends_ep1_network, node_color = \"lightblue\", node_size = 60,\n  edge_color = \"grey\", with_labels = True, width = np.array(weights)\n)\nplt.show()"},{"path":"restructuring-data.html","id":"learning-exercises-3","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.3 Learning exercises","text":"","code":""},{"path":"restructuring-data.html","id":"discussion-questions-3","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.3.1 Discussion questions","text":"kinds data sources likely already exist graph-friendly form? ?two important things define intend transform data graph-friendly structure?Imagine working global law firm database three tables. One table lists employee location details including office home address. second table includes details clients employee working specialty areas focus client. third table lists education history employee including school major/subject area. List sketch different ways can think turn data graph.Pick one two answers Question 3 write two options structure graph . one option, consider graph employees vertices. consider graph least two different entity types vertices.Considering answers Question 4, might edges defined options? edges properties?examples Questions 6-10, discuss ways information extracted, reshaped loaded graph order serve useful analytic purpose.Loyalty card data retail company showing detailed information customer visits purchases.Data calendars large number company employees.Data automatic number plate scanning police cameras major roads large city.Data addresses deliveries made courier company.Electronic files legal contracts different organizations deliver specified services specified prices.","code":""},{"path":"restructuring-data.html","id":"data-exercises-3","chapter":"4 Restructuring Data for Use in Graphs","heading":"4.3.2 Data exercises","text":"Load park_reviews data set onadata package download internet43. data contains reviews collection Yelp users dog parks Phoenix, Arizona area.Create edgelist vertex set allows build graph showing parks users entity types. Include stars rating edge property ensure entity types distinguishable data.Use edgelist vertex set create graph object edge vertex properties.Visualize graph way differentiates users parks. Use visualization point users reviewed numerous dog parks.Generate subgraph consisting edges stars rating 5. Repeat visualization subgraph. Use identify frequently 5-star rated park. user reviewed one park 5-star rated?Go webpage containing script Season 1, Episode 2 Friends https://fangj.github.io/friends/season/0102.html.Repeat steps Section 4.2 scrape webpage obtain list scenes characters speaking scene. Watch additional cleaning might necessary script compared Episode 1 script.Use methods Section 4.2, including unique_pairs() function, create edgelist character network Episode 2 edge weight based number scenes characters spoke.Create graph Episode 2 visualize graph.Combine edgelist Episodes 1 2 adding weights character pair, create visualize new graph combines episodes.Extension: Try wrap previous methods function creates edgelist arbitrary Friends episode found https://fangj.github.io/friends/. Add cleaning commands unexpected formatting might see different scripts.Extension: Try run function Season 1 episodes Friends use results create visualize graph character network entire first season.","code":""},{"path":"paths-distance.html","id":"paths-distance","chapter":"5 Paths and Distance","heading":"5 Paths and Distance","text":"course earlier chapters, learned transform data graph-friendly structures create visualize graphs, started see concepts emerge informally now start formally describe support means mathematical definition measurement. example, seen vertices can connected directly indirectly vertices means single edge series edges. observed visually can greater ‘distance’ vertices graphs compared others, cases simply possible get one vertex another along edges graph.process moving vertex vertex along edges graph known graph traversal. Graph traversal extremely important topic underlies sort graph search algorithm. Graph search algorithms, turn, foundational determining optimal shortest paths pairs vertices, set shortest paths given vertex vertices. Shortest paths important definition distance diameter networks. Distance diameter useful intuitive measurements frequently used understanding ‘closeness’ ‘familiarity’ vertices overall network, determining different degrees influence vertices.chapter progressively look concepts, reader good understanding meaning derived, delve convenient functions R Python can calculate paths, distance diameter. , toward end chapter, look short case studies put concepts use analysis network office workers.early work chapter use graph call \\(G_{14}\\), shown Figure 5.1. graph contains 14 vertices labelled 1 14, path edges exists pair vertices. known connected graph.\nFigure 5.1: \\(G_{14}\\) graph\n","code":""},{"path":"paths-distance.html","id":"theory-of-graph-traversal-paths-and-distance","chapter":"5 Paths and Distance","heading":"5.1 Theory of graph traversal, paths and distance","text":"","code":""},{"path":"paths-distance.html","id":"traversal","chapter":"5 Paths and Distance","heading":"5.1.1 Paths and graph traversal","text":"Given two vertices \\(\\) \\(B\\) graph \\(G\\), path \\(\\) \\(B\\) series edges \\(G\\) begin \\(\\) end \\(B\\). example, \\(G_{14}\\) graph, following examples paths Vertex 9 Vertex 4:\\(9 \\longleftrightarrow 8 \\longleftrightarrow 4\\)\\(9 \\longleftrightarrow 7 \\longleftrightarrow 4\\)\\(9 \\longleftrightarrow 7 \\longleftrightarrow 8 \\longleftrightarrow 4\\)\\(9 \\longleftrightarrow 8 \\longleftrightarrow 7 \\longleftrightarrow 4\\)\\(9 \\longleftrightarrow 7 \\longleftrightarrow 6 \\longleftrightarrow 4\\)\\(9 \\longleftrightarrow 8 \\longleftrightarrow 7 \\longleftrightarrow 6 \\longleftrightarrow 4\\)\\(9 \\longleftrightarrow 7 \\longleftrightarrow 8 \\longleftrightarrow 7 \\longleftrightarrow 4\\)simple path acyclic path path vertex repeated. except last path simple paths Vertex 9 Vertex 4 \\(G_{14}\\). general, interested efficient paths vertices, interested simple paths graph. number general paths two vertices graph can infinite due possible repeated cycles, number simple paths two vertices graph always finite. refer path now , always mean simple path unless say otherwise.Playing around: Let’s reminisce Chapter 1 studied Bridges Königsberg problem. may recall Eulerian path Euler walk path visits every vertex graph least uses every edge graph exactly . Consider subgraphs \\(G_{14}\\) taking subsets vertices edges connect . many vertices largest subgraph can form \\(G_{14}\\) contains Eulerian Path? R user, consider using eulerian package verify answer.order determine whether path exists two vertices \\(\\) \\(B\\) graph, need able search traverse graph possible routes across edges, starting Vertex \\(\\) ending Vertex \\(B\\), passing vertices necessary. Let’s take example \\(G_{14}\\) graph. Let’s say want determine path exists Vertex 9 Vertex 5. human looks simple graph like , visually obvious path exists. However, mentioned earlier chapters, complex graphs visualized simply one, computer programs human. going need systematic programmable way searching graph path Vertex 9 Vertex 5.One option traverse graph using breadth-first approach. means search immediate neighbors Vertex 9, search immediate neighbors immediate neighbors, either eventually find Vertex 5 covered vertices concluded possible path Vertex 5. simple breadth-first algorithm achieve :immediate neighbors Vertex 9 Vertices 7, 8, 10 13. found Vertex 5, mark Vertex 9 neighbor vertices searched.unsearched immediate neighbors Vertices 7, 8, 10 13 Vertices 4, 6, 11, 12 14. still found Vertex 5, add vertices list vertices searched.unsearched immediate neighbors Vertices 4, 6, 11, 12 14 Vertices 1, 2, 3 5. found Vertex 5 therefore path exists Vertex 9 Vertex 5.Alternatively, traverse graph using depth-first approach. means choose neighboring vertex Vertex 9, find neighboring vertex neighboring vertex, keep going find unsearched neighboring vertices. happens, move back vertex look unsearched neighboring vertex. find one, repeat process. , move back another vertex either find Vertex 5 searched vertices conclude path Vertex 5 exist. simple depth-first algorithm achieve :select Vertex 10 immediate neighbor Vertex 9 mark Vertices 9 10 searched.select Vertex 11 unsearched immediate neighbor Vertex 10 mark searched.select Vertex 12 unsearched immediate neighbor Vertex 11 mark searched.find unsearched immediate neighbor Vertex 12. move back Vertex 11.find unsearched immediate neighbor Vertex 11. move back Vertex 10.find unsearched immediate neighbor Vertex 10. move back Vertex 9.select Vertex 8 unsearched immediate neighbor Vertex 9.select Vertex 4 unsearched immediate neighbor Vertex 8.select Vertex 3 unsearched immediate neighbor Vertex 4.find unsearched immediate neighbor Vertex 3. move back Vertex 4.select Vertex 5 unsearched immediate neighbor Vertex 4. found Vertex 5 therefore path exists Vertex 9 Vertex 5.appears breadth-first approach quicker computationally efficient depth-first approach, really depends specifics search. Breadth-first searches like stay close starting node, gradually increase search radius. Depth-first searches like ‘run away come back’. \\(G_{14}\\) example , network small nodes within short path Vertex 9, breadth-first search usually find target vertex quickly compared depth-first search, whose speed depend route takes. However, target nodes ‘far away’ network, depth-first approaches can efficient. average, however, computation time complexity search types similar44.Thinking ahead: Consider smallest number edges need traversed get Vertex 9 Vertex 5 \\(G_{14}\\) graph. Work think , try use depth-first search move Vertex 9 Vertex 5 different ways. depth-first search always return path smallest number edges? ? breadth-first search?","code":""},{"path":"paths-distance.html","id":"path-length-and-distance","chapter":"5 Paths and Distance","heading":"5.1.2 Path length and distance","text":"path vertex \\(\\) vertex \\(B\\) graph, length path sum weights edges traversed path. graph edge weight property, weight every edge assumed equal 1. Therefore, unweighted graph, length path number edges traversed path.Looking (simple) paths Vertex 9 Vertex 4 \\(G_{14}\\) enumerated Section 5.1.1, can see two paths length 2, three length 3, one length 4. Now let’s look new graph \\(G_{14W}\\) weighted edges Figure 5.2.\nFigure 5.2: \\(G_{14W}\\) weighted graph\nlist simple paths Vertex 9 Vertex 4 \\(G_{14W}\\) lengths follows:\\(9 \\longleftrightarrow 8 \\longleftrightarrow 4\\) (Length 5)\\(9 \\longleftrightarrow 7 \\longleftrightarrow 4\\) (Length 5)\\(9 \\longleftrightarrow 7 \\longleftrightarrow 8 \\longleftrightarrow 4\\) (Length 7)\\(9 \\longleftrightarrow 8 \\longleftrightarrow 7 \\longleftrightarrow 4\\) (Length 5)\\(9 \\longleftrightarrow 7 \\longleftrightarrow 6 \\longleftrightarrow 4\\) (Length 6)\\(9 \\longleftrightarrow 8 \\longleftrightarrow 7 \\longleftrightarrow 6 \\longleftrightarrow 4\\) (Length 6)distance vertices \\(\\) \\(B\\)—sometimes notated \\(d(, B)\\)—length shortest path \\(\\) \\(B\\). Note requirement unique shortest path, shortest path traversed one way graph. unweighted graph \\(G_{14}\\) distance Vertex 9 Vertex 4 2. weighted graph \\(G_{14W}\\) distance Vertex 9 Vertex 4 5. path exists \\(\\) \\(B\\), distance called ‘infinite’ denoted \\(\\infty\\) convention. \\(\\) \\(B\\) vertices undirected graph, \\(d(, B) = d(B, )\\). However, may true directed graph.Distance extremely important concept graphs many practical applications. physical networks like road rail networks, distance meant quite literally greater distances vertices usually translating greater time taken resources used traverse vertices. social networks, distance can relate ‘familiarity’ ‘commonality’ two individuals. Greater distance individuals network usually implies lower likelihood individuals know real life, lower likelihood information given one individual find way individuals. graphs represent knowledge interests individuals (‘likes’ social networks knowledge graphs), greater distance individual topic, event product usually implies individual less likely interested topic, event product. utility graph distance measures fields like transport, communications, marketing, sociology psychology therefore quite obvious.Distance weighted graphs needs treated care, particularly sociological psychological contexts. Often unweighted distance relevant weighted distance. example, edges weighted according ‘strength’ connection individuals, weighted distance two individuals might result sequence multiple edges low weights, even individuals directly connected edge higher weight. simple example Figure 5.3, weighted distance \\(\\) \\(B\\) 2, arises via path \\(\\longleftrightarrow C \\longleftrightarrow B\\), despite fact \\(\\) \\(B\\) adjacent vertices. important understand meaning ‘weight’ research context determining weighted unweighted distance appropriate.\nFigure 5.3: Distance needs treated care weighted graphs. case, weighted distance \\(\\) \\(B\\) arises path two edges, even though \\(\\) \\(B\\) adjacent graph.\n","code":""},{"path":"paths-distance.html","id":"shortest-path-algorithms","chapter":"5 Paths and Distance","heading":"5.1.3 Shortest path algorithms","text":"Due importance distance graphs, various algorithms developed calculate shortest paths. algorithms—Dijkstra’s algorithm Bellman-Ford algorithm—focus single source shortest path, calculates shortest path given vertex vertices graph. Others—Johnson’s algorithm Floyd-Warshall algorithm— focus pairs shortest path problem calculate shortest path pair vertices graph. Special algorithms also developed facilitate fast calculation shortest path specific pair vertices, * algorithm.Dijkstra’s algorithm perhaps well-known (established) shortest path algorithm, easiest explain. Let’s take look algorithm works using unweighted \\(G_{14}\\) graph illustrative example. Dijkstra’s algorithm accepts single initial vertex calculates distance vertex vertices graph. Let’s use Vertex 9 initial vertex. Dijkstra’s algorithm operates series iterative steps follows:assign tentative distance Vertex 9 zero, Vertex 9 vertices \\(\\infty\\). mark Vertex 9 searched.Move neighbors Vertex 9, calculate length path Vertex 9 neighbors update tentative distance length. case, give tentative distance 1 Vertices 7, 8, 10 13. mark vertices searched.next go Vertices 7, 8, 10 13 turn, marking one current proceed. current vertex, calculate length shortest path Vertex 9 unsearched neighbors current vertex pass current vertex. length smaller existing tentative distance, update tentative distance length. move Vertex 7 first, see two unsearched neighbors: Vertices 4 6. distance Vertex 9 vertices passing Vertex 7 2, less \\(\\infty\\), update tentative distances Vertex 9 Vertices 4 6 2.similar fashion update tentative distances Vertex 9 Vertices 11, 12 14 2.mark Vertices 4, 6, 11, 12 14 searched move vertices current vertices repeat process neighbors. way, update tentative distance Vertex 9 Vertices 1, 2, 3 5 3. mark Vertices 1, 2, 3 5 searched.now searched vertices graph, tentative distances Vertex 9 vertices now assigned final distances.Playing around: Try repeat process Dijkstra’s algorithm weighted graph \\(G_{14W}\\). vertex shortest distance Vertex 9 vertex longest distance?Single source shortest path algorithms like Dijkstra’s algorithm can used solve pairs distance problem simply repeating algorithm vertex graph. large graphs, however, can inefficient, explains alternative algorithms developed pairs problem45.","code":""},{"path":"paths-distance.html","id":"graph-diameter-and-density","chapter":"5 Paths and Distance","heading":"5.1.4 Graph diameter and density","text":"diameter graph \\(G\\) maximum distance pair vertices \\(G\\). Alternatively stated, longest shortest path vertices \\(G\\). graph connected graph, definition diameter infinite. Diameter usually useful measure connected graphs, studying connected subgraphs larger graphs.diameter social network intuitive measure overall ‘closeness’ individuals network. Networks smaller diameters can often considered ‘close-knit’ communities. However, care needs taken interpreting diameter network, particularly given measures may representative close-knit community . Common alternative metrics used assess overall network ‘closeness’ include:Average distance pairs verticesThe density network, defined number edges divided total possible number edges graph46. complete graph, example, density 1. Graphs lower density called sparse graphs.Consider two graphs Figure 5.4. first graph, diameter 5, second diameter 4. However, average distance vertices first graph 2.38, second graph 2.49. graphs density 0.2. Therefore, one measure regard first graph ‘closer’, another regard second graph closer, third measure regard .\nFigure 5.4: Two graphs illustrating closeness can measured different ways\nPlaying around: Graph distance diameter great interest everyday life. may know theory six degrees separation, suggests entire world connected graph distance two people 6. Alternatively stated, world connected graph diameter 6. Several industry-specific case studies arisen research just fun. first 1969 paper two psychologists (Travers & Milgram (1969)), used experiment chain letters determine average distance people population Nebraska Massachusetts 6.2. 2011 study Facebook graph (Ugander et al. (2011)) determined Facebook member network almost fully connected 99.91% vertices connected subgraph, average distance vertices 4.7. entertainment industry, Bacon number used denote distance individual actor Kevin Bacon, based participation movie TV production. academia, Erdös number used denote distance individual mathematician Paul Erdös. Bacon Erdös arisen central points highly active disciplines result high centrality network. look centrality next chapter, interested can find Bacon number actor visiting https://oracleofbacon.org/.","code":""},{"path":"paths-distance.html","id":"calculating-paths-distance-diameter-and-density","chapter":"5 Paths and Distance","heading":"5.2 Calculating paths, distance, diameter and density","text":"","code":""},{"path":"paths-distance.html","id":"calculating-in-r","chapter":"5 Paths and Distance","heading":"5.2.1 Calculating in R","text":"Thanks packages like igraph R, much easier calculate path, distance density metrics understand theory behind . section illustrate various functions can used easily calculate metrics. begin, let’s create graphs \\(G_{14}\\) \\(G_{14W}\\) previous section loading g14_edgelist data set onadata package downloading internet47.Let’s start creating weighted \\(G_{14W}\\) graph previous section.all_simple_paths() function igraph returns paths specified vertex, expects least igraph object vertex name vertex arguments. argument specifies vertex, function return paths vertices. Otherwise, return list containing paths specified vertex vertices. Note functions expect vertex name character string.see agrees manual calculations Section 5.1.1 whether edges weighted. function easy use case undirected graphs. using digraphs, additional argument called mode, specifying direction paths seeking. , , total accepted values argument.all_shortest_paths() function performs task previous function restricts output paths shortest length. function returns list objects, paths can found res element list.Note function returned shortest path according edge weights. ignore edge weights, simply set weights = NA. equivalent calculating shortest paths unweighted \\(G_{14}\\) graph.distances() function calculates distance graph. default, calculates distance pairs vertices returns results distance matrix., specific subsets vertices can selected function return matrix just subsets, mode argument can used digraphs. Weights can ignored setting weights = NA. algorithm used calculate shortest path automatically selected, can specified using algorithm argument.mean_distance() function calculates average distance pairs vertices. Note function consider edge weights.consider edge weights calculating average distance, take mean -diagonal elements distance matrix. easily done extracting lower upper triangles distance matrix.Graph diameter can calculated using diameter() function equal maximal element distance matrix. , weights can ignored setting weights = NA.graph connected, diameter() function return diameter largest connected component default. function farthest_vertices() return pair vertices either end diameter path, function get_diameter() return full diameter path.Finally, edge_density() function calculate density graph. can find formula edge density earlier footnote chapter , like, can verify manually \\(G_{14W}\\) graph.Playing around: distance() function igraph allows select three algorithms use: Dijkstra, Bellman-Ford Johnson. interested computation speed, try experiment large graph see one faster. microbenchmark package R useful running computation many times benchmarking average speed. try creating directed graph wikivote data set onadata package via internet48, calculating distance matrix using three algorithms benchmarking speed. found Johnson algorithm four times faster others. Don’t try , however, low memory slow CPU computer.","code":"\n# download the edgelist\ng14_edgelist <- read.csv(\"https://ona-book.org/data/g14_edgelist.csv\")\n\n# view head\nhead(g14_edgelist)##   from to weight\n## 1    9 10      4\n## 2   10 11      1\n## 3   11 12      1\n## 4   10 12      1\n## 5    9 13      3\n## 6   13 14      2\n# create weighted graph\n(g14w <- igraph::graph_from_data_frame(g14_edgelist, directed = FALSE))## IGRAPH e01a77d UNW- 14 18 -- \n## + attr: name (v/c), weight (e/n)\n## + edges from e01a77d (vertex names):\n##  [1] 9 --10 10--11 11--12 10--12 9 --13 13--14 9 --8  9 --7  8 --7  4 --6  4 --7  8 --4  6 --7  4 --1  4 --2 \n## [16] 4 --3  4 --5  1 --2\nigraph::all_simple_paths(g14w, from = \"9\", to = \"4\")## [[1]]\n## + 3/14 vertices, named, from e01a77d:\n## [1] 9 8 4\n## \n## [[2]]\n## + 4/14 vertices, named, from e01a77d:\n## [1] 9 8 7 4\n## \n## [[3]]\n## + 5/14 vertices, named, from e01a77d:\n## [1] 9 8 7 6 4\n## \n## [[4]]\n## + 4/14 vertices, named, from e01a77d:\n## [1] 9 7 8 4\n## \n## [[5]]\n## + 3/14 vertices, named, from e01a77d:\n## [1] 9 7 4\n## \n## [[6]]\n## + 4/14 vertices, named, from e01a77d:\n## [1] 9 7 6 4\nshortest_9to4 <- igraph::all_shortest_paths(g14w, from = \"9\", to = \"4\")\nshortest_9to4$res## [[1]]\n## + 3/14 vertices, named, from e01a77d:\n## [1] 9 8 4\n## \n## [[2]]\n## + 3/14 vertices, named, from e01a77d:\n## [1] 9 7 4\n## \n## [[3]]\n## + 4/14 vertices, named, from e01a77d:\n## [1] 9 8 7 4\nshortest_9to4_uw <- igraph::all_shortest_paths(g14w, \n                                               from = \"9\", to = \"4\", \n                                               weights = NA)\nshortest_9to4_uw$res## [[1]]\n## + 3/14 vertices, named, from e01a77d:\n## [1] 9 7 4\n## \n## [[2]]\n## + 3/14 vertices, named, from e01a77d:\n## [1] 9 8 4\ndistances(g14w)##    9 10 11 13 8  4  6  1 12 14 7  2  3  5\n## 9  0  4  5  3 2  5  5  6  5  5 3  6  6  7\n## 10 4  0  1  7 6  9  9 10  1  9 7 10 10 11\n## 11 5  1  0  8 7 10 10 11  1 10 8 11 11 12\n## 13 3  7  8  0 5  8  8  9  8  2 6  9  9 10\n## 8  2  6  7  5 0  3  3  4  7  7 1  4  4  5\n## 4  5  9 10  8 3  0  1  1 10 10 2  1  1  2\n## 6  5  9 10  8 3  1  0  2 10 10 2  2  2  3\n## 1  6 10 11  9 4  1  2  0 11 11 3  1  2  3\n## 12 5  1  1  8 7 10 10 11  0 10 8 11 11 12\n## 14 5  9 10  2 7 10 10 11 10  0 8 11 11 12\n## 7  3  7  8  6 1  2  2  3  8  8 0  3  3  4\n## 2  6 10 11  9 4  1  2  1 11 11 3  0  2  3\n## 3  6 10 11  9 4  1  2  2 11 11 3  2  0  3\n## 5  7 11 12 10 5  2  3  3 12 12 4  3  3  0\ndistances(g14w, v = \"9\", to = \"4\", weights = NA, \n          algorithm = \"bellman-ford\")##   4\n## 9 2\nmean_distance(g14w)## [1] 6.208791\n# get lower and upper triangles of weighted distance matrix \ndist <- distances(g14w)\noff_diag_dist <- dist[upper.tri(dist) | lower.tri(dist)] \n\n# calcuate mean\nmean(off_diag_dist)## [1] 6.208791\ndiameter(g14w)## [1] 12\nfarthest_vertices(g14w, weights = NA)## $vertices\n## + 2/14 vertices, named, from e01a77d:\n## [1] 11 1 \n## \n## $distance\n## [1] 5\nget_diameter(g14w, weights = NA)## + 6/14 vertices, named, from e01a77d:\n## [1] 11 10 9  8  4  1\nedge_density(g14w)## [1] 0.1978022"},{"path":"paths-distance.html","id":"calculating-in-python","chapter":"5 Paths and Distance","heading":"5.2.2 Calculating in Python","text":"functions path, distance, density diameter networkx package Python similar igraph R. First, let’s load weighted graph \\(G_{14W}\\).calculate simple paths two specified nodes, use all_simple_paths() function.calculate shortest paths two specified nodes, use all_shortest_paths() function. default, ignore edge weights.consider edge weights, use name weight attribute value weight argument.undirected graphs, shortest_path() function calculate single shortest path every pair vertices graph, returning paths dict. can also specify source target node subsets.directed graphs, various algorithm-specific functions available, dijkstra_path(), bellman_ford_path() many others.Distances can calculated using shortest_path_length() function, either produce distances focus specific source /target. return dict single source target provided, tuple otherwise.Average distance can calculated using average_shortest_path_length() function. Include weights argument get average weighted distance.Diameter can calculated using diameter() function, compute unweighted diameter.calculate weighted diameter, simply take maximum value weighted distances across pairs.Finally, edge density can calculated using density() function.","code":"import networkx as nx\nimport pandas as pd\n\ng14w_edges = pd.read_csv(\"https://ona-book.org/data/g14_edgelist.csv\")\n\ng14w = nx.from_pandas_edgelist(g14w_edges, source = \"from\", \ntarget = \"to\", edge_attr = True)simple_paths = nx.all_simple_paths(G = g14w, source = 9, target = 4)\n[path for path in simple_paths]## [[9, 8, 7, 4], [9, 8, 7, 6, 4], [9, 8, 4], [9, 7, 8, 4], [9, 7, 4], [9, 7, 6, 4]]shortest_paths_uw = nx.all_shortest_paths(G = g14w, source = 9, \ntarget = 4)\n[path for path in shortest_paths_uw]## [[9, 8, 4], [9, 7, 4]]shortest_paths_w = nx.all_shortest_paths(G = g14w, source = 9, \ntarget = 4, weight = 'weight')\n[path for path in shortest_paths_w]## [[9, 8, 4], [9, 7, 4], [9, 8, 7, 4]]shortest_paths_from9 = nx.shortest_path(g14w, source = 9, \nweight = 'weight')\n\n# view one path to vertex 11\nshortest_paths_from9.get(11)## [9, 10, 11]distances_from9 = nx.shortest_path_length(g14w, source = 9, \nweight = 'weight')\ndistances_from9## {9: 0, 8: 2, 13: 3, 7: 3, 10: 4, 4: 5, 14: 5, 6: 5, 11: 5, 12: 5, 1: 6, 2: 6, 3: 6, 5: 7}nx.average_shortest_path_length(g14w, weight = 'weight')## 6.208791208791209nx.diameter(g14w)## 5distances = nx.shortest_path_length(g14w, weight = 'weight')\nmax([max(distance[1].values()) for distance in distances])## 12nx.density(g14w)## 0.1978021978021978"},{"path":"paths-distance.html","id":"illustrative-6","chapter":"5 Paths and Distance","heading":"5.3 Examples of uses","text":"illustrate uses paths distance organizational settings, go couple examples. look real data workfrance graph introduced earlier Section 3.1.3. workfrance data set contains information captured experimental study office building France. Vertices data set represent individual employees, edges exist employees spent minimum amount time together place building. Let’s download data create graph R.built graph 211 vertices 932 edges. vertices dept property indicates department person works , edges mins property indicates number minutes spent together place. mins property considered measure strong connection two individuals , let’s make weight graph.","code":"\nset.seed(123)\n\n# download workfrance data sets\nworkfrance_edges <- read.csv(\n    \"https://ona-book.org/data/workfrance_edgelist.csv\"\n)\nworkfrance_vertices <- read.csv(\n    \"https://ona-book.org/data/workfrance_vertices.csv\"\n)\n\n# create graph\n(workfrance <- igraph::graph_from_data_frame(\n    d = workfrance_edges,\n    vertices = workfrance_vertices,\n    directed = FALSE\n))## IGRAPH bef979f UN-- 211 932 -- \n## + attr: name (v/c), dept (v/c), mins (e/n)\n## + edges from bef979f (vertex names):\n##  [1] 3  --159  253--3    3  --447  3  --498  3  --694  3  --751  3  --859  3  --908  14 --18   99 --14  \n## [11] 14 --441  520--14   14 --544  14 --653  14 --998  15 --120  15 --160  15 --162  15 --178  15 --259 \n## [21] 15 --261  15 --295  15 --353  15 --372  15 --464  15 --491  15 --498  15 --909  15 --1090 39 --18  \n## [31] 99 --18   429--18   488--18   527--18   18 --621  18 --650  753--18   18 --797  18 --845  99 --27  \n## [41] 160--27   259--27   295--27   27 --346  27 --1392 34 --156  34 --250  34 --259  34 --489  34 --615 \n## [51] 34 --694  34 --884  34 --959  219--38   38 --435  39 --71   39 --72   39 --99   118--39   39 --219 \n## [61] 39 --339  39 --407  39 --468  39 --871  39 --939  43 --285  43 --339  43 --809  43 --866  43 --985 \n## [71] 118--47   47 --366  47 --691  54 --74   54 --134  54 --158  54 --236  55 --110  55 --164  447--55  \n## + ... omitted several edges\nE(workfrance)$weight <- E(workfrance)$mins"},{"path":"paths-distance.html","id":"facilitating-introductions-in-a-workplace","chapter":"5 Paths and Distance","heading":"5.3.1 Facilitating introductions in a workplace","text":"simple use case shortest paths help connect individuals via common connections intermediaries. Let’s take two vertices workfrance graph different departments. Let’s select Vertices 3 55. Let’s see departments .Now let’s determine unweighted distance two employees network.two individuals unweighted distance 2 network, meaning can connect one intermediary. Now can use all_shortest_paths() function determine common intermediary .one common intermediary: employee 447. Therefore, employees 3 55 know , employee 447 may able introduce . Note may one suggestion intermediaries. example:case, consider using edge weights rank intermediary options, basis higher weights may indicate stronger connections. Let’s visualize two options looking subgraph edge weights Figure 5.5.\nFigure 5.5: Selecting intermediary according higher edge weights\nmay recommend employee 859 first basis higher edge weights therefore possibly greater familiarity employees 3 290.Playing around: may seen kind ‘introduction’ system work social networks LinkedIn, can suggest introduced another member via common connection. may also seen distance individual network, direct connections (distance 1) labelled 1st, connections connections (distance 2) labelled 2nd, . huge networks rarely calculate distances greater 3 suggest connection paths one intermediary massive computational cost . LinkedIn profile, may want go explore second order connections view intermediaries can connect . equivalent looking shortest paths individual network.","code":"\nV(workfrance)$dept[V(workfrance)$name %in% c(\"3\", \"55\")]## [1] \"DMI\" \"SSI\"\ndistances(workfrance, v = \"3\", to = \"55\", weights = NA)##   55\n## 3  2\nall_shortest_paths(workfrance, from = \"3\", to = \"55\", weight = NA)$res ## [[1]]\n## + 3/211 vertices, named, from bef979f:\n## [1] 3   447 55\n(paths <- all_shortest_paths(workfrance, from = \"3\", to = \"290\", \n                             weight = NA)$res)## [[1]]\n## + 3/211 vertices, named, from bef979f:\n## [1] 3   859 290\n## \n## [[2]]\n## + 3/211 vertices, named, from bef979f:\n## [1] 3   694 290\nsubgraph <- induced_subgraph(workfrance, \n                             vids = c(\"3\", \"290\", \"694\", \"859\"))\n\nggraph(subgraph) +\n    geom_edge_link(aes(edge_width = weight, label = weight), \n                   color = \"grey\", alpha = 0.7, \n                   show.legend = FALSE) +\n    geom_node_label(size = 3, fill = \"lightblue\", aes(label = name)) +\n    theme_void()"},{"path":"paths-distance.html","id":"workplace-distance","chapter":"5 Paths and Distance","heading":"5.3.2 Finding distant colleagues in a workplace","text":"Now, imagine professional event organized office building France, employees assigned one 21 tables ten people49. asked try help ensure tables contain good mix individuals avoid tables everyone knows well.start, check whether graph disconnected components.disconnected components graph. Let’s also look diameter graph get sense maximum possible distance pair individuals.first step, can pick 21 people unweighted distance 1 sit different table. certainly good starting point. can use neighbors() function igraph look vertex neighbors50.looks like employee 603 neighbors. Let’s find many.pick 20 neighbors employee 603 great starting point 21 tables. Let’s pick highest mins property (assuming represents closer relationship). can use inc() function get edges containing employee 603 select highest mins property.Now ‘closest’ 20 people employee 603. Let’s create edge subgraph extract vertices.can also look departments individuals:see considerable department similarity, makes sense. Now found first person table, want try make sure sit person nine people distance , minimize neighbors sitting table. Let’s start first employee 603, call Table 1. 21 tables employee 603 28 neighbors, might willing allow one neighbor sit Table 1. Let’s sit neighbor spent least minutes.sit employee 603 employee 77. Now can select third individual reasonable distance network employee 603 employee 77. Let’s look distances.use mean distances decide person furthest distance already selected.can select employee 502 third seat, iterate find remainder people table. iteration, make sure person arise twice calculations.Now let’s assign table property workfrance graph take look members Table 1 appear, Figure 5.6.\nFigure 5.6: Individuals selected Table 1 based optimizing distance\nlooks done good job maximizing distance network Table 1 selection. Let’s check average distance among employees Table 1.Given diameter graph 6, decided include pair individuals distance 1 table, mean distance 3.96 seems pretty good. Let’s look department mix ten people Table 1.seven departments represented table ten, seems another good indication diverse table. gives sense can use paths distance mathematical model familiarity network. interested continuing process fill tables, see exercises end chapter.","code":"\nis.connected(workfrance)## [1] TRUE\ndiameter(workfrance, weights = NA)## [1] 6\n# create vectors to capture name and no of neighbors\nv_name <- c()\nn_neighbors <- c()\n\n# capture name and no of neighbors for every vertex\nfor (v in V(workfrance)$name) {\n    v_name <- append(v_name, v)\n    n_neighbors <- append(n_neighbors, \n                          length(neighbors(workfrance, v)))\n}\n\n# find the max\nv_name[which.max(n_neighbors)]## [1] \"603\"\nn_neighbors[which.max(n_neighbors)]## [1] 28\nedges603 <- E(workfrance)[inc(\"603\")]\nsort603_mins <- sort(edges603$mins, decreasing = TRUE)\n(top_edges603 <- edges603[order(sort603_mins)][1:20])## + 20/932 edges from bef979f (vertex names):\n##  [1] 603--1392 603--1323 603--1362 859--603  603--954  603--1245 603--779  603--649  691--603  694--603 \n## [11] 706--603  603--725  487--603  420--603  428--603  387--603  401--603  603--272  290--603  346--603\nsubgraph603 <- igraph::subgraph.edges(workfrance, eid = top_edges603)\nV(subgraph603)$name##  [1] \"290\"  \"420\"  \"428\"  \"691\"  \"706\"  \"694\"  \"859\"  \"346\"  \"387\"  \"401\"  \"487\"  \"603\"  \"649\"  \"725\"  \"779\" \n## [16] \"954\"  \"1245\" \"1323\" \"1362\" \"1392\" \"272\"\nV(subgraph603)$dept##  [1] \"DG\"   \"DISQ\" \"DISQ\" \"DISQ\" \"DMCT\" \"DMI\"  \"DMI\"  \"DST\"  \"DST\"  \"DST\"  \"DST\"  \"DST\"  \"DST\"  \"DST\"  \"DST\" \n## [16] \"DST\"  \"DST\"  \"DST\"  \"DST\"  \"DST\"  \"SRH\"\nedges603[which.min(edges603$mins)]## + 1/932 edge from bef979f (vertex names):\n## [1] 77--603\n(distance603_77 <- distances(workfrance, v = c(\"603\", \"77\"), \n                             weights = NA))##     89 97 118 220 378 656 720 741 886 1204 1209 1492 290 502 47 119 198 213 253 267 270 343 366 420 428 445 478\n## 603  3  2   2   2   3   3   3   2   3    2    3    4   1   4  2   2   2   2   2   1   2   2   2   1   1   2   2\n## 77   2  1   2   1   2   2   2   2   2    1    2    3   2   4  3   3   3   3   3   2   3   3   3   2   2   3   3\n##     520 525 660 691 836 39 43 59 63 72 80 122 211 219 246 257 285 339 407 466 468 533 702 706 753 784 790 793\n## 603   2   2   2   1   2  2  3  3  3  2  2   2   3   3   2   2   3   2   2   3   2   4   3   1   2   2   3   3\n## 77    3   2   3   2   3  3  3  3  2  2  3   1   3   3   3   3   3   3   2   3   3   3   4   2   2   3   3   3\n##     809 866 871 889 894 923 939 3 15 34 54 74 79 99 120 131 134 141 156 158 159 160 162 165 178 183 193 205 236\n## 603   3   3   3   2   2   2   3 2  3  2  3  2  3  1   2   3   3   2   2   3   2   2   2   4   3   2   3   3   2\n## 77    3   3   3   2   3   3   2 2  2  2  2  1  2  2   2   3   3   2   2   2   1   2   1   3   3   2   2   3   3\n##     242 250 259 261 295 333 353 372 425 447 453 460 464 489 491 498 574 615 642 677 694 751 763 859 880 884 909\n## 603   4   3   2   2   2   2   3   2   4   3   2   3   3   3   3   3   3   3   3   3   1   3   3   1   3   3   2\n## 77    3   2   1   2   2   2   2   2   3   3   2   3   2   2   2   2   2   2   2   4   2   2   2   2   2   2   3\n##     959 1067 1090 1164 1238 1342 38 172 184 210 222 248 252 269 275 322 374 424 465 477 486 504 510 513 527 577\n## 603   3    2    3    2    3    2  4   3   3   1   3   3   2   3   2   3   3   2   3   3   3   3   3   3   3   3\n## 77    2    2    3    3    2    1  3   4   4   2   4   4   3   4   3   3   4   3   4   4   3   4   4   4   3   4\n##     634 638 674 743 771 867 882 893 908 921 1485 27 71 77 147 215 346 387 401 426 429 487 488 580 582 603 649\n## 603   2   3   3   2   3   3   2   3   2   3    2  2  1  1   1   1   1   1   1   2   2   1   2   2   2   0   1\n## 77    3   4   4   3   4   4   3   4   3   3    3  2  2  0   2   1   1   2   2   2   1   2   2   2   2   1   1\n##     725 779 954 1245 1323 1362 1392 14 181 441 544 778 998 1260 106 245 435 440 117 197 200 413 432 461 475 496\n## 603   1   1   1    1    1    1    1  2   2   3   3   3   3    3   3   3   3   2   1   3   2   2   3   2   2   3\n## 77    2   2   2    2    2    2    2  3   3   4   4   3   4    4   3   3   2   2   2   3   3   3   3   3   3   4\n##     626 653 874 977 1414 18 232 272 531 621 650 744 797 845 55 110 164 173 628 970 985\n## 603   3   2   2   3    2  2   2   1   2   3   2   2   2   2  2   3   3   3   2   4   3\n## 77    4   2   3   4    3  2   3   2   3   3   3   3   3   3  3   4   3   3   2   4   2\nwhich.max(colMeans(distance603_77))## 502 \n##  14\ntable1 <- c(\"603\", \"77\", \"502\")\n\n# complete remainder of table\nfor (i in 4:10) {\n    # get distances from already chosen table members\n    dists <- distances(workfrance, v = table1, weights = NA) \n    # get vertices with maximum mean distance excluding already chosen\n    new <- dists |>\n        as.data.frame() |> \n        subset(select = !(colnames(dists) %in% table1)) |> \n        colMeans() |> \n        which.max() |> \n        names()\n    # add first of these to table\n    table1[i] <- new[1]\n}\n\n# view complete table 1\ntable1##  [1] \"603\" \"77\"  \"502\" \"533\" \"496\" \"970\" \"165\" \"677\" \"977\" \"38\"\n# add a table property to workfrance graph\nV(workfrance)$table <- ifelse(\n    V(workfrance)$name %in% table1, \"1\", \"2-21\"\n)\n\n# visualize\nset.seed(123)\nggraph(workfrance, layout = \"fr\") +\n    geom_edge_link(color = \"grey\", alpha = 0.7) +\n    geom_node_point(size = 4, aes(color = as.factor(table))) +\n    labs(color = \"Table\") +\n    theme_void()\nmean(distances(workfrance, v = table1, to = table1, weights = NA))## [1] 3.96\nV(workfrance)$dept[V(workfrance)$name %in% table1]##  [1] \"DG\"   \"DMCT\" \"DMI\"  \"DMI\"  \"DSE\"  \"DST\"  \"DST\"  \"SFLE\" \"SFLE\" \"SSI\""},{"path":"paths-distance.html","id":"learning-exercises-4","chapter":"5 Paths and Distance","heading":"5.4 Learning exercises","text":"","code":""},{"path":"paths-distance.html","id":"discussion-questions-4","chapter":"5 Paths and Distance","heading":"5.4.1 Discussion questions","text":"Define meant graph traversal describe important topic network analysis.Describe meant path, simple path shortest path. Provide examples using \\(G_{14}\\) \\(G_{14W}\\) graph.Describe difference breadth-first depth-first graph search algorithm. Name example .Define distance two vertices graph. Using \\(G_{14}\\) \\(G_{14W}\\), give example vertices distance 3, list shortest paths vertices.Define diameter connected graph. List path whose distance equal diameter \\(G_{14}\\).Define density graph. mean graph sparse?graph \\(G\\) four vertices \\(\\), \\(B\\) , \\(C\\), \\(D\\), edges \\(\\) vertices, calculate density \\(G\\).Write procedure describe Dijkstra’s algorithm calculate shortest paths Vertex 7 \\(G_{14}\\).Manually determine simple paths shortest paths Vertices 1 13 \\(G_{14}\\).Manually determine shortest weighted paths Vertices 1 13 \\(G_{14W}\\).","code":""},{"path":"paths-distance.html","id":"data-exercises-4","chapter":"5 Paths and Distance","heading":"5.4.2 Data exercises","text":"Use appropriate functions determine simple paths shortest paths Vertices 1 13 \\(G_{14}\\) check output agrees manual calculation Discussion Question 9.Use appropriate functions determine shortest weighted paths Vertices 1 13 \\(G_{14W}\\) check output agrees manual calculation Discussion Question 10.Create subgraph \\(G_{14W}\\) consisting vertices 6 14. Use appropriate procedure calculate unweighted weighted distances pairs vertices subgraph.Calculate unweighted weighted diameter subgraph previous exercise, calculate density.Exercises 5 7, load friends_tv_edgelist data set onadata package download internet51. full network characters appearing every season Friends TV series based characters speaking scene together. edge weight according number scenes characters spoke together, ignore set exercises simply create unweighted, undirected graph edgelist.Check whether Friends network connected calculate diameter network. Find path length equal diameter. diameter surprisingly small network size. might ?Find simple paths Billy Crystal Mr Bing Janice Mrs Bing. Try calculate proportion connections distance 2 graph. results may help answer previous question.Calculate density network. Create subgraph consisting six main characters: Monica, Chandler, Phoebe, Ross, Rachel Joey. Calculate density subgraph. term use describe subgraph?‘clique’ graph subgraph complete (, vertices connected density 1). Can find clique Friends graph contain main characters52?Create new subgraph removing six main characters original graph. Check whether subgraph connected. can conclude ?Calculate largest diameter connected components new graph. Find pair characters associated diameter path. Find largest clique graph.Extension: Extend example Section 5.3.2 creating second table event. Remember second table include anyone selected Table 1. Explore results visualizing analyzing average distance Table 2 mix departments Table 2.Extension: Repeat process Question 11 try fill 21 tables event. Visualize results vertices color coded table number. Calculate mean distances table. notice anything interesting? Can think ways improve method?","code":""},{"path":"vertex-importance.html","id":"vertex-importance","chapter":"6 Vertex Importance and Centrality","heading":"6 Vertex Importance and Centrality","text":"follows much earlier work book vertices graph can provide rich information network, structure dynamics. sociology psychology contexts, particularly true, often vertices represent people. fact people play different roles different influences inside groups communities motivated centuries sociological psychological research, unsurprising concept vertex importance influence great interest study people organizational networks.importance influence precisely defined concepts, make real within context graphs networks need find sort mathematical definition . many visual graph layouts, important influential vertices stronger roles overall connectivity usually positioned toward center group vertices53. Intuitively therefore, use term ‘centrality’ describe importance influence vertex connected structure graph.chapter go common types centrality can measured vertices graphs, discuss can interpreted context people organizational networks. show calculate different types centrality R Python illustrate centrality graph visualizations. reprise example French office building network previous chapter illustrate utility centrality network analysis.chapter use \\(G_{14}\\) graph introduced previous chapter, undirected unweighted graph. centrality measures valid easily calculated directed graphs, depend defining direction edges consider. Figure 6.1 shows \\(G_{14}\\) graph four vertices interest colored differently vertices.\nFigure 6.1: \\(G_{14}\\) graph four vertices interest colored differently\n","code":""},{"path":"vertex-importance.html","id":"vertex-centrality-measures-in-graphs","chapter":"6 Vertex Importance and Centrality","heading":"6.1 Vertex centrality measures in graphs","text":"look \\(G_{14}\\) graph Figure 6.1, see colored nodes seem occupy prominent roles connective structure graph. removed Vertex 9, example, split graph three disconnected components. Vertex 4 seems connected lot immediate neighbors, also split graph removed , leaving behind isolates54. Vertex 7 seems occupy stealthy position efficiently reach vertices, Vertex 8 seems sit three probably can’t ignored reason alone.vertices represented people organization? departure Vertex 4 mean Vertices 1, 2, 3 5 lose entire connection remainder organization? departure Vertex 9 split organization terms flow work? wanted distribute important information across organization means connections, vertex good place start? understanding centrality can start appreciate possible impact changes network, identify important influential actors network.","code":""},{"path":"vertex-importance.html","id":"degree-centrality","chapter":"6 Vertex Importance and Centrality","heading":"6.1.1 Degree centrality","text":"degree centrality valence vertex \\(v\\) number edges connected \\(v\\). Alternatively stated, unweighted undirected graph simply number neighbors \\(v\\) number vertices distance 1 \\(v\\). example, degree centrality Vertex 8 \\(G_{14}\\) 3, Vertex 4 7. difficult see Vertex 4 highest degree centrality \\(G_{14}\\).Degree centrality measure immediate connection network. interpreted immediate reach social network. precise interpretation depends strongly nature connection. network academic co-authoring, someone high degree centrality collaborated directly larger number academics. French office building network Section 5.3, someone high degree centrality likely well-known socially greater number colleagues.Related degree centrality ego size. \\(n\\)-th order ego network given vertex \\(v\\) set including \\(v\\) vertices distance \\(n\\) \\(v\\). \\(n\\)-th order ego size number vertices \\(n\\)-th order ego network. \\(G_{14}\\), Vertex 8 1st order ego size 4, 2nd order ego size 11, third order ego size 14 (entire graph). easily follows 1st order ego size vertex one greater degree centrality vertex.","code":""},{"path":"vertex-importance.html","id":"closeness-centrality","chapter":"6 Vertex Importance and Centrality","heading":"6.1.2 Closeness centrality","text":"closeness centrality vertex \\(v\\) connected graph inverse sum distances \\(v\\) vertices. Let’s take moment understand better looking example. calculate closeness centrality Vertex 8 \\(G_{14}\\). Vertex 8 following distances vertices:Distance 1 vertices 4, 7 9Distance 2 vertices 1, 2, 3, 5, 6, 10 13Distance 3 vertices 11, 12 14The sum distances 26, inverse 26 0.038. Inverting distance means lower total distances generate higher closeness centrality. Therefore, vertex highest closeness centrality efficient reaching vertices graph. Vertex 8 one highest closeness centralities \\(G_{14}\\), Vertex 7 slightly higher closeness centrality, additional direct edge Vertex 6 gives slightly lower total distance 25 vertices, therefore slightly higher closeness centrality 0.04.Closeness centrality measure efficiently entire graph can traversed given vertex. particularly valuable study information flow. social networks, information shared high closeness centrality likely reach entire network efficiently. French office building network Section 5.3, high closeness centrality may better choices efficiently spreading message social interactions word--mouth.","code":""},{"path":"vertex-importance.html","id":"betweenness-centrality","chapter":"6 Vertex Importance and Centrality","heading":"6.1.3 Betweenness centrality","text":"betweenness centrality vertex \\(v\\) calculated taking pair vertices \\(x\\) \\(y\\), calculating number shortest paths \\(x\\) \\(y\\) go \\(v\\), dividing total number shortest paths \\(x\\) \\(y\\), summing pairs vertices graph. can use following process manually calculate Vertex 8 \\(G_{14}\\):look pairs Vertices 9 14, conclude Vertex 8 shortest paths vertices (betweenness centrality: 0).Similarly Vertices 1 7 conclude Vertex 8 shortest paths either (betweenness centrality: 0).Now look paths Vertex 7 Vertices 9 14, conclude Vertex 8 shortest paths pairs Vertices 7 9 adjacent (betweenness centrality: 0).Now look paths Vertex 6 Vertices 9 14, conclude Vertex 8 shortest paths, shorter route Vertex 7 (betweenness centrality: 0).Finally, look pairs Vertices 1 5 Vertices 9 14, conclude 30 pairs two shortest paths, one goes Vertex 7 Vertex 8 (betweenness centrality: \\(0.5 \\times 30 = 15\\)).Summing , conclude betweenness centrality Vertex 8 \\(G_{14}\\) 15.Using similar logic, difficult reason Vertex 9 highest betweenness centrality \\(G_{14}\\). split graph either side Vertex 9, betweenness centralities zero sets vertices side, path vertices either side Vertex 9 must pass Vertex 9. 46 paths Vertices 1 8 Vertices 10 14, total betweenness centrality Vertex 9 46.Betweenness centrality measure important given vertex connecting pairs vertices graph. makes intuitive sense Vertex 9 highest betweenness centrality removal largest destructive effect overall connectivity \\(G_{14}\\), splitting disconnected graph three connected components. people networks, individuals higher betweenness centrality can regarded playing important roles ensuring overall connectivity network, removed network risks overall disconnection higher. strong applications studying effects departures organizations.Playing around: ’s worth thinking things previous chapter based new understanding degree, closeness betweenness centrality. example, certain types central vertices influence overall ‘closeness’ network? happen average distance edge density remove certain central vertices? Try playing around removing Vertices 4 (highest degree centrality), 7 (highest closeness centrality) 9 (highest betweenness centrality) \\(G_{14}\\) determining impact removals diameter, mean distance density.","code":""},{"path":"vertex-importance.html","id":"eigenvector-centrality","chapter":"6 Vertex Importance and Centrality","heading":"6.1.4 Eigenvector centrality","text":"Eigenvector centrality relative centrality prestige vertex measure connected vertex influential vertices. impossible define without little linear algebra.Recall Section 2.1.4 adjacency matrix \\(= (a_{ij})\\) unweighted graph \\(G\\) containing \\(p\\) vertices defined \\(a_{ij} = 1\\) \\(\\) \\(j\\) adjacent vertices \\(G\\) 0 otherwise. vector \\(x = (x_1, x_2, ...,x_p)\\) scalar value \\(\\lambda\\) considered eigenvector eigenvalue \\(\\) satisfy equation\\[\nAx = \\lambda{x}\n\\]\nrequire \\(x\\) can positive entries, unique solution exists equation maximum eigenvalue \\(\\lambda\\). take \\(x\\) \\(\\lambda\\) solution define eigenvector centrality vertex \\(v\\) \\[\n\\frac{1}{\\lambda}\\sum_{w \\G}a_{vw}x_w\n\\]solving system linear equations coefficients relate connectedness neighboring vertices, solution measure relative influence vertex function influences vertices connected . Vertices can high influence connected lot vertices low influence, connected small number highly influential vertices. Vertex 10 \\(G_{14}\\) eigenvector centrality 0.12, Vertex 2 eigenvector centrality 0.23. makes sense Vertex 2 connected Vertex 4, already know highest degree centrality network. Intuitively, shouldn’t hard appreciate Vertex 4 highest eigenvector centrality \\(G_{14}\\).directed graphs, eigenvector centrality gives rise interesting measures different types influence. example, imagine citation network certain authors regularly citing lot influential articles. authors known hubs, outgoing eigenvector centrality high. Hub score outgoing eigenvector centrality vertex. Meanwhile, authors high incoming eigenvector centrality frequently referenced hubs, authors known authorities. Authority score incoming eigenvector centrality vertex. types measures becoming increasingly adopted fields bibliometrics. Note undirected graphs hub score, authority score eigenvector centrality vertices identical.Playing around: looked impact edge weights centrality chapter. unusual consider edge weights centrality measures. Nonetheless, centrality measures approaches consider edge weights, topic ongoing research. Usually situations, edge weights transformed cost functions—example inverting —edges higher weights considered ‘preferable’ graph traversal. see mean, go back look \\(G_{14W}\\) weighted graph previous chapter. Pick pairs vertices see shortest path using sum weights edges, using sum inverse weights edges.","code":""},{"path":"vertex-importance.html","id":"calculating-and-illustrating-vertex-centrality","chapter":"6 Vertex Importance and Centrality","heading":"6.2 Calculating and illustrating vertex centrality","text":"","code":""},{"path":"vertex-importance.html","id":"calculating-in-r-1","chapter":"6 Vertex Importance and Centrality","heading":"6.2.1 Calculating in R","text":"Degree centrality can calculated specific set vertices using degree() function igraph. default, degree centrality calculated vertices. Let’s load \\(G_{14}\\) graph demonstrate previous chapter.can see Vertex 4 degree centrality 7, agrees earlier manual calculations. Ego networks ego sizes can determined using ego() ego_size() functions.Closeness centrality calculated using closeness() function subset vertices. Let’s verify function returns results Vertices 7 8 manually calculated earlier.Betweenness centrality calculated using betweenness() function similar way. Let’s verify previous manual calculations Vertices 8 9.Finally, eigenvector centrality can calculated using eigen_centrality() function. Note returns list including various details computation55. see actual centralities, call vector element output list. Note also function scales values default maximum eigenvector centrality 1. avoid , set scale = FALSE.can see confirmation Vertex 4 highest eigenvector centrality.Playing around: centrality-like measures available igraph explore try understand. Examples include page_rank() Google’s measure importance webpage, hub_score() authority_score() directed networks. Consider testing data sets, like wikivote data set onadata package downloaded internet56.","code":"\nlibrary(igraph)\nlibrary(dplyr)\n\n# get g14 edgelist and ignore weights\ng14_edgelist <- read.csv(\"https://ona-book.org/data/g14_edgelist.csv\")\ng14_unweighted <- g14_edgelist |> \n  dplyr::select(-weight)\n\n# create g14 graph\ng14 <- igraph::graph_from_data_frame(g14_unweighted, directed = FALSE)\n\n# calculate degree centrality for all vertices\nigraph::degree(g14)##  9 10 11 13  8  4  6  1 12 14  7  2  3  5 \n##  4  3  2  2  3  7  2  2  2  1  4  2  1  1\n# 2nd order ego network of Vertex 4\nigraph::ego(g14, order = 2, nodes = \"4\")## [[1]]\n## + 9/14 vertices, named, from 8d4ffe9:\n## [1] 4 8 6 1 7 2 3 5 9\n# size of ego network\nigraph::ego_size(g14, order = 2, nodes = \"4\")## [1] 9\nigraph::closeness(g14, vids = c(\"7\", \"8\"))##          7          8 \n## 0.04000000 0.03846154\nigraph::betweenness(g14, v = c(\"8\", \"9\"))##  8  9 \n## 15 46\neigens <- igraph::eigen_centrality(g14, scale = FALSE)\neigens$vector##          9         10         11         13          8          4          6          1         12         14 \n## 0.30157876 0.11585270 0.04773223 0.09618665 0.37800315 0.55038069 0.29000589 0.22676118 0.04773223 0.02806617 \n##          7          2          3          5 \n## 0.44350955 0.22676118 0.16059484 0.16059484"},{"path":"vertex-importance.html","id":"calculating-in-python-1","chapter":"6 Vertex Importance and Centrality","heading":"6.2.2 Calculating in Python","text":", work previous chapter, centrality functions networkx similar igraph. degree() function calculates degree centrality vertices default, can specify list vertices.also methods called degree() Graph() object well in_degree() out_degree() DiGraph() objects networkx.ego network vertex can obtained using ego_graph() function. obtain 2nd order ego network Node 4:Closeness centrality calculated using closeness_centrality() function. However, networkx normalized multiplying result \\(n - 1\\) \\(n\\) number vertices graph. obtain non-normalized closeness centrality, necessary divide output function \\(n - 1\\).57Betweenness centrality calculated using betweenness_centrality() function. normalized default can set False arguments58. function calculates values nodes returns dict.Finally, eigenvector centrality calculated using eigenvector_centrality() function, dict returned similar betweenness_centrality().Closeness, betweenness eigenvector centrality calculated using incoming edges networkx digraphs. calculate outgoing equivalent, simply use reverse() method digraph make outgoing edges incoming vice versa.Playing around: networkx wide range centrality measures available. Visit Centrality section documentation59 look options. Many specific graph use cases different industries disciplines, see can understand even give try data set.","code":"import networkx as nx\nimport pandas as pd\n\n# download edgelist and remove weights\ng14_edgelist = pd.read_csv(\n  \"https://ona-book.org/data/g14_edgelist.csv\"\n)\ng14_undirected = g14_edgelist.drop('weight', axis = 1)\n\n# create undirected g14 graph\ng14 = nx.from_pandas_edgelist(g14_undirected, source = 'from', \ntarget = 'to')\n\n# calculate degree centrality of Vertices 4 and 9\nnx.degree(g14, [4, 9])## DegreeView({4: 7, 9: 4})g14.degree(4)## 7ego_4_2 = nx.ego_graph(g14, n = 4, radius = 2)\nego_4_2.nodes## NodeView((9, 8, 7, 4, 6, 1, 2, 3, 5))# get non-normalized closeness centrality for Vertex 7\nnorm_closeness = nx.closeness_centrality(g14, 7)\nnorm_closeness/(len(g14.nodes) - 1)## 0.04# get non-normalized betweenness centrality for Vertex 9\nbetween = nx.betweenness_centrality(g14, normalized = False)\nbetween.get(9)## 46.0eigen = nx.eigenvector_centrality(g14)\neigen.get(4)## 0.5503779695532801"},{"path":"vertex-importance.html","id":"illustrating-centrality-in-graph-visualizations","chapter":"6 Vertex Importance and Centrality","heading":"6.2.3 Illustrating centrality in graph visualizations","text":"reviewed Chapter 3, often make adjustments visualizing graphs illustrate certain aspects graph’s structure. example, highlight certain vertices color adjust thickness certain edges. want visually illustrate importance influence vertices graphs, often using centrality measures. two common methods adjust vertex size according centrality use centrality-related color scale. illustrate couple examples using ggraph R show options available.greatest efficiency, ’s always good idea add centralities vertex properties graphs. Let’s add now \\(G_{14}\\) graph.Now can create visualization map size vertices degree vertex property, Figure 6.2. Note scale_size() function useful setting scale suit visualization.\nFigure 6.2: \\(G_{14}\\) vertex size scaled according degree centrality\nAlternatively, Figure 6.3 shows graph vertex colors scaled according normalized eigenvector centrality. helps us see vertices left Vertex 9 \\(G_{14}\\) particularly influential connections compared right.\nFigure 6.3: \\(G_{14}\\) vertex size scaled according normalized eigenvector centrality\nPlaying around:. Play around different ways visualizing centralities vertices \\(G_{14}\\). Try using color, size . also try different types centrality see look graph changes substantially .","code":"\nV(g14)$degree <- degree(g14)\nV(g14)$betweenness <- betweenness(g14)\nV(g14)$eigen <- eigen_centrality(g14)$vector\nset.seed(123)\nggraph(g14, layout = \"lgl\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(aes(size = degree), color = \"lightblue\",\n                  show.legend = FALSE) +\n  scale_size(range = c(5,15)) +\n  geom_node_text(aes(label = name)) +\n  theme_void()\nset.seed(123)\nggraph(g14, layout = \"lgl\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(size = 6, aes(color = eigen)) +\n  scale_color_gradient(low = \"lightblue\", high = \"red\") +\n  geom_node_text(aes(label = name)) +\n  theme_void()"},{"path":"vertex-importance.html","id":"illustrative-7","chapter":"6 Vertex Importance and Centrality","heading":"6.3 Examples of uses","text":"section reprise workfrance unweighted graph previous chapter use illustrate common uses centrality measures. First, look find network-wide department level ‘superconnectors’, look find potential socially influential actors network. Let’s load workfrance graph .","code":"\nset.seed(123)\n\n# download workfrance data sets\nworkfrance_edges <- read.csv(\n  \"https://ona-book.org/data/workfrance_edgelist.csv\"\n)\nworkfrance_vertices <- read.csv(\n  \"https://ona-book.org/data/workfrance_vertices.csv\"\n)\n\n# create graph\nworkfrance <- igraph::graph_from_data_frame(\n    d = workfrance_edges,\n    vertices = workfrance_vertices,\n    directed = FALSE\n)"},{"path":"vertex-importance.html","id":"finding-superconnectors","chapter":"6 Vertex Importance and Centrality","heading":"6.3.1 Finding ‘superconnectors’","text":"Individuals high betweenness centrality people networks regarded ‘superconnectors’. Superconnectors can play valuable roles social integration new entrants network, can also present greater risk connective disruption leave network. Imagine new hire join DMI department workfrance network. want assign two ‘buddies’ individual help socially integrate workplace effectively. Given important individual assimilate department workplace whole, want select best two current employees assist goals. Let’s start DMI department first.order study DMI department self-contained network, create induced subgraph contains department connections , visualize network, labeling employee IDs, Figure 6.4.\nFigure 6.4: induced subgraph DMI department French workplace\nNow interested strongest role connecting others network. Let’s find top three individuals terms betweenness centrality.IDs top three superconnectors DMI department. Now can visualize graph , let’s adjust vertex size betweenness color top 3 superconnectors, Figure 6.5.\nFigure 6.5: DMI subgraph top three superconnectors identified\nsimilar way, can find superconnectors overall workfrance network.Figure 6.6, create graph workfrance network vertex size scaled betweenness centrality. color department can easily see departments superconnectors .\nFigure 6.6: French workplace graph top 3 superconnectors identified\ncan see upon examination top 3 organization-wide superconnectors different departments. Putting together, seem good choice buddies new hire employee 156 departmental integration employee 603 office-wide integration, although combination six individuals identified analysis probably decent choices.","code":"\n# create DMI subgraph\nDMI_vertices <- V(workfrance)[V(workfrance)$dept == \"DMI\"]\nDMI_graph <- igraph::induced.subgraph(workfrance, vids = DMI_vertices)\n\n# visualize\nset.seed(123)\nggraph(DMI_graph) +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(color = \"lightblue\", size = 4) +\n  geom_node_text(aes(label = name), size = 2) + \n  theme_void()\n# get IDs of top 3 betweenness centralities\nranked_betweenness_DMI <- DMI_graph |> \n  betweenness() |> \n  sort(decreasing = TRUE) \n\n(top3_DMI <- names(ranked_betweenness_DMI[1:3]))## [1] \"156\" \"74\"  \"884\"\n# add betweenness vertex property\nV(DMI_graph)$betweenness <- betweenness(DMI_graph)\n\n# add top three superconnectors property\nV(DMI_graph)$top3 <- ifelse(V(DMI_graph)$name %in% top3_DMI, 1, 0)\n\n# visualize\nset.seed(123)\nggraph(DMI_graph) +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(aes(color = as.factor(top3), size = betweenness),\n                  show.legend = FALSE) +\n  scale_color_manual(values = c(\"lightblue\", \"pink\")) +\n  geom_node_text(aes(label = name), size = 2) + \n  theme_void()\n# get IDs of top 3 betweenness centralities\nranked_betweenness_workfrance <- workfrance |> \n  betweenness() |> \n  sort(decreasing = TRUE) \n\n#get top 3\n(top3_workfrance <- names(ranked_betweenness_workfrance[1:3]))## [1] \"603\" \"99\"  \"322\"\n# add betweenness property\nV(workfrance)$betweenness <- betweenness(workfrance)\n\n# label only if a top 3 superconnector\nV(workfrance)$btwn_label <- ifelse(\n  V(workfrance)$name %in% top3_workfrance,\n  V(workfrance)$name, \n  \"\"\n)\n\n# visualize\nset.seed(123)\nggraph(workfrance) +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(aes(color = dept, size = betweenness),\n                  show.legend = FALSE) +\n  geom_node_text(aes(label = btwn_label), size = 4) + \n  theme_void()"},{"path":"vertex-importance.html","id":"identifying-influential-employees","chapter":"6 Vertex Importance and Centrality","heading":"6.3.2 Identifying influential employees","text":"Influential actors network can useful identify. organizational contexts, working influential employees can make difference certain initiatives changes can perceived employees. Influential employees can also useful efficiently tapping prevalent opinions across entire employee population. Imagine want identify individuals across organization participate important workshops problem solve critical operational initiatives. initiatives affect employees overall department level; therefore, ideal individuals influential within department well across entire organization., let’s look single department—DMI department—example. interested overall influence, mean equally interested employees lot connections employees ‘stealthily’ influential connected smaller number highly connected employees. best measure eigenvector centrality.First identify top three influential individuals DMI department measured eigenvector centrality working DMI subgraph.see two employee IDs common top 3 superconnectors. can also identify top 3 influential individuals across workfrance graph according eigenvector centrality.see one individual common top 3 superconnectors. Let’s visualize network can identify department mix top 3 influential individuals, Figure 6.7.\nFigure 6.7: French workplace graph top 3 influential vertices identified\ntime see three influential individuals department, suggesting department may strategically important one involve planned change initiatives.","code":"\n# working with lists so use purrr package\nlibrary(purrr)\n\n# get IDs of top 3 eigen centrality\nranked_eigen_DMI <- DMI_graph |> \n  eigen_centrality() |> \n  pluck(\"vector\") |> \n  sort(decreasing = TRUE)\n\n#get top 3\n(top3_DMI_eigen <- names(ranked_eigen_DMI[1:3])) ## [1] \"884\" \"156\" \"642\"\n# get IDs of top 3 eigen centrality\nranked_eigen_workfrance <- workfrance |> \n  eigen_centrality() |> \n  pluck(\"vector\") |> \n  sort(decreasing = TRUE)\n\n#get top 3\n(top3_workfrance_eigen <- names(ranked_eigen_workfrance[1:3])) ## [1] \"603\" \"649\" \"147\"\n# add betweenness property\nV(workfrance)$eigen <- eigen_centrality(workfrance)$vector\n\n# label only if a top3 superconnector\nV(workfrance)$eigen_label <- ifelse(\n  V(workfrance)$name %in% top3_workfrance_eigen,\n  V(workfrance)$name, \"\"\n)\n\n# visualize\nggraph(workfrance) +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(aes(color = dept, size = eigen),\n                  show.legend = FALSE) +\n  geom_node_text(aes(label = eigen_label), size = 4) + \n  theme_void()"},{"path":"vertex-importance.html","id":"learning-exercises-5","chapter":"6 Vertex Importance and Centrality","heading":"6.4 Learning exercises","text":"","code":""},{"path":"vertex-importance.html","id":"discussion-questions-5","chapter":"6 Vertex Importance and Centrality","heading":"6.4.1 Discussion questions","text":"Describe general concept vertex centrality networks important.Define degree centrality vertex \\(v\\) undirected graph \\(G\\) least two different ways. interpret degree centrality \\(v\\) organizational network? Manually calculate degree centrality Vertices 9, 10 11 \\(G_{14}\\).Draw 2nd order ego network Vertex 8 \\(G_{14}\\). 2nd order ego size Vertex 8?Define closeness centrality describe can interpreted. Manually calculate closeness centrality Vertex 10 \\(G_{14}\\) (feel free express answer fraction).Define betweenness centrality describe can interpreted. Manually calculate betweenness centrality Vertex 4 \\(G_{14}\\).Describe interpret eigenvector centrality vertex undirected graph \\(G\\).four main centrality measures—degree, closeness, betweenness eigenvector—write potential benefits knowing individuals rank highest people network.visualizing graphs, name ways illustrate vertex centrality.might centrality functions R Python actually output raw centrality measure? Give example . think matters? correct need ?Describe additional considerations calculation vertex centrality case directed graphs case weighted graphs.","code":""},{"path":"vertex-importance.html","id":"data-exercises-5","chapter":"6 Vertex Importance and Centrality","heading":"6.4.2 Data exercises","text":"Use appropriate function calculate degree centrality Vertices 9, 10 11 \\(G_{14}\\) verify output matches manual calculations earlier questions.Create visualize 2nd order ego network Vertex 8 \\(G_{14}\\).Use appropriate function calculate closeness centrality Vertex 10 \\(G_{14}\\) verify agrees manual calculation earlier questions.Use appropriate function calculate betweenness centrality Vertex 4 \\(G_{14}\\) verify agrees manual calculation earlier questions.Find mean eigenvector centrality vertices \\(G_{14}\\). twice, raw normalized.Visualize \\(G_{14}\\) size vertices scaled eigenvector centrality color scaled closeness centrality.questions 6 10, create undirected graph Facebook friendships schoolfriends_edgelist schoolfriends_vertices data sets onadata package downloaded internet60. Recall exercises Chapter 3 data contains information friendships students French high school. Make sure include reported friendships graph. lot isolates graph represents ‘known’ Facebook friendships, remove isolates proceeding61.Identify top 3 individuals Facebook connections.Determine 1st order 2nd order ego sizes individual Facebook connections. proportion total connected population included ego networks?Plot distribution degree centrality vertices using histogram density plot.Identify individuals maximum closeness centrality, betweenness centrality eigenvector centrality graph. Visualize network color coded class identify individuals . notice?principal high school deciding class placements next year, might information useful ?Extension: questions, create directed graph reported friendships data set, remove isolates .Identify individuals maximum -degree centrality maximum -degree centrality network. describe two individuals friendship dynamics high school? see anything common Facebook friendships?Calculate hub scores authority scores vertices. interpret ?Determine 1st order ego network individual highest authority score. Visualize directed network vertices color coded class. individual highest hub score. Can use visualizations describe individuals high authority/hub scores?","code":""},{"path":"community.html","id":"community","chapter":"7 Components, Communities and Cliques","heading":"7 Components, Communities and Cliques","text":"study group dynamics pretty ineffective able identify study important subgroups. Networks people often made subsets interact intensely among rest network, often important research analysis identify approximate subsets best possible can studied closely. complex networks, easy task. computational methods available us finding densely connected subsets vertices (usually called communities) iterative approximations make use heuristics62 rarely 100% accurate63. However, study networks organizational sciences, need high levels precision able draw valuable insights, therefore modern approximation techniques powerful tools us disposal.work done thus far book, already exposed subgraphs—used induced vertex subgraphs containing specified set vertices edges . However, situations able specify precise subset vertices interested . chapter look methods identify ‘detect’ subsets vertices based certain properties induced subgraphs vertices. start simpler problems identifying subsets vertices completely disconnected others, proceed look graph partitioning identification cliques communities vertices , though disconnected parts graph, higher levels density rest network.","code":""},{"path":"community.html","id":"theory-of-components-partitions-and-clusters","chapter":"7 Components, Communities and Cliques","heading":"7.1 Theory of components, partitions and clusters","text":"","code":""},{"path":"community.html","id":"connected-components-of-graphs","chapter":"7 Components, Communities and Cliques","heading":"7.1.1 Connected components of graphs","text":"learned earlier graph \\(G\\) connected path exists pair vertices \\(u\\) \\(v\\) \\(G\\). \\(G\\) directed graph, say \\(G\\) weakly connected connected viewed undirected graph. say \\(G\\) strongly connected path exists \\(u\\) \\(v\\) pair vertices \\(u\\) \\(v\\) \\(G\\). say \\(G\\) unilaterally connected path exists either \\(u\\) \\(v\\) \\(v\\) \\(u\\) pair vertices \\(u\\) \\(v\\) \\(G\\).connected component graph connected subset vertices, none connected vertex graph. example, undirected graph Figure 7.1 consists three connected components, three vertices. directed graph Figure 7.2, one component strongly connected (\\(\\longrightarrow B \\longrightarrow C \\longrightarrow \\)), one unilaterally connected (\\(D \\longrightarrow E \\longrightarrow F\\)) third weakly connected (\\(G \\longrightarrow \\longleftarrow H\\)).\nFigure 7.1: graph three connected components, containing three vertices\n\nFigure 7.2: directed graph three connected components, one strongly connected, one weakly connected one unilaterally connected\nConnected components disconnected graphs important identify many measures learned far break disconnected graphs. example, diameter disconnected graph theoretically defined infinite mathematical convention, useful practical measure. Usually want know diameter graph, want understand largest finite distance two vertices, translates diameter largest connected component graph. Therefore, calculations diameter disconnected graphs require us able identify largest connected component.difficult think algorithm can determine connected components graph. interested , see exercises end chapter.Playing around: Go back try find examples earlier chapters graphs disconnected, calculate diameter returned functions R Python packages. example, try Random Acts Pizza graph exercises end Chapter 3 graph reported friendships schoolfriends data set end previous chapter. diameter functions return graphs?","code":""},{"path":"community.html","id":"vertex-partitioning","chapter":"7 Components, Communities and Cliques","heading":"7.1.2 Vertex partitioning","text":"Often graphs connected, still want divide vertices mutually exclusive subgroups interest. division called partition graph. partition, vertices must one one subgroup. Partitions created making cuts graph.cut graph \\(G\\) set edges divide vertices \\(G\\) two disjoint subsets. number edges known size cut. Figure 7.3, edges e3, e4 e5 divide graph two disjoint connected sets represents cut size 3.minimum cut cut cut exists \\(G\\) smaller number edges. Figure 7.3, difficult see mimimum cuts size 1 can achieved either e1 e2. cases, minimum cuts divide graph connected component isolate64.\nFigure 7.3: Cuts defined edges split vertices graph disjoint subsets\npartition graph \\(G\\) obtained series cuts. example, make cut using e3, e5 e7 Figure 7.3, split graph two disjoint connected graphs. make cut using e1, split graph three disjoint sets: two disjoint connected sets isolate.directed graphs, cuts can defined according direction edges, weighted graphs, minimum cuts can determined weights edges. popular algorithm determining minimum cut graph Stoer-Wagner algorithm (Stoer & Wagner (1997)).","code":""},{"path":"community.html","id":"vertex-clustering-and-community-detection","chapter":"7 Components, Communities and Cliques","heading":"7.1.3 Vertex clustering and community detection","text":"Vertex clustering refers process partitioning graph order satisfy certain objective. commonly organizational network analysis, objective achieve high edge density vertices inside cluster, low edge density vertices different clusters. highly connected clusters usually referred communities process determining optimal communities graph known community detection community discovery65. Community detection unsupervised process. perform community detection graph, know advance many communities seek find size communities.commonly used (fastest) community detection algorithm Louvain algorithm. Louvain algorithm partitions graph subsets vertices trying maximize modularity graph. Modularity measures dense connections within subsets vertices graph comparing density expected random graph. unweighted undirected graph, modularity takes value \\(-0.5\\) \\(+1\\). value zero means vertices inside subgroups densely connected expected chance. higher modularity graph, connected vertices inside subgroups compared subgroups, therefore certain can subgroups represent genuine communities intense connection. approximate steps Louvain algorithm follows:algorithm starts first phase vertex community.Vertices moved communities, modularity calculated.algorithm reaches point vertex moves increase modularity, finishes first phase.second phase, communities resulting first phase aggregated form simpler pseudograph vertex represents community, loop edges vertex weighted total number edges inside community, edges vertices weighted total number edges communities66. heuristic step, vertices moved simpler graph aim improving modularity. , communities may combined modularity improved.first second phases repeated modularity improved.recently developed community detection algorithm improves Louvain algorithm Leiden algorithm. Leiden algorithm operates similarly Louvain, additional refinement process end first phase helps increase options improved modularity second phase. Leiden algorithm always achieve results good Louvain algorithm, many cases may detect communities better connected detected Louvain.Louvain Leiden algorithms good options performing community detection organizational context. However, numerous options, many available common data science packages. example, Girvan-Newman algorithm operates different way starting entire graph progressively removing important edges potentially reveal high modularity subgroups. detailed reference Louvain Leiden algorithms, see Traag et al. (2019) general insight broader range community detection algorithms, see Yang et al. (2016).One important aspect community detection often understood community detection algorithms classify vertices subgroups, offer direct insight nature subgroups. analytic techniques need applied help describe subgroups meaningful way. example, subgroups compared known ‘ground truth’ characteristics network (department workfrance graph class schoolfriends graph). examine using example later chapter.","code":""},{"path":"community.html","id":"cliques","chapter":"7 Components, Communities and Cliques","heading":"7.1.4 Cliques","text":"clique subset vertices undirected graph whose induced subgraph complete. , induced subgraph edge density 1. best understood intense possible type community undirected graph. maximal clique clique extended adding another vertex. largest clique clique greatest number vertices cliques graph.Figure 7.3, following maximal cliques: \\(B \\longleftrightarrow C\\), \\(\\longleftrightarrow C\\), \\(C \\longleftrightarrow E \\longleftrightarrow F\\) \\(C \\longleftrightarrow D \\longleftrightarrow F\\) vertex can added cliques without creating incomplete graph. \\(C \\longleftrightarrow E \\longleftrightarrow F\\) \\(C \\longleftrightarrow D \\longleftrightarrow F\\) largest cliques clique graph three vertices.Finding single maximal clique undirected graph complex problem can done quickly using standard search algorithm starting arbitrary vertex. However, finding maximal cliques specified size, maximal cliques, well finding largest cliques, problems whose complexity increases size density graph. Care taken attempting algorithms large graphs.Thinking ahead: Go back graph Zachary’s Karate Club Chapter 3. Can identify maximal cliques? think size largest clique? Thinking give sense hard largest clique problem might large graphs. use example later chapter.","code":""},{"path":"community.html","id":"finding-components-communities-and-cliques-using-r","chapter":"7 Components, Communities and Cliques","heading":"7.2 Finding components, communities and cliques using R","text":"","code":""},{"path":"community.html","id":"finding-connected-components-of-disconnected-graphs","chapter":"7 Components, Communities and Cliques","heading":"7.2.1 Finding connected components of disconnected graphs","text":"illustrate components() function igraph load schoolfriends edgelist data set earlier chapter. use reported friendships, create directed graph visualize Figure 7.4.\nFigure 7.4: directed graph reported friendships French high school\ncan see connected components disconnected graph. can use components() function classify vertices connected components. function generates list containing following vectors:membership, vector assigning vertex numbered componentcsize, returns size componentno, number connected componentsLet’s verify latter two:can use membership assign component property visualize vertices colored component, Figure 7.5.\nFigure 7.5: reported schoolfriends graph color coded (weakly) connected components\nPlaying around: Weakly connected components directed graph easier spot naked eye compared strongly connected components. ? Remind definition weakly connected components earlier chapter. Try repeat analysis visualize strongly connected components reported schoolfriends graph see difference.","code":"\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(dplyr)\n\n# get schoolfriends edgelist\nschoolfriends_edgelist <- read.csv(\n  \"https://ona-book.org/data/schoolfriends_edgelist.csv\"\n)\n\n# just use reported friendships\nschoolfriends_reported <- schoolfriends_edgelist |> \n  dplyr::filter(type == \"reported\")\n\n# create directed graph\nschoolfriends_rp <- igraph::graph_from_data_frame(\n  schoolfriends_reported\n)\n\n# visualize\nset.seed(123)\nggraph(schoolfriends_rp) + \n  geom_edge_link(color = \"grey\",\n                 arrow = arrow(length = unit(0.2, \"cm\"))) +\n  geom_node_point(size = 2, color = \"blue\") +\n  theme_void()\n# get weakly connected components (mode ignored if undirected)\nschoolfriends_components <- igraph::components(schoolfriends_rp, \n                                               mode = \"weak\")\n\n# how many components?\nschoolfriends_components$no## [1] 3\n# size of components\nschoolfriends_components$csize## [1] 128   3   3\n# assign component property\nV(schoolfriends_rp)$component <- schoolfriends_components$membership\n\n# visualize\nggraph(schoolfriends_rp) + \n  geom_edge_link(color = \"grey\", \n                 arrow = arrow(length = unit(0.2, \"cm\"))) +\n  geom_node_point(size = 2, aes(color = as.factor(component))) +\n  labs(color = \"Component\") +\n  theme_void()"},{"path":"community.html","id":"partitioning-and-community-detection-in-r","chapter":"7 Components, Communities and Cliques","heading":"7.2.2 Partitioning and community detection in R","text":"next examples, return Zachary’s Karate Club network Chapter 3. Let’s load visualize undirected graph mark known leading actors Mr Hi John larger vertices, Figure 7.6.\nFigure 7.6: Zachary’s Karate Club graph Mr Hi John indicated larger vertices\nMinimum cuts graphs can found using min_cut() function igraph. return number edges minimum cut, unless use value.= FALSE argument, case return information cut,see minimum cut exists size 1 Mr Hi Actor 12.Louvain community detection algorithm can run using cluster_louvain() function. weights can added argument, used default graph weight edge attribute (set weight = NA avoid ). produce list community groups. best way record resulting community membership assign vertex property using membership() function.visualizing communities, can see many size67:four detected communities varying sizes. , can color code visualize , Figure 7.7.\nFigure 7.7: Communities Zachary’s Karate Club detected Louvain algorithm\nPlaying around:. Try playing around community detection methods available igraph using karate example. different results? example, try cluster_edge_betweenness() (Girvan-Newman algorithm) cluster_infomap() methods begin cluster.","code":"\n# get karate edgelist and create undirected graph\nkarate_edges <- read.csv(\"https://ona-book.org/data/karate.csv\")\nkarate <- igraph::graph_from_data_frame(karate_edges, directed = FALSE)\n\n# color John A and Mr Hi differently\nV(karate)$leader <- ifelse(\n  V(karate)$name %in% c(\"Mr Hi\", \"John A\"), 1, 0\n)\n\n# visualize\nset.seed(123)\nggraph(karate, layout = \"fr\") +\n  geom_edge_link(color =  \"grey\") +\n  geom_node_point(aes(size = as.factor(leader)), color = \"blue\",\n                  show.legend = FALSE) +\n  theme_void()\nigraph::min_cut(karate, value.only = FALSE)## $value\n## [1] 1\n## \n## $cut\n## + 1/78 edge from 12c6c99 (vertex names):\n## [1] Mr Hi--Actor 12\n## \n## $partition1\n## + 1/34 vertex, named, from 12c6c99:\n## [1] Actor 12\n## \n## $partition2\n## + 33/34 vertices, named, from 12c6c99:\n##  [1] Mr Hi    Actor 2  Actor 3  Actor 4  Actor 5  Actor 6  Actor 7  Actor 9  Actor 10 Actor 14 Actor 15 Actor 16\n## [13] Actor 19 Actor 20 Actor 21 Actor 23 Actor 24 Actor 25 Actor 26 Actor 27 Actor 28 Actor 29 Actor 30 Actor 31\n## [25] Actor 32 Actor 33 Actor 8  Actor 11 Actor 13 Actor 18 Actor 22 Actor 17 John A\n# detect communities using Louvain\ncommunities <- cluster_louvain(karate)\n\n# assign as a vertex property\nV(karate)$community <- membership(communities)\nsizes(communities)## Community sizes\n##  1  2  3  4 \n## 11  6 11  6\nset.seed(123)\nggraph(karate, layout = \"fr\") +\n  geom_edge_link(color =  \"grey\") +\n  geom_node_point(aes(size = as.factor(leader), \n                      color = as.factor(community)),\n                  show.legend = FALSE) +\n  theme_void()"},{"path":"community.html","id":"finding-cliques-in-r","chapter":"7 Components, Communities and Cliques","heading":"7.2.3 Finding cliques in R","text":"cliques() max_cliques() function igraph identifies cliques maximal cliques, respectively, specified maximum minimum size desired. advisable specify size cliques interest otherwise long list might returned, including many single node cliques.largest_cliques() function finds largest cliques graph.see maximal cliques size 5 identified also largest cliques karate graph, 4 5 vertices common. function clique_num() returns size largest clique.","code":"\nmax_cliques(karate, min = 5, max = 5)## [[1]]\n## + 5/34 vertices, named, from 12c6c99:\n## [1] Actor 2  Mr Hi    Actor 4  Actor 3  Actor 14\n## \n## [[2]]\n## + 5/34 vertices, named, from 12c6c99:\n## [1] Actor 2 Mr Hi   Actor 4 Actor 3 Actor 8\nlargest_cliques(karate)## [[1]]\n## + 5/34 vertices, named, from 12c6c99:\n## [1] Actor 2  Mr Hi    Actor 4  Actor 3  Actor 14\n## \n## [[2]]\n## + 5/34 vertices, named, from 12c6c99:\n## [1] Actor 2 Mr Hi   Actor 4 Actor 3 Actor 8\nclique_num(karate)## [1] 5"},{"path":"community.html","id":"finding-components-communities-and-cliques-using-python","chapter":"7 Components, Communities and Cliques","heading":"7.3 Finding components, communities and cliques using Python","text":"","code":""},{"path":"community.html","id":"finding-connected-components-using-python","chapter":"7 Components, Communities and Cliques","heading":"7.3.1 Finding connected components using Python","text":"undirected graphs, networkx function number_connected_components() returns number connected components graph, connected_components() function returns vertices connected component.directed graphs, similar functions identify weakly strongly connected components. Let’s use reported friendships schoolfriends data set example.","code":"import pandas as pd\nimport networkx as nx\n\n# get schoolfriends edgelist\nschoolfriends_edges = pd.read_csv(\n  \"https://ona-book.org/data/schoolfriends_edgelist.csv\"\n)\n\n# use only reported friendships\nschoolfriends_reported = schoolfriends_edges[\n  schoolfriends_edges.type == \"reported\"\n]\n\n# create directed graph\nschoolfriends_rp = nx.from_pandas_edgelist(\n  schoolfriends_reported,\n  source = \"from\",\n  target = \"to\",\n  create_using=nx.DiGraph\n)\n\n# number of weakly connected components\nnx.number_weakly_connected_components(schoolfriends_rp)## 3# create component subgraphs \ncomponents = nx.weakly_connected_components(schoolfriends_rp)\n\nsubgraphs = [schoolfriends_rp.subgraph(component).copy() \nfor component in components]\n\n# size of subgraphs\n[len(subgraph.nodes) for subgraph in subgraphs]## [128, 3, 3]# view nodes in one of the smaller components\nsubgraphs[2].nodes## NodeView((366, 1485, 974))"},{"path":"community.html","id":"partitioning-and-community-detection-using-python","chapter":"7 Components, Communities and Cliques","heading":"7.3.2 Partitioning and community detection using Python","text":"networkx numerous algorithmic functions exploring edge cuts graphs, including find minimum edge cut. can consult reference documentation68 learn various functions available. Let’s use karate data set demonstrate find minimum cut.Various built-community detection algorithms available networkx.community module, Girvan-Newman edge betweenness algorithm. generates communities progressively removing edges highest edge betweenness centrality. returns iterator object first element result first edge removal, subsequent elements result progressive edge removal.see first split leads two communities, one around John around Mr Hi.cdlib package Python contains wide range community detection algorithms work networkx package, including Louvain Leiden algorithms well many others. example, create Louvain partition karate graph using cdlib.louvain_comms clustering object lot useful properties methods. see communities, use following:see four communities. modularity resulting community structure can calculated using newman_girvan_modularity() method.visualize network community structure, can create color mapping communities, Figure 7.8.\nFigure 7.8: Best Louvain partition Zachary’s Karate Club graph\nPlaying around: options community detection algorithms cdlib Python package extensive. Consider playing around different algorithms. example, try visualize community structure based Leiden algorithm. ’s also worth spending little time exploring technical documentation cdlib package69 see range methods available.","code":"# get karate edgelist\nkarate_edges = pd.read_csv(\"https://ona-book.org/data/karate.csv\")\n\n# create undirected network\nkarate = nx.from_pandas_edgelist(karate_edges, source = \"from\", \ntarget = \"to\")\n\n# find minimum cut\nnx.minimum_edge_cut(karate)## {('Actor 12', 'Mr Hi')}# get minimum edge cut size\nlen(nx.minimum_edge_cut(karate))## 1# get communities based on girvan-newman and sort by no of communities\ncommunities = sorted(\n  nx.community.girvan_newman(karate), \n  key = len\n)\n\n# view communities from first edge removal\npd.DataFrame(communities[0]).transpose()##            0         1\n## 0   Actor 22  Actor 16\n## 1   Actor 11  Actor 15\n## 2      Mr Hi  Actor 29\n## 3   Actor 17  Actor 27\n## 4    Actor 2  Actor 10\n## 5    Actor 7    John A\n## 6   Actor 13  Actor 19\n## 7    Actor 4  Actor 24\n## 8    Actor 6   Actor 3\n## 9    Actor 5  Actor 26\n## 10   Actor 8  Actor 32\n## 11  Actor 18  Actor 25\n## 12  Actor 20  Actor 31\n## 13  Actor 14  Actor 23\n## 14  Actor 12   Actor 9\n## 15      None  Actor 30\n## 16      None  Actor 28\n## 17      None  Actor 21\n## 18      None  Actor 33from cdlib import algorithms\nimport numpy as np\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt \n\n# get louvain partition which optimizes modularity\nlouvain_comms = algorithms.louvain(karate)pd.DataFrame(louvain_comms.communities).transpose()##            0         1         2         3\n## 0      Mr Hi   Actor 9  Actor 32   Actor 5\n## 1    Actor 2  Actor 31  Actor 28   Actor 6\n## 2    Actor 3  Actor 33  Actor 29   Actor 7\n## 3    Actor 4    John A  Actor 24  Actor 11\n## 4    Actor 8  Actor 15  Actor 26  Actor 17\n## 5   Actor 12  Actor 16  Actor 25      None\n## 6   Actor 13  Actor 19      None      None\n## 7   Actor 14  Actor 21      None      None\n## 8   Actor 18  Actor 23      None      None\n## 9   Actor 20  Actor 30      None      None\n## 10  Actor 22  Actor 27      None      None\n## 11  Actor 10      None      None      Nonelouvain_comms.newman_girvan_modularity()## FitnessResult(min=None, max=None, score=0.4188034188034188, std=None)import matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom matplotlib.colors import ListedColormap, LinearSegmentedColormap\n\n# create dict with labels only for Mr Hi and John A\nnode = list(karate.nodes)\nlabels = [i if i == \"Mr Hi\" or i == \"John A\" else \"\" \\\nfor i in karate.nodes]\nnodelabels = dict(zip(node, labels))\n\n# create and order community mappings\ncommunities = louvain_comms.to_node_community_map()\ncommunities = [communities[k].pop() for k in node]\n\n# create color map\npastel2 = cm.get_cmap('Pastel2', max(communities) + 1)\n\n# visualize\nnp.random.seed(123)\nnx.draw_spring(karate, labels = nodelabels, cmap = pastel2,\nnode_color = communities, edge_color = \"grey\")\nplt.show()"},{"path":"community.html","id":"finding-cliques-in-python","chapter":"7 Components, Communities and Cliques","heading":"7.3.3 Finding cliques in Python","text":"maximal cliques graph can calculated using find_cliques() function:Alternatively, functions can calculate number cliques, size largest clique, can extract graph largest clique.","code":"cliques = nx.find_cliques(karate)\nmaximal_cliques = sorted(cliques, key = len)\n\n# get number of maximal cliques\nlen(maximal_cliques)## 36# get largest clique\nmaximal_cliques[len(maximal_cliques) - 1]## ['Mr Hi', 'Actor 2', 'Actor 4', 'Actor 3', 'Actor 14']nx.graph_number_of_cliques(karate)## 36nx.graph_clique_number(karate)## 5"},{"path":"community.html","id":"examples-of-uses","chapter":"7 Components, Communities and Cliques","heading":"7.4 Examples of uses","text":"section illustrate implementation interpretation community detection algorithms using Facebook schoolfriends example, introducing new example related political tweets Ontario province Canada.","code":""},{"path":"community.html","id":"schoolfriend-community","chapter":"7 Components, Communities and Cliques","heading":"7.4.1 Detecting communities and cliques among Facebook friends","text":"Let’s reload Facebook schoolfriends graph remove isolates can investigate communities cliques inside .now connected, undirected graph 156 vertices, class gender vertex properties. First, let’s detemine largest clique graph.see 6 cliques 14 individuals, considerable overlap. can take look class gender one cliques.see clique distributed four classes mostly male. Let’s visualize clique sits full network, Figure 7.9.\nFigure 7.9: Facebook schoolfriends network one largest cliques indicated\nNow let’s use Louvain algorithm detect communities graph.Six communities identified. Let’s compare modularity community structure known ground truth communities class gender.community structure certainly better indicator connected Facebook subgroups gender class. can visualize class structure side--side Louvain community structure try interpret , Figure 7.10.\nFigure 7.10: Optimal Louvain communities Facebook schoolfriends graph (left) versus ground truth class communities (right)\nVisually, can see Louvain community structure much better representation dense friendship groups compared ground truth class structure, indicating Facebook friendships tend span across class structures. can also see one Louvain communities contains clique identified earlier.","code":"\n# get schoolfriends data\nschoolfriends_edgelist <- read.csv(\n  \"https://ona-book.org/data/schoolfriends_edgelist.csv\"\n)\nschoolfriends_vertices <- read.csv(\n  \"https://ona-book.org/data/schoolfriends_vertices.csv\"\n)\n\n# facebook friendships only\nschoolfriends_facebook <- schoolfriends_edgelist |> \n  dplyr::filter(type == \"facebook\")\n\n# create undirected graph\nschoolfriends_fb <- igraph::graph_from_data_frame(\n  d = schoolfriends_facebook,\n  vertices = schoolfriends_vertices,\n  directed = FALSE\n)\n\n# remove isolates\nisolates = which(degree(schoolfriends_fb) == 0)\nschoolfriends_fb <- delete.vertices(schoolfriends_fb, isolates)\n(cliques <- igraph::largest_cliques(schoolfriends_fb))## [[1]]\n## + 14/156 vertices, named, from 23c1636:\n##  [1] 1218 440  245  694  325  125  1423 841  376  466  624  1067 638  1237\n## \n## [[2]]\n## + 14/156 vertices, named, from 23c1636:\n##  [1] 1218 440  245  694  325  125  1423 841  376  466  624  1067 638  797 \n## \n## [[3]]\n## + 14/156 vertices, named, from 23c1636:\n##  [1] 1218 440  245  694  325  125  1423 841  376  466  624  769  1237 638 \n## \n## [[4]]\n## + 14/156 vertices, named, from 23c1636:\n##  [1] 1218 440  245  694  325  125  1423 841  376  466  624  769  1237 564 \n## \n## [[5]]\n## + 14/156 vertices, named, from 23c1636:\n##  [1] 1218 440  245  694  325  125  1423 841  376  466  624  769  797  638 \n## \n## [[6]]\n## + 14/156 vertices, named, from 23c1636:\n##  [1] 1218 440  245  694  325  125  1423 841  376  466  525  769  797  638\n# subgraph for clique 6\nclique6 <- igraph::induced_subgraph(schoolfriends_fb, \n                                    vids = cliques[[6]])\n\n(data.frame(\n  id = V(clique6)$name,\n  class = V(clique6)$class,\n  gender = V(clique6)$gender\n))##      id class gender\n## 1   466  MP*1      M\n## 2   376  MP*1      M\n## 3   638  MP*1      M\n## 4   841  MP*1      M\n## 5  1423  MP*2      M\n## 6  1218  MP*2      M\n## 7   769  PSI*      M\n## 8   797  PSI*      F\n## 9   440  PSI*      F\n## 10  125  PSI*      F\n## 11  325  PSI*      M\n## 12  694    MP      F\n## 13  245    MP      F\n## 14  525    MP      F\n# create clique property\nV(schoolfriends_fb)$clique6 <- ifelse(\n  V(schoolfriends_fb) %in% cliques[[6]], 1, 0\n)\n\n# visualize\nset.seed(123)\nggraph(schoolfriends_fb, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(size = 2, aes(color = as.factor(clique6)),\n                  show.legend = FALSE) +\n  theme_void()\n# get optimal louvain communities\ncommunities <- igraph::cluster_louvain(schoolfriends_fb)\n\n# assign community as a vertex property\nV(schoolfriends_fb)$community <- membership(communities)\n\n# how many communities?\nlength(unique(V(schoolfriends_fb)$community))## [1] 6\n# modularity of louvain\nmodularity(schoolfriends_fb, V(schoolfriends_fb)$community)## [1] 0.5290014\n# modularity of class structure\nmodularity(schoolfriends_fb, \n           as.integer(as.factor(V(schoolfriends_fb)$class)))## [1] 0.317128\n# modularity of gender structure\nmodularity(schoolfriends_fb, \n           as.integer(as.factor(V(schoolfriends_fb)$gender)))## [1] 0.06504432\n# use patchwork package for combining plots easily\nlibrary(patchwork)\n\n# visualize louvain communities\nset.seed(123)\ng1 <- ggraph(schoolfriends_fb, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(size = 2, aes(color = as.factor(community)),\n                  show.legend = FALSE) +\n  theme_void()\n\n# visualize ground truth class communities\nset.seed(123)\ng2 <- ggraph(schoolfriends_fb, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(size = 2, aes(color = class),\n                  show.legend = FALSE) +\n  theme_void()\n\n# display side by side\ng1 + g2"},{"path":"community.html","id":"detecting-politically-aligned-communities-on-twitter","chapter":"7 Components, Communities and Cliques","heading":"7.4.2 Detecting politically aligned communities on Twitter","text":"ontariopol_edgelist ontariopol_vertices data sets represent tweeting activity Ontario province politicians Canada captured September 2021 spanning several prior years activity. Although Twitter graph directed graph, set network undirected, two politicians connected interaction means one mentioning tweet one replying tweet . weight property represents number interactions therefore measure connection strength.undirected, weighted graph, screen_name party vertex properties. First, check graph connected:Now use Louvain algorithm detect optimal community structure graph. Since graph weight property, modularity calculations include edge weight.see six commmunities. Let’s compare modularity community structure ground truth political party structure.see similar modularity. Let’s visualize Louvain community party structure side--side, Figure 7.11.\nFigure 7.11: Twitter interaction Ontario politicians segmented Louvain communities (left) ground truth political parties (right). Louvain good job identifying political alignment.\nsee similar community structures, indicating Louvain algorithm done good job identifying political party alignment tweet activity politicians. Using similar methods Facebook schoolfriends example Section 7.4.1, can also identify large cliques within political parties, Figure 7.12.\nFigure 7.12: Large Twitter clique 48 politicians (left). Comparison party membership (right) reveals PCP clique.\nPlaying around: examples section, consider extending work identify key important influential nodes within communities using learning Chapter 6. Remember Twitter graph directed graph may impact calculations centrality, consider moving back directed graph calculations. Also, try investigating happens seek optimal unweighted Louvain communities ontariopol graph.","code":"\n# get edgelist and vertex data\nontariopol_edges <- read.csv(\n  \"https://ona-book.org/data/ontariopol_edgelist.csv\"\n)\nontariopol_vertices <- read.csv(\n  \"https://ona-book.org/data/ontariopol_vertices.csv\"\n) \n\n# create undirected graph\n(ontariopol <- igraph::graph_from_data_frame(\n  d = ontariopol_edges,\n  vertices = ontariopol_vertices, \n  directed = FALSE\n))## IGRAPH 9bde201 UNW- 108 6095 -- \n## + attr: name (v/c), screen_name (v/c), party (v/c), weight (e/n)\n## + edges from 9bde201 (vertex names):\n##  [1] Deepak Anand--Doug Ford             Deepak Anand--Victor Fedeli         Deepak Anand--Deepak Anand         \n##  [4] Deepak Anand--Monte McNaughton      Deepak Anand--Christine Elliott     Deepak Anand--Stephen Lecce        \n##  [7] Deepak Anand--Rod Phillips          Deepak Anand--Lisa MacLeod          Deepak Anand--Michael Tibollo      \n## [10] Deepak Anand--Peter Bethlenfalvy    Deepak Anand--Raymond Sung Joon Cho Deepak Anand--Rudy Cuzzetto        \n## [13] Deepak Anand--Caroline Mulroney     Deepak Anand--Sheref Sabawy         Deepak Anand--Nina Tangri          \n## [16] Deepak Anand--Jill Dunlop           Deepak Anand--Todd Smith            Deepak Anand--Kinga Surma          \n## [19] Deepak Anand--Lisa Thompson         Deepak Anand--Kaleed Rasheed        Deepak Anand--Steve Clark          \n## [22] Deepak Anand--Ernie Hardeman        Deepak Anand--Natalia Kusendova    \n## + ... omitted several edges\nis.connected(ontariopol)## [1] TRUE\n# find optimal communities\ncommunities <- igraph::cluster_louvain(ontariopol)\n\n# assign as vertex properties\nV(ontariopol)$community <- membership(communities)\n\n# how many communities\nlength(unique(V(ontariopol)$community))## [1] 5\n# louvain modularity\nmodularity(ontariopol, \n           membership = V(ontariopol)$community, \n           weights = E(ontariopol)$weight)## [1] 0.3882044\n# political party modularity\nmodularity(ontariopol, \n           membership = as.integer(as.factor(V(ontariopol)$party)), \n           weights = E(ontariopol)$weight)## [1] 0.382394\n# visualize louvain communities\nset.seed(123)\ng1 <- ggraph(ontariopol, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(size = 2, aes(color = as.factor(community)),\n                  show.legend = FALSE) +\n  theme_void()\n\n# visualize ground truth political party communities\nset.seed(123)\ng2 <- ggraph(ontariopol, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(size = 2, aes(color = party),\n                  show.legend = FALSE) +\n  theme_void()\n\n# display side by side\ng1 + g2\n# get largest cliques \ncliques <- igraph::largest_cliques(ontariopol)\n\n# there are 24 cliques of size 48 - choose one and visualize\n# create clique property\nV(ontariopol)$clique24 <- ifelse(\n  V(ontariopol) %in% cliques[[24]], 1, 0\n)\n\n# visualize clique\nset.seed(123)\ng1 <- ggraph(ontariopol, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.7) +\n  geom_node_point(size = 2, aes(color = as.factor(clique24)),\n                  show.legend = FALSE) +\n  theme_void()\n\n# visualize ground truth political parties\nset.seed(123)\ng2 <- ggraph(ontariopol, layout = \"fr\") +\n  geom_edge_link(color = \"grey\", alpha = 0.5) +\n  geom_node_point(size = 2, aes(color = party)) +\n  labs(color = \"Party (Right hand graph)\") +\n  theme_void()\n\ng1 + g2"},{"path":"community.html","id":"learning-exercises-6","chapter":"7 Components, Communities and Cliques","heading":"7.5 Learning exercises","text":"","code":""},{"path":"community.html","id":"discussion-questions-6","chapter":"7 Components, Communities and Cliques","heading":"7.5.1 Discussion questions","text":"mean undirected graph described connected graph? Provide similar definitions weakly strongly connected directed graph.starting random vertex, design set algorithmic steps determine connected components undirected graph.vertex partition graph? Describe partition arises series edge cuts graph.meant vertex clustering graph?meant community vertices? objective usually trying achieve detect communities graph?Describe understanding term ‘modularity’ relates community detection graphs.Name common community detection algorithm describe works.mean term ‘unsupervised’ describe community detection process?meant term ‘clique’ undirected graph?maximal clique largest clique graph? maximal cliques always largest cliques? ?","code":""},{"path":"community.html","id":"data-exercises-6","chapter":"7 Components, Communities and Cliques","heading":"7.5.2 Data exercises","text":"Exercises 1-3, load wikivote edgelist onadata package download internet70. Recall data set represents votes Wikipedia members Wikipedia members nominate member administrator status. Create directed graph data set. careful trying visualize graph, large.Determine many weakly connected components graph. large largest component?Determine many strongly connected components graph. large largest component?Describe explain interpret difference results Questions 1 2.Exercises 4-10, load email_edgelist email_vertices data sets onadata package download internet71. data set represents network emails sent members large research institution. department member included vertex data set. Create undirected graph data72.Determine connected components network reduce network largest connected component.Use Louvain algorithm determine vertex partition/community structure optimal modularity network.Compare modularity Louvain community structure ground truth department structure.Visualize graph color-coded Louvain community, visualize graph separately color-coded ground truth department. Compare visualizations. Can describe Louvain communities terms departments?Create dataframe containing community department vertex. Manipulate dataframe show percentage individuals department community. Try visualize using heatmap style visualization try use describe communities terms departments.Find largest clique size graph. many largest cliques ? think clique represents context?Try visualize members cliques context entire graph. can conclude?Extension: questions require use Leiden community detection algorithm, may recall earlier chapter guaranteed find partition least matches modularity Louvain partition, can often improve . Python programmer, Leiden algorithm easily used cdlib package. R programmer, need use leiden package, uses Python implementation algorithm inside R. may need familiar reticulate package73 ensure appropriate Python environment available inside R session.Use Leiden community detection algorithm find vertex partition optimal modularity. many communities Leiden algorithm detect?Compare Leiden partition modularity Louvain partition modularity.Try use visualization data exploration methods determine main differences Leiden Louvain partitions.","code":""},{"path":"similarity.html","id":"similarity","chapter":"8 Assortativity and Similarity","heading":"8 Assortativity and Similarity","text":"chapter round study important graph concepts metrics looking two new concepts people network analyst often good reason study. first concept assortativity, described tendency vertices connect ‘attach’ vertices similar properties graph. effectively measure homophily network. Highly assortative networks robust destructive events like loss vertices, concentration can inefficient terms information flow, organizational settings can problematic diverse interaction experience.second concept look vertex graph similarity. certain networks information vertex properties available, may make sense infer two vertices similar way immediate networks similar. concept similarity can also extended entire graphs. simplest case, may looking set vertices using different definitions connection, want measure whether different definitions produce substantially network entirely different network. organizations start mine many different forms data define connection (email, calendar, timesheet, document collaboration name ), becoming important understand similarities differences networks generated data sources.","code":""},{"path":"similarity.html","id":"assortativity-in-networks","chapter":"8 Assortativity and Similarity","heading":"8.1 Assortativity in networks","text":"already seen previous chapters natural want study extent vertices similar ground truth properties densely connected graph. Chapter 7, looked politicians representing political parties connect Twitter, schoolchildren class connect Facebook. exercises end chapter, looked researcher communities form email either within ground truth research departments.assortativity coefficient graph measure extent vertices properties connect . relatively recently defined metric defined slightly differently according whether property interest categorical (e.g., department political party) numeric (e.g., degree centrality). See Newman (2002) full description mathematical definition.assortativity coefficient graph ranges \\(-1\\) \\(1\\), just like correlation coefficient. Assortativity coefficients close \\(1\\) indicate high likelihood two vertices property connected. called assortative network. Assortativity coefficients close \\(-1\\) indicate low likelihood two vertices property connected. called disassortative network. Networks assortativity coefficients close zero neither assortative disassortative usually described neutral assortativity.","code":""},{"path":"similarity.html","id":"categorical-or-nominal-assortativity","chapter":"8 Assortativity and Similarity","heading":"8.1.1 Categorical or nominal assortativity","text":"Let’s look categorical assortativity first bringing back two examples previous chapter. First, look Facebook schoolfriends network calculate assortativity class. R, can use assortativity_nominal() function calculate categorical assortativity (see end chapter Python implementations). Note functions expect numeric vector indicate category membership.suggests moderate assortativity, moderate likelihood students class Facebook friends. Now let’s compare ‘real’ reported friendships.see substantially higher assortativity class reported friendships, indicating class strongly associated developing reported school friendship.Playing around: may remember concept modularity introduced Chapter 7. categorical vertex properties, modularity assortativity effectively measure similar concepts. Calculate modularity Facebook schoolfriends class compare assortativity. Also, play around prior data sets calculate assortativity communities detected Chapter 7. Recall also example Chapter 5 divided workfrance population tables good mix different departments. completed exercise, may interested compare assortativity population department versus table get measure successful creating diverse tables.","code":"\nlibrary(igraph)\n\n# get data\nschoolfriends_edgelist <- read.csv(\n  \"https://ona-book.org/data/schoolfriends_edgelist.csv\"\n)\nschoolfriends_vertices <- read.csv(\n  \"https://ona-book.org/data/schoolfriends_vertices.csv\"\n)\n\n# create undirected Facebook friendships graph\nschoolfriends_fb <- igraph::graph_from_data_frame(\n  d = schoolfriends_edgelist |> \n    dplyr::filter(type == \"facebook\"),\n  vertices = schoolfriends_vertices,\n  directed = FALSE\n)\n\n# calculate assortativity by class for Facebook friendships\nigraph::assortativity_nominal(\n  schoolfriends_fb, \n  as.integer(as.factor(V(schoolfriends_fb)$class))\n)## [1] 0.3833667\n# create directed graph of reported friendships\nschoolfriends_rp <- igraph::graph_from_data_frame(\n  d = schoolfriends_edgelist |> \n    dplyr::filter(type == \"reported\"),\n  vertices = schoolfriends_vertices\n)\n\n# calculate assortativity by class for reported friendships\nigraph::assortativity_nominal(\n  schoolfriends_rp, \n  as.integer(as.factor(V(schoolfriends_fb)$class))\n)## [1] 0.7188919"},{"path":"similarity.html","id":"degree-assortativity","chapter":"8 Assortativity and Similarity","heading":"8.1.2 Degree assortativity","text":"common form numerical assortativity degree assortativity. high degree assortativity measure preferential attachment organizations, highly connected vertices connected large number vertices low degree make remainder network., let’s use schoolfriends networks example calculate degree assortativity R.see real-life friendships moderately assortative data, whereas Facebook friendships approximately neutral. indicates popular students stronger tendency real-life friends popular students.Although relatively recent concept, assortativity useful measure understanding people organizational networks. Highly assortative networks demonstrate resilience knowledge, community social capital concentrated strong core, disruptions departures actors networks less likely affect network whole. However, networks also demonstrate characteristics counterproductive diversity inclusion can represent challenging environments new entrants adjust .thought social networks unlike real life networks degree assortative. However, recent research begun question . Although seem case social networks assortative non-social networks, research various data sets connection individuals direct (rather inferred joint membership group) suggests social networks likely neutrally assortative (Fisher et al. (2017)). research topic great interest currently social network analysis.","code":"\n# degree assortativity of Facebook friendships (undirected)\nigraph::assortativity_degree(schoolfriends_fb)## [1] 0.02462444\n# degree assortativity of reported friendships (directed)\nigraph::assortativity_degree(schoolfriends_rp)## [1] 0.3098123"},{"path":"similarity.html","id":"vertex-similarity","chapter":"8 Assortativity and Similarity","heading":"8.2 Vertex similarity","text":"Often lucky enough really rich ground truth information vertices network. particularly case need analyze people networks anonymization constraints. Nevertheless, seen examples previous chapters like workfrance graph ontariopol graph, computational methods allow us infer conclusions vertices groups vertices can often good estimates ground truth properties vertices. networks, can conclude vertices similar way share similar immediate connections. example, workfrance graph, two vertices first degree networks overlap large degree, unreasonable infer likelihood two vertices department.vertex similarity coefficient pair vertices measure similar immediate networks two vertices. Imagine two vertices \\(v_1\\) \\(v_2\\) unweighted graph \\(G\\). three common ways calculate vertex similarity \\(v_1\\) \\(v_2\\), follows:Jaccard similarity coefficient number vertices neighbors \\(v_1\\) \\(v_2\\) divided number vertices neighbors least one \\(v_1\\) \\(v_2\\).dice similarity coefficient twice number vertices neighbors \\(v_1\\) \\(v_2\\) divided sum degree centralities \\(v_1\\) \\(v_2\\). Thus, common neighbors double counted method.inverse log-weighted similarity coefficient sum inverse logs degrees common neighbors \\(v_1\\) \\(v_2\\). definition asserts common neighbors high degree network ‘less valuable’ detecting similarity higher likelihood common neighbor simply chance.illustrate three types vertex similarity coefficients show calculated R, let’s bring back \\(G_{14}\\) unweighted graph Chapters 5 6, visualize Figure 8.1.\nFigure 8.1: ’s old friend \\(G_{14}\\) \nLet’s look Vertices 7 8 \\(G_{14}\\). calculate Jaccard similarity coefficient, note Vertices 4 9 two common neighbors vertices, Vertices 4, 6, 7, 8 9 neighbors least one Vertices 7 8. Therefore, see Jaccard similarity coefficient 0.4. use similarity() function igraph whose default calculate Jaccard similarity.see -diagonal components matrix confirmation Jaccard similarity coefficient 0.4.calculate dice similarity coefficient, note sum degrees Vertices 7 8 7; therefore, dice similarity equal \\(\\frac{4}{7}\\) 0.571.Finally, calculate inverse log weighted similarity coefficient, sum inverse logs degrees common neighbors Vertices 4 8, \\(\\frac{1}{\\ln{7}} + \\frac{1}{\\ln{4}}\\), calculates 1.235.output similarity() function variant returns similarity selected vertices vertices network—try like. order extract specific similarity Vertices 7 8, ensure label rows columns matrix vertex name extracting specific value .Playing around: Go back prior examples Chapter 7 detected communities densely connected vertices graphs like schoolfriends ontariopol. Play around calculating similarity pairs vertices inside communities versus communities think whether results make sense.","code":"\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(dplyr)\n\n# download edgelist and create unweighted graph\ng14_edgelist <- read.csv(\"https://ona-book.org/data/g14_edgelist.csv\")\ng14 <- igraph::graph_from_data_frame(d = g14_edgelist |> \n                                       dplyr::select(from, to),\n                                     directed = FALSE)\n\n# visualize\nset.seed(123)\n(g14viz <- ggraph(g14, layout = \"lgl\") +\n    geom_edge_link(color = \"grey\") +\n    geom_node_label(aes(label = name), fill = \"lightblue\") +\n    theme_void())\nigraph::similarity(g14, vids = c(\"7\", \"8\"))##      [,1] [,2]\n## [1,]  1.0  0.4\n## [2,]  0.4  1.0\nigraph::similarity(g14, vids = c(\"7\", \"8\"), method = \"dice\")##           [,1]      [,2]\n## [1,] 1.0000000 0.5714286\n## [2,] 0.5714286 1.0000000\n# get invlogweighted similarity\ninvsim <- igraph::similarity(g14, method = \"invlogweighted\")\n\n# rows and cols should be labelled by vertex name before extracting\ncolnames(invsim) <- V(g14)$name\nrownames(invsim) <- V(g14)$name\n\n# extract value for vertices 7 and 8\ninvsim[\"7\", \"8\"]## [1] 1.235246"},{"path":"similarity.html","id":"graph-similarity","chapter":"8 Assortativity and Similarity","heading":"8.3 Graph similarity","text":"general question whether two graphs contain vertices representing different entities still exhibit similar internal patterns structures great interest computer science image recognition. graph isomorphism problem, example, computational problem concerned finding function exactly maps vertices one graph onto other74.organizational network analysis usually concerned comparing graphs vertices represent entities (usually people), vertex set identical edge set may different. example schoolfriends data set earlier chapter, vertices set high school students, edge sets different according whether friendships Facebook friendships reported friendships. situation, can use common set similarity metric set theory determine similar graphs .Let \\(G_1 = (V, E_1)\\) \\(G_2 = (V, E_2)\\) two graphs vertex set. Jaccard similarity \\(G_1\\) \\(G_2\\) number edges \\(E_1\\) \\(E_2\\) divided number edges least one \\(E_1\\) \\(E_2\\).Note Jaccard similarity 1 means graphs identical edge sets identical structure, similarity 0 means graphs edges common. Let’s try schoolfriends graphs. fair comparison, redefine Facebook schoolfriends graph directed graph edges always go directions.can create handy function calculate Jaccard similarity edge sets two graphs. Note igraph package special operators %s% intersection two graphs (, vertices edges graphs common), %u% union two graphs (, unique vertices edges graphs combined).see 10% similarity Facebook friendships ‘real’ reported friendships.","code":"\n# create directed version of Facebook graph\nschoolfriends_fb_dir <- igraph::as.directed(schoolfriends_fb)\n# function for jaccard similarity of edge sets\njaccard_edgeset_similarity <- function(G1, G2) {\n  inter <- length(E(G1 %s% G2))\n  un <- length(E(G1 %u% G2))\n  \n  if (un == 0) {\n    0\n  } else {\n    inter/un\n  }\n}\n\n\n# test\njaccard_edgeset_similarity(schoolfriends_fb_dir, schoolfriends_rp)## [1] 0.09727385"},{"path":"similarity.html","id":"calculating-assortativity-and-similarity-in-python","chapter":"8 Assortativity and Similarity","heading":"8.4 Calculating assortativity and similarity in Python","text":"demonstrate assortativity functions, load schoolfriends data sets.following functions can used calculate categorical assortativity degree assortativity, respectively.calculate Jaccard similarity two vertices, can use jaccard_coefficient() function networkx. example, calculate Jaccard coefficients two pairs vertices schoolfriends_fb.Dice similarity inverse log weighted similarity coefficients can calculated creating functions.Finally, calculate Jaccard similarity two edge sets, simple function can written:","code":"import networkx as nx\nimport pandas as pd\n\n# load data\n# get data\nschoolfriends_edgelist = pd.read_csv(\n  \"https://ona-book.org/data/schoolfriends_edgelist.csv\"\n)\nschoolfriends_vertices = pd.read_csv(\n  \"https://ona-book.org/data/schoolfriends_vertices.csv\"\n)\n\n# create undirected facebook graph\nschoolfriends_fb = nx.from_pandas_edgelist(\n  df = schoolfriends_edgelist[\n    schoolfriends_edgelist.type == 'facebook'\n  ],\n  source = \"from\",\n  target = \"to\"\n)\n\n# create directed reported graph\nschoolfriends_rp = nx.from_pandas_edgelist(\n  df = schoolfriends_edgelist[\n    schoolfriends_edgelist.type == 'reported'\n  ],\n  source = \"from\",\n  target = \"to\",\n  create_using=nx.DiGraph()\n)\n\n# add class vertex attribute to both graphs\nclass_attr = dict(zip(schoolfriends_vertices['id'], \nschoolfriends_vertices['class']))\nnx.set_node_attributes(schoolfriends_fb, name = \"class\", \nvalues = class_attr)\nnx.set_node_attributes(schoolfriends_rp, name = \"class\", \nvalues = class_attr)nx.attribute_assortativity_coefficient(schoolfriends_fb, \"class\")## 0.3833666875368265nx.attribute_assortativity_coefficient(schoolfriends_rp, \"class\")## 0.7188918572576618nx.degree_assortativity_coefficient(schoolfriends_fb)## 0.024624435635859483nx.degree_assortativity_coefficient(schoolfriends_rp)## 0.30981226480406543jaccards = nx.jaccard_coefficient(G = schoolfriends_fb, \nebunch = [(883, 132), (63, 991)])\nsorted(jaccards)## [(63, 991, 0.15384615384615385), (883, 132, 0.30612244897959184)]# function for dice similarity\ndef dice_coefficient(G, ebunch = None):\n      def dicesim(u, v):\n        total_degree = nx.degree(G, u) + nx.degree(G, v)\n        if total_degree == 0:\n            return 0\n        return 2*len(list(nx.common_neighbors(G, u, v))) / total_degree\n      \n      if ebunch is None:\n        ebunch = nx.non_edges(G)\n      return ((u, v, dicesim(u, v)) for u, v in ebunch)\n\n    \n  \n# test\ndice = dice_coefficient(G = schoolfriends_fb, \nebunch = [(883, 132), (63, 991)])\nsorted(dice)## [(63, 991, 0.26666666666666666), (883, 132, 0.46875)]import math \n\n# function for inverse log weighted similarity\ndef invlogweight_coefficient(G, ebunch = None):\n      def invlogwsim(u, v):\n        logw = [1/math.log(nx.degree(G, w)) \n                for w in nx.common_neighbors(G, u, v)]\n        if logw == 0:\n            return 0\n        return sum(i for i in logw)\n      \n      if ebunch is None:\n        ebunch = nx.non_edges(G)\n      return ((u, v, invlogwsim(u, v)) for u, v in ebunch)\n\n    \n  \n# test\ninvlogw = invlogweight_coefficient(G = schoolfriends_fb, \nebunch = [(883, 132), (63, 991)])\nsorted(invlogw)## [(63, 991, 0.5728002621049868), (883, 132, 4.566433503199232)]# create function for Jaccard edge set similarity\ndef jaccard_edgeset_similarity(G1, G2):\n  setG1 = set(G1.edges)\n  intersection = len(setG1.intersection(G2.edges))\n  union = len(setG1.union(G2.edges))\n  \n  if union == 0:\n    return 0\n  return intersection/union\n\n# recreate schoolfriends_fb as directed graph to compare\nschoolfriends_fb_dir = schoolfriends_fb.to_directed()\n\n# test\njaccard_edgeset_similarity(schoolfriends_fb_dir, schoolfriends_rp)## 0.09727385377942999"},{"path":"similarity.html","id":"learning-exercises-7","chapter":"8 Assortativity and Similarity","heading":"8.5 Learning exercises","text":"","code":""},{"path":"similarity.html","id":"discussion-questions-7","chapter":"8 Assortativity and Similarity","heading":"8.5.1 Discussion questions","text":"Describe meaning term ‘assortativity’ vertices graph.Describe meaning degree assortativity discuss relates concept preferential attachment.Describe assortativity modularity similar concepts graph theory.Describe concept vertex similarity define two measures vertex similarity.Describe method compare similarity two graphs vertex sets.","code":""},{"path":"similarity.html","id":"data-exercises-7","chapter":"8 Assortativity and Similarity","heading":"8.5.2 Data exercises","text":"Calculate gender assortativity coefficient two schoolfriends graphs. conclude ?Calculate department assortativity coefficient workfrance graph earlier chapters.Calculate degree assortativity coefficient workfrance ontariopol graphs previous chapters. describe meaning difference two?Choose pairs vertices department workfrance graph calculate Jaccard similarity coefficients. choose pairs different departments . results make sense? ?Find three vertices highest degree centrality workfrance graph, calculate pairwise similarity coefficients . Now three vertices relatively low degree centrality. results make sense? ?","code":""},{"path":"databases.html","id":"databases","chapter":"9 Graphs as Databases","heading":"9 Graphs as Databases","text":"course early chapters book, established certain workflow graph analysis, follows:necessary, transform existing transactional data graph-like structure better allows analysis relationships data (Chapter 4).Load transformed data (temporary) graph structures inside data science languages like R Python (Chapter 2).Create visualizations, perform analysis run algorithms based temporary structures (Chapter 3 Chapters 5 8).workflow perfectly fine one-temporary network analysis, academic project experimental analytic effort. However, organizations whose use graph methods maturing, become wasteful, inefficient unnecessarily repetitive ask analysts follow workflow repeated similar analyses. already seen Chapter 4 steps involved transforming rectangular data graph-like structure far trivial. Therefore, use graphs analytic purposes matures, becomes natural ask whether data can persisted graph-like structure order permanently available structure rapid querying easier, faster analysis.chapter look organizations can persist data graph structure efficient analysis data query. rapidly developing field, many leading organizations started implementing graph databases recent years. variety technologies available, single technology dominant. start overview space graph database technology proceed show illustrative examples one particular well-developed technology—Neo4J graph databases—including work graph databases R Python. chapter intended full reference graph databases, end chapter readers good sense basics powerful emerging technologies operate, can used make network analysis faster easier perform.","code":""},{"path":"databases.html","id":"graph-database-technology","chapter":"9 Graphs as Databases","heading":"9.1 Graph database technology","text":"Graph databases store data finding relationships primary priority. contrasts traditional databases finding transactions primary priority. commonly, graph databases take one two forms: labelled-property graphs resource description frameworks (RDFs)75.","code":""},{"path":"databases.html","id":"labelled-property-graphs","chapter":"9 Graphs as Databases","heading":"9.1.1 Labelled-property graphs","text":"Labelled-property graphs similar structure way learned graphs book. Entities products, customers, employees organizational units stored nodes, relationships ‘purchased’, ‘member ’, ‘worked ’ ‘met ’ stored edges. Nodes edges can contain defined properties allowing users filter data effectively. node edge structures usually encoded means simple JSON documents. type graph database simple efficient, also intuitive query. However, flexibility can limited upfront design graph needs considered carefully, changes structure database via introduction new nodes new relationships may straightforward. organizational network analysis, databases good choice, however, ease use data structures within organizations generally quite predictable manageable. Neo4J example labelled-property graph database popular time writing book.One features labelled-property graphs make easier use general ability write queries using intuitive query languages. Cypher query language Neo4J graph databases good example. common graph database used teaching Cypher movies database, contains information relationships small number people entertainment industry movies participated . Figure 9.1 schema diagram types nodes relationships stored graph database.\nFigure 9.1: Graph schema movies database\ncan see two types nodes: Person Movie. can also see Person can follow another Person, five relationship types Person Movie. Cypher uses ASCII art make queries easier understand write. Nodes written parentheses (p:Person) relationships written lines arrows -[:ACTED_IN]->. following Cypher query return graph people acted movies database directed Clint Eastwood, results displayed Figure 9.2.\nFigure 9.2: Graph actors movies directed Clint Eastwood movies graph database\nnode relationship may contain properties can accessed returned queries. example, Movie nodes title released properties, Person nodes name property. query return actor name, movie title movie release data, result looks like Figure 9.3.\nFigure 9.3: Results query find names actors, movie title release date movies directed Clint Eastwood movies database\nThinking ahead: Neo4J offers free, sandbox web-based environment learn graph database structure learn write Cypher queries. includes interesting graph data sets related social media analysis, crime investigation, fraud detection, sport many others. can start projects sandbox interact web limited period (need restart project). can access sandbox https://neo4j.com/sandbox. Later chapter, go detail working Neo4J graph databases including interact R Python, run queries algorithms .","code":"MATCH (p1:Person)-[:ACTED_IN]->(m:Movie)\nMATCH (m:Movie)<-[:DIRECTED]-(p2:Person {name: \"Clint Eastwood\"})\nRETURN p1, mMATCH (p1:Person)-[:ACTED_IN]->(m:Movie)\nMATCH (m:Movie)<-[:DIRECTED]-(p2:Person {name: \"Clint Eastwood\"})\nRETURN p1.name AS actor, m.title AS movie, m.released AS released"},{"path":"databases.html","id":"resource-description-frameworks","chapter":"9 Graphs as Databases","heading":"9.1.2 Resource description frameworks","text":"Resource description frameworks (RDFs) highly flexible graph database models allow hierarchical ‘spawning’ new information graph means addition new nodes. permits graph build easily organically, need worry whether given node property already exists graph—can simply added new node pointed parent node. example, imagine graph contains nodes represent people, imagine information preferred names people. Imagine information people, people preferred name others . RDF, can create new ‘property edge’ called hasPreferredName directs new node containing preferred name individual.high level flexibility makes RDFs great choice ontologies knowledge graphs development unpredictable grow organically time. low level simplicity RDFs engine behind flexibility, can translate complex query language high level, making RDFs challenging deal without specialized knowledge . particular, can often necessary ‘dictate traversal route’ graph query language RDF, require extensive knowledge graph’s structure.example open, widely used RDF graph graph underlies Wikipedia online encyclopedia, known Wikidata76. graph gives structure connection various components Wikipedia’s content. helps organize common hierarchical elements articles helps link related articles well resources inside articles photos, hyperlinks . Wikipedia constantly developing added thriving community, underlying graph needs extremely high degree flexibility support .Wikidata Query Service (WDQS) allows graph queried directly using SPARQL, standard query language RDFs. Queries can submitted https://query.wikidata.org/, sent API endpoint application77. example return top 10 countries world terms number current female city mayors recorded Wikidata.Briefly described, component query instructs graph traversal follows:Follow property edges ‘instances cities’ ‘subclasses cities’ (call resulting nodes city)Follow ‘head government’ property edges city nodes (call resulting nodes hog)Follow retrieve value hog nodes (call mayor)mayor must ‘sex gender’ property edge directs ‘female’Filter results hog ‘end date’ property edge going (, current heads government)Follow ‘country’ property edges remaining city nodes (call resulting nodes country)Get English labels country nodes.core query—remainder simply counts occurrences different country labels ranks descending order returns top 10. can see query requires quite detailed instruction traverse graph also needs detailed knowledge bewildering array codes properties values. RDFs beautiful extremely powerful relationship storage engines, high expertise bar use.Playing around: query traversal complexity RDFs barrier playing around . Wikidata Query Service (WDQS) ton resources help understand construct interesting queries. start, try submitting query WDQS check result. thought fun, key resources include long list example queries78 Query Builder79 can help non-SPARQL experts build queries.","code":"SELECT ?countryLabel (count(*) AS ?count)\nWHERE\n{\n    ?city wdt:P31/wdt:P279* wd:Q515 . \n    ?city p:P6 ?hog .           \n    ?hog ps:P6 ?mayor .         \n    ?mayor wdt:P21 wd:Q6581072 .      \n    FILTER NOT EXISTS { ?hog pq:P582 ?x }  \n    ?city wdt:P17 ?country .          \n\n    SERVICE wikibase:label {\n        bd:serviceParam wikibase:language \"en\" .\n    }\n}\nGROUP BY ?countryLabel\nORDER BY DESC(?count)\nLIMIT 10"},{"path":"databases.html","id":"example-how-to-work-with-a-neo4j-graph-database","chapter":"9 Graphs as Databases","heading":"9.2 Example: how to work with a Neo4J graph database","text":"section briefly review ways work Neo4J graph database order illustrate data can moved persistent graph structure regular query analysis. First look interact database via web browser interface. look load query data programmatically via R Python.order follow instructions section, need set free Neo4J Aura graph database. limited instance Neo4J graph database hosted cloud offered developers learners free. , follow steps:Go Neo4J Aura site https://neo4j.com/cloud/aura/ click ‘Start Free’.Register free database region choice give database name.Make record database URI, username password. following instructions, refer your_URI, your_username your_password.following examples, load ontariopol data set Ontario state politician Twitter network Chapter 7 Neo4J graph database querying database.","code":""},{"path":"databases.html","id":"neo4j-browser","chapter":"9 Graphs as Databases","heading":"9.2.1 Using the browser interface","text":"easiest way interact database using browser interface, similar Neo4J sandbox mentioned earlier. especially useful beginners need interact database programatically applications data science languages.Navigate free database instance visiting Neo4J Aura site, selecting ‘Databases’ menu, finding free database selecting ‘Open Neo4J Browser’. logging credentials, browser interface, looks like Figure 9.4.\nFigure 9.4: Neo4J browser interface\nCypher queries can entered box top80. break line without submitting query, press Shift+Enter. submit query, press Ctrl+Enter click play icon. can start submitting queries, need load data database. Among many formats, data can loaded Neo4J online csv file. Use following query load vertices ontariopol data set.query instructs database retrieve data specified URL address. instructs database create nodes called Person nodes row data. Person node contain four properties: personId, screenName, name party loaded id, screen_name, name party fields, respectively.load Person nodes. can check loaded running new query:query return name property Person nodes graph. Now need add edges using query:query instructs database load data specified online URL. row data, instructs database find Person nodes personId property corresponding fields, create directed edge called INTERACTED_WITH nodes give edge integer value weight property extracted weight field.can now look database schema using following query:show simple schema one node type one edge type. clicking database icon top left, see information panel, confirm details nodes, relationships properties graph, Figure 9.5.\nFigure 9.5: database information panel\nCongratulations! ’ve loaded data graph database. Now let’s run query find top 5 politicians interacted Christine Elliott based weight (excluding Christine Elliott ).return list 5 Robin Martin top weight 872. another example, can try find interactions LIB party politicians IND party politicians.return 4 interactions. can also try procedures Neo4J’s APOC (Awesome Procedures Cypher) library. example, try receive information distribution degrees nodes graph.Playing around: Awesome Procedures Cypher (APOC) add-library , full form, wide range useful procedures calculating statistics, finding paths, running search algorithms much . time writing, limited number APOC procedures available free cloud database version using . see list available APOC procedures, run query CALL apoc.help('apoc'). interested full range APOC procedures, can consider installing Neo4J Desktop product local machine free Neo4J website. APOC Full can installed add-inside Desktop version, well GDS (Graph Data Science) library, contains wide range graph algorithms including many methods covered earlier book.","code":"LOAD CSV WITH HEADERS \nFROM 'https://ona-book.org/data/ontariopol_vertices.csv' \nAS row\nMERGE (p:Person {\n  personId: row.id, \n  screenName: row.screen_name, \n  name: row.name, \n  party: row.party\n});MATCH (p:Person) \nRETURN p.name;LOAD CSV WITH HEADERS \nFROM 'https://ona-book.org/data/ontariopol_edgelist.csv' \nAS row\nMATCH (p1:Person {personId:row.from}), (p2:Person {personId:row.to})\nCREATE (p1)-[:INTERACTED_WITH {weight: toInteger(row.weight)}]-> (p2);CALL db.schema.visualization();MATCH (p:Person)-[i:INTERACTED_WITH]->({name: \"Christine Elliott\"})\nWHERE p.name <> \"Christine Elliott\"\nRETURN p.name as name, i.weight as weight\nORDER BY weight DESC\nLIMIT 5;MATCH (p1:Person {party: 'LIB'})-[INTERACTED_WITH]->(p2:Person {party: \"IND\"})\nRETURN p1.name AS LIB_name, p2.name AS IND_name;CALL apoc.stats.degrees()"},{"path":"databases.html","id":"working-with-neo4j-using-r","chapter":"9 Graphs as Databases","heading":"9.2.2 Working with Neo4J using R","text":"neo4jshell package R allows submit queries Neo4J database retrieve results, among things81. package requires cypher-shell command line utility installed system. can install cypher-shell command line utility standalone downloading installing Neo4J downloads page82. Another option download install full free Neo4J community server, include cypher-shell, community server download page83.neo4j_query() query function work smoothly, ensure directory containing cypher-shell executable system PATH environment variable. Otherwise, need constantly quote full path cypher-shell executable shell_path argument function.Assuming configured cypher-shell system, easy submit queries Neo4J instance retrieve results dataframe. first step configure Neo4J connection list R.examples , assume data already loaded database using queries Section 9.2.1. , can load data R submitting queries using neo4j_query() function. Assuming data already loaded, can submit query database retrieve results dataframe. Let’s submit query find first degree incoming network IND party politicians.similar way can submit APOC procedure obtain statistics graph. query gets statistics -degree nodes graph.","code":"\nneo4j_conn <- list(\n  address = \"your_URI\",\n  uid = \"your_username\",\n  pwd = \"your_password\"\n)\n# write cypher query\nquery <- \"\nMATCH (p:Person)-[:INTERACTED_WITH]->({party: 'IND'})\nRETURN DISTINCT p.name AS name, p.party as party;\n\"\n\n# submit to server and retrieve results as dataframe\nresults <- neo4jshell::neo4j_query(con = neo4j_conn, qry = query)\n\n# view first few results\nhead(results)##                 name party\n## 1        Roman Baber   IND\n## 2       Deepak Anand   PCP\n## 3      Aris Babikian   PCP\n## 4       Toby Barrett   PCP\n## 5 Peter Bethlenfalvy   PCP\n## 6         Will Bouma   PCP\n# get out-degree stats\nstats <- neo4jshell::neo4j_query(\n  con = neo4j_conn, \n  qry = \"CALL apoc.stats.degrees('>');\"\n)\n\n# extract max, min and mean\nstats[c(\"min\", \"max\", \"mean\"), ]## [1] \"7\"                 \"80\"                \"56.43518518518518\""},{"path":"databases.html","id":"working-with-neo4j-using-python","chapter":"9 Graphs as Databases","heading":"9.2.3 Working with Neo4J using Python","text":"py2neo package allows interaction Neo4J servers Python. preconfiguration required. Connection established means Graph() object., assume data already loaded graph. case, submit data load queries Section 9.2.1 way following examples.Results queries returned list dicts, can converted required format.run APOC procedures:","code":"import pandas as pd\nfrom py2neo import Graph\nimport os\n\n# create  connection\nneo4j_conn = Graph(\n    \"your_URI\", \n    auth = (\"your_username\", \"your_password\")\n)# write cypher query\nquery = \"\"\"\nMATCH (p:Person)-[:INTERACTED_WITH]->({party: 'IND'})\nRETURN DISTINCT p.name AS name, p.party as party;\n\"\"\"\n\n# submit to server and retrieve results as list of dicts\nresults = neo4j_conn.run(query).data()\n\n# convert results to pandas DataFrame and view first few rows\npd.DataFrame(results).head()##                  name party\n## 0         Roman Baber   IND\n## 1        Deepak Anand   PCP\n## 2       Aris Babikian   PCP\n## 3        Toby Barrett   PCP\n## 4  Peter Bethlenfalvy   PCP# submit APOC procedure\nstats = neo4j_conn.run(\"CALL apoc.stats.degrees('>');\").data()\n\n# convert results to pandas DataFrame\npd.DataFrame(stats)##    type direction  total  p50  p75  p90  p95  p99  p999  max  min       mean\n## 0  None  OUTGOING   6095   59   63   70   71   77    80   80    7  56.435185"},{"path":"databases.html","id":"moving-to-persistent-graph-data-in-organizations","chapter":"9 Graphs as Databases","heading":"9.3 Moving to persistent graph data in organizations","text":"material chapter intended brief introduction idea persisting data graph database. organizations repeatedly conducting analysis connections relationships, natural step make analysis ‘oven ready’. Common transformations need done data traditional rectangular databases order allow analysis connections can done automatically regular intervals (weekly, monthly whatever makes sense based reporting cadences) incrementally added graph database. automated ETL (Extract, Transform, Load) process can set R, Python another platform timed run servers specified intervals extract data rectangular databases, perform necessary transformations create data vertices, edges properties load data graph database.noted graph database extremely flexible ability store many types data many use cases schema. Imagine, example wanted add data schoolfriends graph graph schema loaded ontariopol data. completely different networks, can easily coexist graph database. many options database designed facilitate . example, instead single Person node, different Politician Student nodes. add type property Person node value politician student. create new Politician Student nodes edges relationship IS_A connecting RDF-like approach.cases, two networks can live database never interfere , model can scaled arbitrarily long designed appropriately84. plethora options means graph databases often require -front schema design consideration compared traditional databases. Changes organization’s data inevitably occur time need added schema, designs make less easy .","code":""},{"path":"databases.html","id":"learning-exercises-8","chapter":"9 Graphs as Databases","heading":"9.4 Learning exercises","text":"","code":""},{"path":"databases.html","id":"discussion-questions-8","chapter":"9 Graphs as Databases","heading":"9.4.1 Discussion questions","text":"graph databases attractive option organizations regularly performing analysis connections?Describe labelled-property graphs resource description frameworks (RDFs). Can explain differences graph database technologies, including pros cons use?Find examples real-life use cases RDFs. RDFs good choices use cases?Search examples labelled-property graph technologies. query languages use?Describe Cypher queries constructed intuitively using ASCII art. Can find query languages use ASCII art? similar different languages?","code":""},{"path":"databases.html","id":"data-exercises-8","chapter":"9 Graphs as Databases","heading":"9.4.2 Data exercises","text":"exercises related Neo4J, try completing browser also using either R Python. Remember loading data graph, careful ensure previous load data deleted reload. need , can search help online Cypher deletion queries, note edges must deleted nodes.Try write SPARQL query submit Wikidata find winners first ten Eurovision Song Contests. Try similar query find winners FIFA World Cups.Write submit Cypher query ontariopol data loaded Neo4J find interactions PCP party politicians LIB party politicians weight greater 10.Write submit APOC procedure ontariopol data loaded Neo4J obtain -degree statistics graph.Using online vertex edge set schoolfriends data set85, create new set nodes Neo4J graph called Student nodes. Give nodes name, studentClass studentGender property data sets.Create undirected edges Facebook friendships data call relationship FACEBOOK_FRIENDS. Create directed edges reported friendships call relationship REPORTED_FRIEND.Write submit Cypher query find Facebook friends node 883, similar query find reported node 883 friend.Write submit APOC procedure find node degree statistics Facebook friendships. Write submit separate procedures incoming outgoing reported friendships.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
